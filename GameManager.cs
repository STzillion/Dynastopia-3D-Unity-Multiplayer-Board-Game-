
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using System.Linq;
using TMPro;
using Unity.VisualScripting;
using static GameManager.Entity;
using System.Security.Cryptography;
using UnityEngine.Rendering.PostProcessing;
using static GameManager;
using Unity.Netcode;





public class GameManager : NetworkBehaviour
{
   
    public static GameManager instance;
    public Route currentRoute;
 //   public PlayerSelectionScreen playerSelectionScreenScript;
    int routePosition;
    public int steps;
    bool isMoving;
    public float turnSpeed = 5.0f;
    int defenceT = 3;

    public bool isUpdatingList = false;



    //   public Rigidbody rb;
    // public AnimationClip attackAnimation;

    public AudioSource grenadeExplosionAudio;
    public AudioSource CardsPickedAudio;
    public AudioSource ShowDiceSound;
    public AudioSource WalkingSound;
    public AudioSource MovingToNextSquareAudio;
    public AudioSource GunShotsAudio;
    public AudioSource RocketLauncherAudio;
    public AudioSource PoliceSirensAudio;
    public AudioSource WindCameraSwitchAudio;
    public AudioSource ExplosionAudio;
    public AudioSource CarsAreMovingChaseAudio;
    public AudioSource ReloadGunsAudio;
    public AudioSource PoliceStopSquareAudio;
    public AudioSource BoughtWeaponShopAudio;
    public AudioSource CrowdScreamingAudio;
    public AudioSource JailCellClosingAudio;
    public AudioSource BulletRicochet;
    
  //  public AudioSource SquaresAddNeonAudio;
 //   public AudioSource shootingGunAudio;


    public bool isWalking = false;
    public bool RobBankYesBoolZero = false;
    public bool RobBankYesBoolOne = false;
    public bool RobBankYesBoolTwo = false;
    public bool RobBankYesBoolThree = false;
    public bool RobBankYesBoolFour = false;

    public bool isPlayerRollingDiceMove = false;
    public bool isPlayerRollingDiceRobBank = false;

    public bool isPreviousPlayerCPU;
    public bool isPreviousPlayerHuman;

    public bool isUsingShieldBool;
    public bool isNotUsingShieldBool;

    public Dice dice;
  //  public objectMovement ObjectMovement;
    public PedestrianMovement[] NPCMovementRunning;
    public RoadSeperatorMovement[] RoadSeperatorMovementRunning;
    

    public PostProcessVolume postProcessVolume;
    DepthOfField depthOfField;

    public Material NodeChangeColor;
    public string floatPropertyName = "_Scale";

    public CameraController cameraController;
    public objectMovement ObjectMovementScriptPolice;
    public objectMovement ObjectMovementRedCar;
    public objectMovement ObjectMovementChaseObject;
    public objectMovement ObjectMovementYellowCar;


    public TimeController timeControllerScript;

    public MeshRenderer[] GrenadeMeshRenderer;



  
   
   
    public TextMeshProUGUI rollDiceText;
    public TextMeshProUGUI rangeText;
    public TextMeshProUGUI weaponInfoText;
    public TextMeshProUGUI BoughtWeaponText;

    public TextMeshProUGUI WeaponChooseAttackOne;
    public TextMeshProUGUI WeaponChooseAttackTwo;
    public TextMeshProUGUI WeaponChooseAttackThree;
    public TextMeshProUGUI WeaponChooseAttackFour;
    public TextMeshProUGUI WeaponChooseAttackFive;
    public TextMeshProUGUI WeaponChooseAttackSix;
    public TextMeshProUGUI WeaponChooseAttackSeven;
    public TextMeshProUGUI WeaponChooseAttackEight;

    public TextMeshProUGUI weaponOneRangeText;
    public TextMeshProUGUI weaponTwoRangeText;
    public TextMeshProUGUI weaponThreeRangeText;
    public TextMeshProUGUI weaponFourRangeText;
    public TextMeshProUGUI weaponFiveRangeText;
    public TextMeshProUGUI weaponSixRangeText;
    public TextMeshProUGUI weaponSevenRangeText;
    public TextMeshProUGUI weaponEightRangeText;
   // public TextMeshProUGUI ChaseSceneText;
    public TextMeshProUGUI RobberyCardNumberReminder;
    public TextMeshProUGUI RobberyCardNumberRolled;
    public TextMeshProUGUI RobberyCardVerdictText;
    public TextMeshProUGUI PlayerHasWonText;


  
  


   




    public Image myImage;
    public GameObject weaponShopPanel;
    public GameObject AttackPhasePanel;
    public GameObject CharacterUIPanel;
    public GameObject weaponInfoTextPanel;
    public GameObject NoWeaponsPanel;
    public GameObject GunShopCardPanel;
    public GameObject HospitalCardPanel;
    public GameObject HospitalHealCardPanel;
    public GameObject SafeZoneCardPanel;
    public GameObject ChaseScenePanel;
    public GameObject ChaseScenePanelVerdict;
    public GameObject AllCharacterPanelsHolder;
    public GameObject SecondCharacterUIPanel;
    public GameObject characterHasWonPanel;
    

    public GameObject CameraChasePoint;



    


    public GameObject GrenadeTrap;
    public GameObject GrenadeTrapOne;
    public GameObject  GrenadeTrapTwo;
    public GameObject GrenadeTrapThree;
    public GameObject diceLightHolder;


    public GameObject[] CameraMovePoints;
    public GameObject[] charactersInJail;
    public GameObject[] characterStones;
    public objectMovementInverseRoute[] CarsOnOtherSide;



    public ParticleSystem FallingMoney;
    public ParticleSystem[] GunInCarFlash;
    public ParticleSystem GrenadeTrapExplosion;
    public ParticleSystem GrenadeTrapExplosionOne;
    public ParticleSystem GrenadeTrapExplosionTwo;
    public ParticleSystem GrenadeTrapExplosionThree;
    public ParticleSystem CarFlipSmoke;
    public ParticleSystem CarEscapedExplosion;
    public ParticleSystem MoneyFallingAway;

    public ParticleSystem PlayerHurtExplosion;
    public ParticleSystem PlayerHurtExplosionOne;
    public ParticleSystem PlayerHurtExplosionTwo;
    public ParticleSystem PlayerHurtExplosionThree;
    public ParticleSystem PlayerHurtExplosionFour;
    public ParticleSystem PlayerHurtExplosionFive;

    public ParticleSystem BulletShieldImpact;
    public ParticleSystem BulletShieldImpactOne;
    public ParticleSystem BulletShieldImpactTwo;
    public ParticleSystem BulletShieldImpactThree;
    public ParticleSystem BulletShieldImpactFour;
    public ParticleSystem BulletShieldImpactFive;

    public ParticleSystem pistolPlayerFlash;
    public ParticleSystem pistolPlayerOneFlash;
    public ParticleSystem pistolPlayerTwoFlash;
    public ParticleSystem pistolPlayerThreeFlash;
    public ParticleSystem pistolPlayerFourFlash;
    public ParticleSystem pistolPlayerFiveFlash;


    public ParticleSystem Ak47PlayerFlash;
    public ParticleSystem Ak47PlayerOneFlash;
    public ParticleSystem Ak47PlayerTwoFlash;
    public ParticleSystem Ak47PlayerThreeFlash;
    public ParticleSystem Ak47PlayerFourFlash;
    public ParticleSystem Ak47PlayerFiveFlash;

    public ParticleSystem M15PlayerFlash;
    public ParticleSystem M15PlayerOneFlash;
    public ParticleSystem M15PlayerTwoFlash;
    public ParticleSystem M15PlayerThreeFlash;
    public ParticleSystem M15PlayerFourFlash;
    public ParticleSystem M15PlayerFiveFlash;

   

    public ParticleSystem SniperRifleFlash;
    public ParticleSystem SniperRifleOneFlash;
    public ParticleSystem SniperRifleTwoFlash;
    public ParticleSystem SniperRifleThreeFlash;
    public ParticleSystem SniperRifleFourFlash;
    public ParticleSystem SniperRifleFiveFlash;


    public ParticleSystem ShotgunPlayerFlash;
    public ParticleSystem ShotgunPlayerOneFlash;
    public ParticleSystem ShotgunPlayerTwoFlash;
    public ParticleSystem ShotgunPlayerThreeFlash;
    public ParticleSystem ShotgunPlayerFourFlash;
    public ParticleSystem ShotgunPlayerFiveFlash;

    public ParticleSystem RocketLauncherFlash;
    public ParticleSystem RocketLauncherOneFlash;
    public ParticleSystem RocketLauncherTwoFlash;
    public ParticleSystem RocketLauncherThreeFlash;
    public ParticleSystem RocketLauncherFourFlash;
    public ParticleSystem RocketLauncherFiveFlash;

    public ParticleSystem FireWorksFlash;
    public ParticleSystem DiceLight;
    public ParticleSystem GodEyeLaser;
    public ParticleSystem GodEyeLaserOne;
    public ParticleSystem GodEyeLaserTwo;
    public ParticleSystem GodEyeLaserThree;
    public ParticleSystem GodEyeLaserFour;
    public ParticleSystem GodEyeLaserFive;

   







    public GameObject RobberyCardDecision;
    public GameObject RobberyCardEasy;
    public GameObject RobberyCardMedium;
    public GameObject RobberyCardMediumGettingHard;
    public GameObject RobberyCardHard;
    public GameObject RobberyCardEpic;

    public GameObject BrokerCardMoney;
    public GameObject BrokerCardWeapon;

    public GameObject TrapCardLives;

    public GameObject MysteryCardJail;
    public GameObject MysteryCardMoney;
    public GameObject MysteryCardWeaponM15;
    public GameObject MysteryCardGainLife;
    public GameObject MysteryCardLoseLife;


    public GameObject PoliceStopGotoJail;
    public GameObject PoliceStopKeepGoing;

    public GameObject CharacterInCarGun;
    public GameObject CharacterInCarGunOne;
    public GameObject CharacterInCarGunTwo;
    public GameObject CharacterInCarGunThree;
    public GameObject CharacterInCarGunFour;
    public GameObject CharacterInCarGunFive;

    public GameObject CharacterInCar;
    public GameObject characterInCarOne;
    public GameObject CharacterInCarTwo;
    public GameObject CharacterInCarThree;
    public GameObject CharacterInCarFour;
    public GameObject CharacterInCarFive;
    public GameObject JailBuilding;
    public GameObject JailBuildingCellDoor;

    public Animator JailBuildingCellDoorAnimator;
    public Animator CharacterHasWonPanelAnim;
    public Animator CharacterInCarAnimation;
    public Animator CharacterInCarAnimationOne;
    public Animator CharacterInCarAnimationTwo;
    public Animator CharacterInCarAnimationThree;
    public Animator CharacterInCarAnimationFour;
    public Animator CharacterInCarAnimationFive;
    public Animator PoliceCarFlip;

    public GameObject PoliceChaseCar;
    public GameObject PoliceChaseCarStone;
    public GameObject ChaseSceneCameraSeeObject;

    public GameObject GodEyeSatelite;

    public GameObject[] GunShops;
    public GameObject[] mysteryMen;
    public GameObject[] Soldiers;

    public Animator GunShopCardAnimator;
    public Animator SafeZoneCardAnimator;
    public Animator HospitalCardAnimator;
    public Animator HospitalHealCardAnimator;
    public Animator TrapCardAnimators;
    public Animator[] GrenadeObjectAnimator;
  
    public Animator RobberyCardDecisionAnimator;


    public Animator SalaryUIAnim;
    public Animator SalaryUIAnimOne;

  

    
    public Animator[] RobberyCards;
    public Animator[] BrokerCards;
    public Animator[] MysteryCards;
    public Animator[] PoliceStop;
    public Animator[] SoldiersAnimations;
    public Animator[] MysteryMenAnimations;
    public Animator[] characterPanelsHolderAnimation;
    public Animator[] BoughtFromShopMoneyAnim;
    public Animator[] GunsTakenInJailAnim;
   
 
  

    public List<GameObject> NodeColorObjectList = new List<GameObject>();

    
  
    // public GameObject[] playerButtons; 
    // public Transform buttonParent;


    [System.Serializable]

    

    public class Entity
    {
        public Animator playerAnimator;
        public Animator ShieldAnimator;
        public string playerName;
        public bool hasTurn;
        public bool isBuying;
        public bool isCPUDoneAttacking = false;
        public bool isCPUDoneWalking = false;
        public bool isPartOfList;

        public GameObject SniperRifle;
        public GameObject Ak47;
        public GameObject Pistol;
        public GameObject Grenade;
        public GameObject Shotgun;
        public GameObject RocketLauncher;
        public GameObject M15;
        public GameObject RocketLauncherHead;
        public GameObject GodEyeswitch;
        

       /* public ParticleSystem SniperRifleMuzzleFlash;
        public ParticleSystem Ak47MuzzleFlash;
        public ParticleSystem PistolMuzzleFlash;
        public ParticleSystem GrenadeMuzzleFlash;
        public ParticleSystem ShotgunMuzzleFlash;
        public ParticleSystem RocketLauncherMuzzleFlash;
        public ParticleSystem M15MuzzleFlash;
       */
       

        
        public enum PlayerTypes
        {
            HUMAN,
            CPU,
            NO_PLAYER,
            DEFAULT_PLAYER,
        }
        

        public PlayerTypes playerType;
        public GameObject playerObject;
        public GameObject characterObject;
        public int position;

        public int hasPassedSalarySquare = 0;
        public int selectScreenPos = -1;

        public int money = 4000;
        public int lives = 4;
        public int weaponCount;
        public bool hasWeapon = false;
        public bool hadWeapon = false;
        public bool hasRobbedBank = false;
        public bool isAttacking = false;
        public bool PistolCLicked = false;
        public bool Ak47Clicked = false;
        public bool M15Clicked = false;
        public bool RocketLauncherClicked = false;
        public bool SniperClicked = false;
        public bool GrenadeClicked = false;
        public bool ShotgunClicked = false;
        public bool GodEyeClicked = false;

        public bool hasAttackedPlayer;
        public bool goneRoundBoard;
       


        [System.Serializable]
        public class WeaponInformation
        {
            public string name;
            public int range;
            public int damage;
            public int bullets;
            
        }

        public List<WeaponInformation> WeaponInfo = new List<WeaponInformation>();

        
    }

    public List<Entity> playerList = new List<Entity>();


    public List<Weapon> weaponShop = new List<Weapon>
    {
        new Weapon { name = "Pistol", range = 3, price = 1500, damage = 1, bullets = 2 },
        new Weapon { name = "AK47", range = 6, price = 3500, damage = 1, bullets = 3 },
        new Weapon { name = "M15", range = 8, price = 4000, damage = 2, bullets = 1},
        new Weapon { name = "Rocket Launcher", range = 10, price = 8500, damage = 5, bullets = 1 },
        new Weapon { name = "Sniper", range = 12, price = 7000, damage = 3, bullets = 1 },
        new Weapon { name = "Grenade", range = 4, price = 4500, damage = 4, bullets = 1 },
        new Weapon { name = "Shotgun", range = 3, price = 4000, damage = 5, bullets = 1 },
        new Weapon { name = "GodEye", range = 99, price = 18000, damage = 8, bullets = 1 },
        new Weapon { name = "Shield", range = 99, price = 2000, damage = 0, bullets = 1 },
      
    };

 

 

    public class Weapon
    {
        public string name;
        public int range;
        public int price;
        public int damage;
        public int bullets;
    }

    




    public enum States
    {
       // ATTACK,
        WAITING,
        ROLL_DICE,
        BUYING,
        SWITCH_PLAYER,
        WAITAFTERATTACK
    }
    public States state;

    public int activePlayer;
    bool switchingPlayer;
    public bool inBuyingPhase = false;
    public bool canBuy = false;
    public bool canEndTurn = false;
   // public int[] buyingNodes = { 6, 26, 36, 44, 51, 55 };
    public float delayTime = 4.5f;


    public Button rollDiceButton;
    public Button buyButton;
    public Button attackButton;
    public Button endTurn;
    public Button BackAttackPanelButton;
    public Button BackToAttackButtonSelect;
    public Button CloseShopButton;
    public Button RobBankYes;
    public Button RobBankNo;
    public Button RobBankDiceRolled;

    public Button weaponButtonOne;
    public Button weaponButtonTwo;
    public Button weaponButtonThree;
    public Button weaponButtonFour;
    public Button weaponButtonFive;
    public Button weaponButtonSix;
    public Button weaponButtonSeven;
    public Button weaponButtonEight;
    public Button weaponButtonNine;


    public Button WeaponChooseAttackOneBtn;
    public Button WeaponChooseAttackTwoBtn;
    public Button WeaponChooseAttackThreeBtn;
    public Button WeaponChooseAttackFourBtn;
    public Button WeaponChooseAttackFiveBtn;
    public Button WeaponChooseAttackSixBtn;
    public Button WeaponChooseAttackSevenBtn;
    public Button WeaponChooseAttackEightBtn;

    public Button UseShield;
    public Button DontUseShield;

    public Button[] playerInrangeBtns;
    public Button playerInrangeGodEyeBtn;

    public Button[] checkWeaponsButton;
    public Button[] NoWeaponsPanelCloseButton;
    public Button[] CharacterWeaponHolderCloseButton;
    public Button[] weaponInfoPanelCloseButton;

    public GameObject[] characterPanelsHolder;
    //  public TextMeshProUGUI[] playerInrangeTxts;


    public bool[] hasCloseNoWeaponsPanelClicked;
    public bool[] hasCharacterWeaponHolderCloseClicked;

    

    public Animator[] NoWeaponsPanelAnimator;
    public Animator[] characterWeaponHolderHasWeaponAnimator;
    public Animator[] weaponInfoPanelAnimator;
    public Animator[] moneyUIAnimation;
    public Animator[] livesUIAnimation;


    public Button[] checkWeaponInfoInformationButtons;
    public Button[] checkWeaponInfoInformationButtonsOne;
    public Button[] checkWeaponInfoInformationButtonsTwo;
    public Button[] checkWeaponInfoInformationButtonsThree;
    public Button[] checkWeaponInfoInformationButtonsFour;
    public Button[] checkWeaponInfoInformationButtonsFive;

    public TextMeshProUGUI[] checkWeaponsPanelTexts;
    public TextMeshProUGUI[] checkWeaponsPanelTextsOne;
    public TextMeshProUGUI[] checkWeaponsPanelTextsTwo;
    public TextMeshProUGUI[] checkWeaponsPanelTextsThree;
    public TextMeshProUGUI[] checkWeaponsPanelTextsFour;
    public TextMeshProUGUI[] checkWeaponsPanelTextsFive;


    public TextMeshProUGUI[] weaponInfoPanelTexts;
    public TextMeshProUGUI[] weaponInfoPanelTextsOne;
    public TextMeshProUGUI[] weaponInfoPanelTextsTwo;
    public TextMeshProUGUI[] weaponInfoPanelTextsThree;
    public TextMeshProUGUI[] weaponInfoPanelTextsFour;
    public TextMeshProUGUI[] weaponInfoPanelTextsFive;


    public TextMeshProUGUI[] characterWeaponHolderWeaponNames;
    public TextMeshProUGUI[] characterWeaponHolderWeaponNamesOne;
    public TextMeshProUGUI[] characterWeaponHolderWeaponNamesTwo;
    public TextMeshProUGUI[] characterWeaponHolderWeaponNamesThree;
    public TextMeshProUGUI[] characterWeaponHolderWeaponNamesFour;
    public TextMeshProUGUI[] characterWeaponHolderWeaponNamesFive;

    public GameObject[] WeaponPanels;
    public GameObject[] WeaponPanelsOne;
    public GameObject[] WeaponPanelsTwo;
    public GameObject[] WeaponPanelsThree;
    public GameObject[] WeaponPanelsFour;
    public GameObject[] WeaponPanelsFive;


    public TextMeshProUGUI CharacterMoneyInShop;

    

 





    void Awake()
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];
       

        instance = this;
        rollDiceButton.onClick.AddListener(RollDiceButtonClicked);
        endTurn.onClick.AddListener(EndTurnClicked);
        buyButton.onClick.AddListener(BuyButtonClicked);
        attackButton.onClick.AddListener(AttackButtonClicked);
        BackAttackPanelButton.onClick.AddListener(BackAttackPanelButtonClicked);
        BackToAttackButtonSelect.onClick.AddListener(BackToAttackButtonSelectClicked);
        CloseShopButton.onClick.AddListener(CloseShopButtonClicked);
        RobBankYes.onClick.AddListener(RobBankYesClicked);
        RobBankNo.onClick.AddListener(RobBankNoClicked);
        RobBankDiceRolled.onClick.AddListener(RobBankDiceRolledClicked);

        UseShield.onClick.AddListener(useShieldClicked);
        DontUseShield.onClick.AddListener(dontUseShieldClicked);

        weaponButtonOne.onClick.AddListener(() => BuyWeapon(0));
        weaponButtonTwo.onClick.AddListener(() => BuyWeapon(1));
        weaponButtonThree.onClick.AddListener(() => BuyWeapon(2));
        weaponButtonFour.onClick.AddListener(() => BuyWeapon(3));
        weaponButtonFive.onClick.AddListener(() => BuyWeapon(4));
        weaponButtonSix.onClick.AddListener(() => BuyWeapon(5));
        weaponButtonSeven.onClick.AddListener(() => BuyWeapon(6));
        weaponButtonEight.onClick.AddListener(() => BuyWeapon(7));
        weaponButtonNine.onClick.AddListener(() => BuyWeapon(8));


       


        WeaponChooseAttackOneBtn.onClick.AddListener(OnWeaponButtonClickedOne);
        WeaponChooseAttackTwoBtn.onClick.AddListener(OnWeaponButtonClickedTwo);
        WeaponChooseAttackThreeBtn.onClick.AddListener(OnWeaponButtonClickedThree);
        WeaponChooseAttackFourBtn.onClick.AddListener(OnWeaponButtonClickedFour);
        WeaponChooseAttackFiveBtn.onClick.AddListener(OnWeaponButtonClickedFive);
        WeaponChooseAttackSixBtn.onClick.AddListener(OnWeaponButtonClickedSix);
        WeaponChooseAttackSevenBtn.onClick.AddListener(OnWeaponButtonClickedSeven);
        WeaponChooseAttackEightBtn.onClick.AddListener(OnWeaponButtonClickedEight);

        checkWeaponsButton[0].onClick.AddListener(checkWeaponsButtonVoid);
        checkWeaponsButton[1].onClick.AddListener(checkWeaponsVoidOne);
        checkWeaponsButton[2].onClick.AddListener(checkWeaponsVoidTwo);
        checkWeaponsButton[3].onClick.AddListener(checkWeaponsVoidThree);
        checkWeaponsButton[4].onClick.AddListener(checkWeaponsVoidFour);
        checkWeaponsButton[5].onClick.AddListener(checkWeaponsVoidFive);

        


        NoWeaponsPanelCloseButton[0].onClick.AddListener(NoWeaponsPanelCloseButtonVoid);
        NoWeaponsPanelCloseButton[1].onClick.AddListener(NoWeaponsPanelCloseButtonVoidOne);
        NoWeaponsPanelCloseButton[2].onClick.AddListener(NoWeaponsPanelCloseButtonVoidTwo);
        NoWeaponsPanelCloseButton[3].onClick.AddListener(NoWeaponsPanelCloseButtonVoidThree);
        NoWeaponsPanelCloseButton[4].onClick.AddListener(NoWeaponsPanelCloseButtonVoidFour);
        NoWeaponsPanelCloseButton[5].onClick.AddListener(NoWeaponsPanelCloseButtonVoidFive);

        CharacterWeaponHolderCloseButton[0].onClick.AddListener(characterWeaponHolderCloseButtonVoid);
        CharacterWeaponHolderCloseButton[1].onClick.AddListener(characterWeaponHolderCloseButtonVoidOne);
        CharacterWeaponHolderCloseButton[2].onClick.AddListener(characterWeaponHolderCloseButtonVoidTwo);
        CharacterWeaponHolderCloseButton[3].onClick.AddListener(characterWeaponHolderCloseButtonVoidThree);
        CharacterWeaponHolderCloseButton[4].onClick.AddListener(characterWeaponHolderCloseButtonVoidFour);
        CharacterWeaponHolderCloseButton[5].onClick.AddListener(characterWeaponHolderCloseButtonVoidFive);

        weaponInfoPanelCloseButton[0].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoid);
        weaponInfoPanelCloseButton[1].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoidOne);
        weaponInfoPanelCloseButton[2].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoidTwo);
        weaponInfoPanelCloseButton[3].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoidThree);
        weaponInfoPanelCloseButton[4].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoidFour);
        weaponInfoPanelCloseButton[5].onClick.AddListener(weaponInfoPanelCloseButtonClickedVoidFive);

        checkWeaponInfoInformationButtons[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(0));
        checkWeaponInfoInformationButtons[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(1));
        checkWeaponInfoInformationButtons[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(2));
        checkWeaponInfoInformationButtons[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(3));
        checkWeaponInfoInformationButtons[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(4));
        checkWeaponInfoInformationButtons[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(5));
        checkWeaponInfoInformationButtons[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoid(6));


        checkWeaponInfoInformationButtonsOne[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(0));
        checkWeaponInfoInformationButtonsOne[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(1));
        checkWeaponInfoInformationButtonsOne[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(2));
        checkWeaponInfoInformationButtonsOne[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(3));
        checkWeaponInfoInformationButtonsOne[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(4));
        checkWeaponInfoInformationButtonsOne[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(5));
        checkWeaponInfoInformationButtonsOne[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidOne(6));



        checkWeaponInfoInformationButtonsTwo[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(0));
        checkWeaponInfoInformationButtonsTwo[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(1));
        checkWeaponInfoInformationButtonsTwo[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(2));
        checkWeaponInfoInformationButtonsTwo[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(3));
        checkWeaponInfoInformationButtonsTwo[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(4));
        checkWeaponInfoInformationButtonsTwo[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(5));
        checkWeaponInfoInformationButtonsTwo[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidTwo(6));



        checkWeaponInfoInformationButtonsThree[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(0));
        checkWeaponInfoInformationButtonsThree[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(1));
        checkWeaponInfoInformationButtonsThree[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(2));
        checkWeaponInfoInformationButtonsThree[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(3));
        checkWeaponInfoInformationButtonsThree[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(4));
        checkWeaponInfoInformationButtonsThree[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(5));
        checkWeaponInfoInformationButtonsThree[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidThree(6));




        checkWeaponInfoInformationButtonsFour[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(0));
        checkWeaponInfoInformationButtonsFour[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(1));
        checkWeaponInfoInformationButtonsFour[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(2));
        checkWeaponInfoInformationButtonsFour[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(3));
        checkWeaponInfoInformationButtonsFour[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(4));
        checkWeaponInfoInformationButtonsFour[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(5));
        checkWeaponInfoInformationButtonsFour[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFour(6));



        checkWeaponInfoInformationButtonsFive[0].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(0));
        checkWeaponInfoInformationButtonsFive[1].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(1));
        checkWeaponInfoInformationButtonsFive[2].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(2));
        checkWeaponInfoInformationButtonsFive[3].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(3));
        checkWeaponInfoInformationButtonsFive[4].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(4));
        checkWeaponInfoInformationButtonsFive[5].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(5));
        checkWeaponInfoInformationButtonsFive[6].onClick.AddListener(() => weaponInfoInformationButtonsClickedVoidFive(6));








    }


    /*  void playerRangeinButttonsClicked()
      {
          StartCoroutine(AttackMechanics());
      }
    */

    public void AddPlayerObject(GameObject playerObject, GameObject playerObjectChild, Animator playerObjectAnimator, GameObject playerObjectSniper, GameObject playerObjectAk47, GameObject playerObjectPistol, GameObject playerObjectGrenade, GameObject playerObjectM15, GameObject playerObjectShotgun, GameObject playerObjectRPG, GameObject playerObjectRPGHead)// GameObject playerObjectOne)
    {
        Entity newPlayer = playerList[0 % playerList.Count];
        //  Entity newPlayerOne = playerList[1];
        newPlayer.playerObject = playerObject;
        newPlayer.playerAnimator = playerObjectAnimator;
        newPlayer.characterObject = playerObjectChild;
        newPlayer.SniperRifle = playerObjectSniper;
        newPlayer.Ak47 = playerObjectAk47;
        newPlayer.Pistol = playerObjectPistol;
        newPlayer.Grenade = playerObjectGrenade;
        newPlayer.M15 = playerObjectM15;
        newPlayer.Shotgun = playerObjectShotgun;
        newPlayer.RocketLauncher = playerObjectRPG;
        newPlayer.RocketLauncherHead = playerObjectRPGHead;


        //  newPlayerOne.playerObject = playerObjectOne;
        playerList.Add(newPlayer);
    }

    public void AddPlayerObjectOne(GameObject playerObject, GameObject playerObjectChild, Animator playerObjectAnimator, GameObject playerObjectSniper, GameObject playerObjectAk47, GameObject playerObjectPistol, GameObject playerObjectGrenade, GameObject playerObjectM15, GameObject playerObjectShotgun, GameObject playerObjectRPG, GameObject playerObjectRPGHead)// GameObject playerObjectOne)
    {
        Entity newPlayer = playerList[1 % playerList.Count];
        //  Entity newPlayerOne = playerList[1];
        newPlayer.playerObject = playerObject;
        newPlayer.playerAnimator = playerObjectAnimator;
        newPlayer.characterObject = playerObjectChild;
        newPlayer.SniperRifle = playerObjectSniper;
        newPlayer.Ak47 = playerObjectAk47;
        newPlayer.Pistol = playerObjectPistol;
        newPlayer.Grenade = playerObjectGrenade;
        newPlayer.M15 = playerObjectM15;
        newPlayer.Shotgun = playerObjectShotgun;
        newPlayer.RocketLauncher = playerObjectRPG;
        newPlayer.RocketLauncherHead = playerObjectRPGHead;
        //  newPlayerOne.playerObject = playerObjectOne;
        playerList.Add(newPlayer);
    }



    /*

    // Example method where you spawn a new player object
    public void SpawnPlayerObject()
    {
        // Spawn your player object here
        GameObject newPlayerObject = GameObject.Find("stone");

        if (IsHost)
        {
            GameObject newPlayerChild = newPlayerObject.transform.Find("character").gameObject;
            GameObject newPlayerSniper = newPlayerChild.transform.Find("Sniper_rifle_KSR-29").gameObject;
            GameObject newPlayerAK47 = newPlayerChild.transform.Find("AK47").gameObject;
            GameObject newPlayerPistol = newPlayerChild.transform.Find("Beretta Pistol").gameObject;
            GameObject newPlayerGrenade = newPlayerChild.transform.Find("GrenadeParent").gameObject;
            GameObject newPlayerM15 = newPlayerChild.transform.Find("M15").gameObject;
            GameObject newPlayerShotgun = newPlayerChild.transform.Find("Shotgun").gameObject;
            GameObject newPlayerRPG = newPlayerChild.transform.Find("RocketLauncher").gameObject;
            GameObject newPlayerRPGHead = newPlayerRPG.transform.Find("rpg 7 bullet").gameObject;

            Animator newPlayerAnimation = newPlayerChild.GetComponent<Animator>();
            //  GameObject newPlayerObjectOne = GameObject.Find("stone(1)(Clone)");

            GameManager.instance.AddPlayerObject(newPlayerObject, newPlayerChild, newPlayerAnimation, newPlayerSniper, newPlayerAK47, newPlayerPistol, newPlayerGrenade, newPlayerM15, newPlayerShotgun, newPlayerRPG, newPlayerRPGHead);//, newPlayerObjectOne);
        }



    }

    public void SpawnPlayerObjectOne()
    {
        // Spawn your player object here
        GameObject newPlayerObject = GameObject.Find("Stone (1)");

        if (IsClient)
        {
            GameObject newPlayerChild = newPlayerObject.transform.Find("characterOne").gameObject;
            GameObject newPlayerSniper = newPlayerChild.transform.Find("Sniper_rifle_KSR-29 (1)").gameObject;
            GameObject newPlayerAK47 = newPlayerChild.transform.Find("AK47 (1)").gameObject;
            GameObject newPlayerPistol = newPlayerChild.transform.Find("Beretta Pistol (1)").gameObject;
            GameObject newPlayerGrenade = newPlayerChild.transform.Find("GrenadeParent (1)").gameObject;
            GameObject newPlayerM15 = newPlayerChild.transform.Find("M15 (1)").gameObject;
            GameObject newPlayerShotgun = newPlayerChild.transform.Find("Shotgun (1)").gameObject;
            GameObject newPlayerRPG = newPlayerChild.transform.Find("RocketLauncher (1)").gameObject;
            GameObject newPlayerRPGHead = newPlayerRPG.transform.Find("rpg 7 bullet (1)").gameObject;
            Animator newPlayerAnimation = newPlayerChild.GetComponent<Animator>();
            //  GameObject newPlayerObjectOne = GameObject.Find("stone(1)(Clone)");

            GameManager.instance.AddPlayerObjectOne(newPlayerObject, newPlayerChild, newPlayerAnimation, newPlayerSniper, newPlayerAK47, newPlayerPistol, newPlayerGrenade, newPlayerM15, newPlayerShotgun, newPlayerRPG, newPlayerRPGHead);//, newPlayerObjectOne);
        }





    }
    */


   

   
    
    public void checkWeaponsButtonVoid()
    {
        StartCoroutine(checkWeaponsButtonEnumerator());
    }

    public void checkWeaponsVoidOne()
    {
        StartCoroutine(checkWeaponsVoidOneEnumerator());
    }

    public void checkWeaponsVoidTwo()
    {
        StartCoroutine(checkWeaponsVoidTwoEnumerator());
    }

    public void checkWeaponsVoidThree()
    {
        StartCoroutine(checkWeaponsVoidThreeEnumerator());
    }

    public void checkWeaponsVoidFour()
    {
        StartCoroutine(checkWeaponsVoidFourEnumerator());
    }

    public void checkWeaponsVoidFive()
    {
        StartCoroutine(checkWeaponsVoidFiveEnumerator());
    }


    public void NoWeaponsPanelCloseButtonVoid()
    {
        hasCloseNoWeaponsPanelClicked[0] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonEnumerator());
    }

    public void NoWeaponsPanelCloseButtonVoidOne()
    {
        hasCloseNoWeaponsPanelClicked[1] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonOneEnumerator());  
    }

    public void NoWeaponsPanelCloseButtonVoidTwo()
    {
        hasCloseNoWeaponsPanelClicked[2] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonTwoEnumerator());
    }


    public void NoWeaponsPanelCloseButtonVoidThree()
    {
        hasCloseNoWeaponsPanelClicked[3] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonThreeEnumerator());
    }

    public void NoWeaponsPanelCloseButtonVoidFour()
    {
        hasCloseNoWeaponsPanelClicked[4] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonFourEnumerator());
    }

    public void NoWeaponsPanelCloseButtonVoidFive()
    {
        hasCloseNoWeaponsPanelClicked[5] = true;
        StartCoroutine(NoWeaponsPanelCloseButtonFiveEnumerator());
    }


    public void characterWeaponHolderCloseButtonVoid()
    {
        hasCharacterWeaponHolderCloseClicked[0] = true;
        StartCoroutine(characterWeaponHolderCloseButtonEnumerator());
    }

    public void characterWeaponHolderCloseButtonVoidOne()
    {
        hasCharacterWeaponHolderCloseClicked[1] = true;
        StartCoroutine(characterWeaponHolderCloseButtonEnumeratorOne());

    }

    public void characterWeaponHolderCloseButtonVoidTwo()
    {
        hasCharacterWeaponHolderCloseClicked[2] = true;
        StartCoroutine(CharacterWeaponHolderCloseButtonEnumeratorTwo());
    }

    public void characterWeaponHolderCloseButtonVoidThree()
    {
        hasCharacterWeaponHolderCloseClicked[3] = true;
        StartCoroutine(CharacterWeaponHolderCloseButtonEnumeratorThree());
    }

    public void characterWeaponHolderCloseButtonVoidFour()
    {
        hasCharacterWeaponHolderCloseClicked[4] = true;
        StartCoroutine(CharacterWeaponHolderCloseButtonEnumeratorFour());
    }

    public void characterWeaponHolderCloseButtonVoidFive()
    {
        hasCharacterWeaponHolderCloseClicked[5] = true;
        StartCoroutine(CharacterWeaponHolderCloseButtonEnumeratorFive());
    }

    public void weaponInfoInformationButtonsClickedVoid(int weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumerator(weaponInfoButtonNumber));
    }


    public void weaponInfoInformationButtonsClickedVoidOne(int  weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumeratorOne(weaponInfoButtonNumber));
    }

    public void weaponInfoInformationButtonsClickedVoidTwo(int weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumeratorTwo(weaponInfoButtonNumber));
    }

    public void weaponInfoInformationButtonsClickedVoidThree(int weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumeratorThree(weaponInfoButtonNumber));
    }

    public void weaponInfoInformationButtonsClickedVoidFour(int weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumeratorFour(weaponInfoButtonNumber));
    }

    public void weaponInfoInformationButtonsClickedVoidFive(int weaponInfoButtonNumber)
    {
        StartCoroutine(weaponInfoInformationButtonsClickedVoidEnumeratorFive(weaponInfoButtonNumber));
    }



    public void weaponInfoPanelCloseButtonClickedVoid()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumerator());
    }

    public void weaponInfoPanelCloseButtonClickedVoidOne()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumeratorOne());
    }

    public void weaponInfoPanelCloseButtonClickedVoidTwo()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumeratorTwo());
    }

    public void weaponInfoPanelCloseButtonClickedVoidThree()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumeratorThree());
    }

    public void weaponInfoPanelCloseButtonClickedVoidFour()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumeratorFour());
    }

    public void weaponInfoPanelCloseButtonClickedVoidFive()
    {
        StartCoroutine(weaponInfoPanelCloseButtonClickedVoidEnumeratorFive());
    }


    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumeratorFive(int weaponInfoButtonNumber)
    {


        if (weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[0].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[1].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);




        }
        else if (weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[2].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);


        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[3].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[4].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[5].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);

        }
        else if (weaponInfoButtonNumber == 6)
        {
            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFive[0].text = playerList[5 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTextsFive[2].text = "" + playerList[5 % playerList.Count].WeaponInfo[6].bullets;

            }



            weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[5].gameObject.SetActive(true);



        }


    }

    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumeratorFour(int weaponInfoButtonNumber)
    {


        if (weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[0].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[1].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);




        }
        else if (weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[2].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[3].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[4].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[5].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);

        }
        else if (weaponInfoButtonNumber == 6)
        {
            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsFour[0].text = playerList[4 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTextsFour[2].text = "" + playerList[4 % playerList.Count].WeaponInfo[6].bullets;

            }



            weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[4].gameObject.SetActive(true);




        }


    }

    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumeratorThree(int weaponInfoButtonNumber)
    {


        if (weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[0].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[1].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);




        }
        else if (weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[2].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[3].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);




        }
        else if (weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[4].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);




        }
        else if (weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[5].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 6)
        {
            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsThree[0].text = playerList[3 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTextsThree[2].text = "" + playerList[3 % playerList.Count].WeaponInfo[6].bullets;

            }



            weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[3].gameObject.SetActive(true);




        }


    }

    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumeratorTwo(int weaponInfoButtonNumber)
    {


        if (weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[0].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[1].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[2].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[3].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[4].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[5].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 6)
        {
            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsTwo[0].text = playerList[2 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTextsTwo[2].text = "" + playerList[2 % playerList.Count].WeaponInfo[6].bullets;

            }



            weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[2].gameObject.SetActive(true);



        }


    }


    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumeratorOne(int weaponInfoButtonNumber)
    {


        if (weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[0].bullets;

            }



            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);



        }
        else if (weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);





            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[1].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[2].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[3].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[4].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[5].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 6)
        {
            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

            checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTextsOne[0].text = playerList[1 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTextsOne[2].text = "" + playerList[1 % playerList.Count].WeaponInfo[6].bullets;

            }


            weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[1].CrossFade("WeaponPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[1].gameObject.SetActive(true);
        }


    }


    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumeratorFive()
    {
        weaponInfoPanelCloseButton[5].gameObject.SetActive(false);



        weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[5].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[5].gameObject.SetActive(true);


        weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[5].SetBool("IsWeaponInfoClicked", false);
    }

    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumeratorFour()
    {
        weaponInfoPanelCloseButton[4].gameObject.SetActive(false);



        weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[4].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[4].gameObject.SetActive(true);


        weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[4].SetBool("IsWeaponInfoClicked", false);
    }


    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumeratorThree()
    {
        weaponInfoPanelCloseButton[3].gameObject.SetActive(false);



        weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[3].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[3].gameObject.SetActive(true);


        weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[3].SetBool("IsWeaponInfoClicked", false);
    }

    public IEnumerator CharacterWeaponHolderCloseButtonEnumeratorFive()
    {

        CharacterWeaponHolderCloseButton[5].gameObject.SetActive(false);

        checkWeaponInfoInformationButtonsFive[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFive[6].gameObject.SetActive(false);





        characterWeaponHolderHasWeaponAnimator[5].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[5].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[5].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[5].SetBool("IsCheckWeaponsClicked", false);
    }

    public IEnumerator CharacterWeaponHolderCloseButtonEnumeratorFour()
    {

        CharacterWeaponHolderCloseButton[4].gameObject.SetActive(false);

        checkWeaponInfoInformationButtonsFour[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsFour[6].gameObject.SetActive(false);





        characterWeaponHolderHasWeaponAnimator[4].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[4].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[4].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[4].SetBool("IsCheckWeaponsClicked", false);
    }
    public IEnumerator CharacterWeaponHolderCloseButtonEnumeratorThree()
    {

        CharacterWeaponHolderCloseButton[3].gameObject.SetActive(false);

        checkWeaponInfoInformationButtonsThree[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsThree[6].gameObject.SetActive(false);





        characterWeaponHolderHasWeaponAnimator[3].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[3].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[3].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[3].SetBool("IsCheckWeaponsClicked", false);
    }

    public IEnumerator NoWeaponsPanelCloseButtonFiveEnumerator()
    {
        NoWeaponsPanelCloseButton[5].gameObject.SetActive(false);



        NoWeaponsPanelAnimator[5].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[5].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        NoWeaponsPanelAnimator[5].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[5].SetBool("IsCheckWeaponsClicked", false);
    }
    public IEnumerator NoWeaponsPanelCloseButtonFourEnumerator()
    {
        NoWeaponsPanelCloseButton[4].gameObject.SetActive(false);



        NoWeaponsPanelAnimator[4].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[4].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }
        NoWeaponsPanelAnimator[4].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[4].SetBool("IsCheckWeaponsClicked", false);
    }
    public IEnumerator NoWeaponsPanelCloseButtonThreeEnumerator()
    {
        NoWeaponsPanelCloseButton[3].gameObject.SetActive(false);



        NoWeaponsPanelAnimator[3].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[3].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        NoWeaponsPanelAnimator[3].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[3].SetBool("IsCheckWeaponsClicked", false);
    }

    public IEnumerator checkWeaponsVoidFiveEnumerator()
    {
        if (playerList[5 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);



            NoWeaponsPanelAnimator[5].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[5].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[5].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[5].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[5 % playerList.Count].WeaponInfo.Count; i++)
            {


                WeaponPanelsFive[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNamesFive[i].text = playerList[5 % playerList.Count].WeaponInfo[i].name;
               



                checkWeaponInfoInformationButtonsFive[i].gameObject.SetActive(true);

            }


            for (int i = playerList[5 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {


                WeaponPanelsFive[i].gameObject.SetActive(false);


                checkWeaponInfoInformationButtonsFive[i].gameObject.SetActive(false);
               

            }


            characterWeaponHolderHasWeaponAnimator[5].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[5].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[5].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[5].SetBool("IsCheckWeaponsClicked", false);


        }
    }

    public IEnumerator checkWeaponsVoidFourEnumerator()
    {
        if (playerList[4 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);



            NoWeaponsPanelAnimator[4].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[4].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[4].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[4].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[4 % playerList.Count].WeaponInfo.Count; i++)
            {


                WeaponPanelsFour[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNamesFour[i].text = playerList[4 % playerList.Count].WeaponInfo[i].name;
              



                checkWeaponInfoInformationButtonsFour[i].gameObject.SetActive(true);


            }


            for (int i = playerList[4 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {


                WeaponPanelsFour[i].gameObject.SetActive(false);


                checkWeaponInfoInformationButtonsFour[i].gameObject.SetActive(false);
              

            }


            characterWeaponHolderHasWeaponAnimator[4].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[4].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[4].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[4].SetBool("IsCheckWeaponsClicked", false);


        }
    }
    public IEnumerator checkWeaponsVoidThreeEnumerator()
    {
        if (playerList[3 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);



            NoWeaponsPanelAnimator[3].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[3].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[3].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[3].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[3 % playerList.Count].WeaponInfo.Count; i++)
            {


                WeaponPanelsThree[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNamesThree[i].text = playerList[3 % playerList.Count].WeaponInfo[i].name;
                



                checkWeaponInfoInformationButtonsThree[i].gameObject.SetActive(true);

            }


            for (int i = playerList[3 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {


                WeaponPanelsThree[i].gameObject.SetActive(false);


                checkWeaponInfoInformationButtonsThree[i].gameObject.SetActive(false);
              


            }


            characterWeaponHolderHasWeaponAnimator[3].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[3].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[3].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[3].SetBool("IsCheckWeaponsClicked", false);


        }
    }
    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumeratorTwo()
    {
        weaponInfoPanelCloseButton[2].gameObject.SetActive(false);



        weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[2].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[2].gameObject.SetActive(true);


        weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[2].SetBool("IsWeaponInfoClicked", false);
    }

    public IEnumerator CharacterWeaponHolderCloseButtonEnumeratorTwo()
    {

        CharacterWeaponHolderCloseButton[2].gameObject.SetActive(false);

        checkWeaponInfoInformationButtonsTwo[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsTwo[6].gameObject.SetActive(false);





        characterWeaponHolderHasWeaponAnimator[2].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[2].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[2].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[2].SetBool("IsCheckWeaponsClicked", false);
    }


    public IEnumerator NoWeaponsPanelCloseButtonTwoEnumerator()
    {
        NoWeaponsPanelCloseButton[2].gameObject.SetActive(false);



        NoWeaponsPanelAnimator[2].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[2].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        NoWeaponsPanelAnimator[2].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[2].SetBool("IsCheckWeaponsClicked", false);
    }
    
    public IEnumerator checkWeaponsVoidTwoEnumerator()
    {
        if (playerList[2 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);



            NoWeaponsPanelAnimator[2].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[2].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[2].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[2].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[2 % playerList.Count].WeaponInfo.Count; i++)
            {


                WeaponPanelsTwo[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNamesTwo[i].text = playerList[2 % playerList.Count].WeaponInfo[i].name;
              



                checkWeaponInfoInformationButtonsTwo[i].gameObject.SetActive(true);

            }


            for (int i = playerList[2 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {


                WeaponPanelsTwo[i].gameObject.SetActive(false);


                checkWeaponInfoInformationButtonsTwo[i].gameObject.SetActive(false);
              


            }


            characterWeaponHolderHasWeaponAnimator[2].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[2].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[2].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[2].SetBool("IsCheckWeaponsClicked", false);


        }
    }

    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumeratorOne()
    {
        weaponInfoPanelCloseButton[1].gameObject.SetActive(false);



        weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[1].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[1].gameObject.SetActive(true);


        weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[1].SetBool("IsWeaponInfoClicked", false);
    }
    public IEnumerator characterWeaponHolderCloseButtonEnumeratorOne()
    {

        CharacterWeaponHolderCloseButton[1].gameObject.SetActive(false);

        checkWeaponInfoInformationButtonsOne[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtonsOne[6].gameObject.SetActive(false);





        characterWeaponHolderHasWeaponAnimator[1].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[1].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[1].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[1].SetBool("IsCheckWeaponsClicked", false);
    }
   
    public IEnumerator NoWeaponsPanelCloseButtonOneEnumerator()
    {
        NoWeaponsPanelCloseButton[1].gameObject.SetActive(false);



        NoWeaponsPanelAnimator[1].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[1].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        NoWeaponsPanelAnimator[1].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[1].SetBool("IsCheckWeaponsClicked", false);
    }

    public IEnumerator checkWeaponsVoidOneEnumerator()
    {
        if (playerList[1 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);


            NoWeaponsPanelAnimator[1].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[1].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[1].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[1].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[1 % playerList.Count].WeaponInfo.Count; i++)
            {


                WeaponPanelsOne[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNamesOne[i].text = playerList[1 % playerList.Count].WeaponInfo[i].name;
               



                checkWeaponInfoInformationButtonsOne[i].gameObject.SetActive(true);

            }


            for (int i = playerList[1 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {


                WeaponPanelsOne[i].gameObject.SetActive(false);


                checkWeaponInfoInformationButtonsOne[i].gameObject.SetActive(false);
              


            }


            characterWeaponHolderHasWeaponAnimator[1].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[1].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[1].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[1].SetBool("IsCheckWeaponsClicked", false);


        }
    }



    public IEnumerator weaponInfoPanelCloseButtonClickedVoidEnumerator()
    {
        weaponInfoPanelCloseButton[0].gameObject.SetActive(false);

      

        weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClickedClosing", true);
        weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelEnding", 0.01f);

        yield return new WaitForSeconds(1f);

        checkWeaponInfoInformationButtons[0].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[1].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[2].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[3].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[4].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[5].gameObject.SetActive(true);
        checkWeaponInfoInformationButtons[6].gameObject.SetActive(true);

        CharacterWeaponHolderCloseButton[0].gameObject.SetActive(true);


        weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClickedClosing", false);
        weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", false);


    }

    public IEnumerator weaponInfoInformationButtonsClickedVoidEnumerator(int weaponInfoButtonNumber)
    {
        

        if(weaponInfoButtonNumber == 0)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[0].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[0].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[0].bullets;

            }
            
            

            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
           


        }
        else if(weaponInfoButtonNumber == 1)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);





            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[1].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[1].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[1].bullets;

            }


            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }
        else if(weaponInfoButtonNumber == 2)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[2].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[2].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[2].bullets;

            }


            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }
        else if (weaponInfoButtonNumber == 3)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[3].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[3].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[3].bullets;

            }



            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }
        else if(weaponInfoButtonNumber == 4)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[4].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[4].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[4].bullets;

            }



            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }
        else if(weaponInfoButtonNumber == 5)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);



            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[5].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[5].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[5].bullets;

            }



            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }
        else if(weaponInfoButtonNumber== 6)
        {
            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

            checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
            checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);


            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {


                weaponInfoPanelTexts[0].text = playerList[0 % playerList.Count].WeaponInfo[6].range + " Squares";
                weaponInfoPanelTexts[1].text = "" + playerList[0 % playerList.Count].WeaponInfo[6].damage;
                weaponInfoPanelTexts[2].text = "" + playerList[0 % playerList.Count].WeaponInfo[6].bullets;

            }



            weaponInfoPanelAnimator[0].SetBool("IsWeaponInfoClicked", true);
            weaponInfoPanelAnimator[0].CrossFade("WeaponInfoPanelOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            weaponInfoPanelCloseButton[0].gameObject.SetActive(true);
        }

       
    }

    public IEnumerator checkWeaponsButtonEnumerator()
    {

        if (playerList[0 % playerList.Count].WeaponInfo.Count == 0)
        {
            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);



            NoWeaponsPanelAnimator[0].SetBool("IsCheckWeaponsClicked", true);
            NoWeaponsPanelAnimator[0].CrossFade("NoWeaponsPanelOpening", 0.1f);

            yield return new WaitForSeconds(1f);

            NoWeaponsPanelCloseButton[0].gameObject.SetActive(true);

            NoWeaponsPanelAnimator[0].SetBool("IsCheckWeaponsClicked", false);
        }
        else
        {

            checkWeaponsButton[0].gameObject.SetActive(false);
            checkWeaponsButton[1].gameObject.SetActive(false);
            checkWeaponsButton[2].gameObject.SetActive(false);
            checkWeaponsButton[3].gameObject.SetActive(false);
            checkWeaponsButton[4].gameObject.SetActive(false);
            checkWeaponsButton[5].gameObject.SetActive(false);

            for (int i = 0; i < playerList[0 % playerList.Count].WeaponInfo.Count; i++)
            {
                   

                WeaponPanels[i].gameObject.SetActive(true);
                characterWeaponHolderWeaponNames[i].text = playerList[0 % playerList.Count].WeaponInfo[i].name;
              

               

               checkWeaponInfoInformationButtons[i].gameObject.SetActive(true);
               
            }

                
            for (int i = playerList[0 % playerList.Count].WeaponInfo.Count; i < WeaponPanels.Length; i++)
            {
                     

               WeaponPanels[i].gameObject.SetActive(false);

              
               checkWeaponInfoInformationButtons[i].gameObject.SetActive(false);
              


            }


            characterWeaponHolderHasWeaponAnimator[0].SetBool("IsCheckWeaponsClicked", true);
            characterWeaponHolderHasWeaponAnimator[0].CrossFade("CharacterWeaponHolderOpening", 0.01f);

            yield return new WaitForSeconds(1f);

            CharacterWeaponHolderCloseButton[0].gameObject.SetActive(true);

            characterWeaponHolderHasWeaponAnimator[0].SetBool("IsCheckWeaponsClicked", false);


        }

    }

    public IEnumerator characterWeaponHolderCloseButtonEnumerator()
    {

        CharacterWeaponHolderCloseButton[0].gameObject.SetActive(false);

        checkWeaponInfoInformationButtons[0].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[1].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[2].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[3].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[4].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[5].gameObject.SetActive(false);
        checkWeaponInfoInformationButtons[6].gameObject.SetActive(false);



       

        characterWeaponHolderHasWeaponAnimator[0].SetBool("IsCloseCheckWeaponsClicked", true);
        characterWeaponHolderHasWeaponAnimator[0].CrossFade("CharacterWeaponHolderClosing", 0.01f);

        yield return new WaitForSeconds(1f);

        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }

        characterWeaponHolderHasWeaponAnimator[0].SetBool("IsCloseCheckWeaponsClicked", false);
        characterWeaponHolderHasWeaponAnimator[0].SetBool("IsCheckWeaponsClicked", false);
    }
    public IEnumerator NoWeaponsPanelCloseButtonEnumerator()
    {
        NoWeaponsPanelCloseButton[0].gameObject.SetActive(false);

      

        NoWeaponsPanelAnimator[0].SetBool("IsCloseCheckWeaponsClicked", true);
        NoWeaponsPanelAnimator[0].CrossFade("NoWeaponsPanelClosing", 0.1f);

        yield return new WaitForSeconds(1f);


        if (characterPanelsHolder[0].gameObject.activeSelf)
        {
            checkWeaponsButton[0].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[1].gameObject.activeSelf)
        {
            checkWeaponsButton[1].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[2].gameObject.activeSelf)
        {
            checkWeaponsButton[2].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[3].gameObject.activeSelf)
        {
            checkWeaponsButton[3].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[4].gameObject.activeSelf)
        {
            checkWeaponsButton[4].gameObject.SetActive(true);
        }
        if (characterPanelsHolder[5].gameObject.activeSelf)
        {
            checkWeaponsButton[5].gameObject.SetActive(true);
        }


        NoWeaponsPanelAnimator[0].SetBool("IsCloseCheckWeaponsClicked", false);
        NoWeaponsPanelAnimator[0].SetBool("IsCheckWeaponsClicked", false);
    }


    void AttackPlayerForButtonOne(Entity attacker, int targetPlayerIndex)
    {
        bool pistolClicked = attacker.PistolCLicked;

        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation pistol = attacker.WeaponInfo.Find(weapon => weapon.name == "Pistol");

        GameObject Pistol = attacker.Pistol;
        Pistol.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);

        Entity currentPlayer =  playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (pistol != null)
        {
           if(pistolClicked)
           {
              //  targetPlayer.lives = targetPlayer.lives - pistol.damage;
                pistol.bullets = pistol.bullets - 1;
           }
               
            

            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

           
           
            

            if (pistol.bullets == 0)
            {
                attacker.WeaponInfo.Remove(pistol);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            if (targetPlayer.lives <= 0 )
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
        
    }


    void AttackPlayerForButtonTwo(Entity attacker, int targetPlayerIndex)
    {
        bool ak47Clicked = attacker.Ak47Clicked;
        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation ak47 = attacker.WeaponInfo.Find(weapon => weapon.name == "AK47");

        GameObject Ak47 = attacker.Ak47;
        Ak47.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (ak47 != null)
        {
            if(ak47Clicked)
            {
              //  targetPlayer.lives = targetPlayer.lives - ak47.damage;
                ak47.bullets = ak47.bullets - 1;
            }
            
                
            
            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));



            if (ak47.bullets == 0)
            {
                attacker.WeaponInfo.Remove(ak47);
                

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            if (targetPlayer.lives <= 0)
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
    }

    void AttackPlayerForButtonThree(Entity attacker, int targetPlayerIndex)
    {
        bool M15Clicked = attacker.M15Clicked;

        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation m15 = attacker.WeaponInfo.Find(weapon => weapon.name == "M15");

        GameObject M15 = attacker.M15;
        M15.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (m15 != null)
        {
            if(M15Clicked)
            {
               // targetPlayer.lives = targetPlayer.lives - m15.damage;
                m15.bullets = m15.bullets - 1;
            }
            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

          

            if (m15.bullets == 0)
            {
                attacker.WeaponInfo.Remove(m15);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            if (targetPlayer.lives <= 0)
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
    }
    void AttackPlayerForButtonFour(Entity attacker, int targetPlayerIndex)
    {
        bool rocketLancherClicked = attacker.RocketLauncherClicked;
        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation rocketLauncher = attacker.WeaponInfo.Find(weapon => weapon.name == "Rocket Launcher");

        GameObject RocketLauncher = attacker.RocketLauncher;

        if(RocketLauncher != null)
        {
            RocketLauncher.gameObject.SetActive(false);
        }
        

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (rocketLauncher != null)
        {
            if(rocketLancherClicked)
            {
               // targetPlayer.lives = targetPlayer.lives - rocketLauncher.damage;
                rocketLauncher.bullets = rocketLauncher.bullets - 1;
            }
            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

           

            if (rocketLauncher.bullets == 0)
            {
                attacker.WeaponInfo.Remove(rocketLauncher);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            if (targetPlayer.lives <= 0)
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
    }
    void AttackPlayerForButtonFive(Entity attacker, int targetPlayerIndex)
    {
        bool sniperRifleClicked = attacker.SniperClicked;

        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation sniper = attacker.WeaponInfo.Find(weapon => weapon.name == "Sniper");

        
          GameObject sniperRifle = attacker.SniperRifle;
          sniperRifle.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (sniper != null)
        {
            if(sniperRifleClicked)
            {
              //  targetPlayer.lives = targetPlayer.lives - sniper.damage;
                sniper.bullets = sniper.bullets - 1;
            }
            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

           

            if (sniper.bullets <= 0)
            {
                attacker.WeaponInfo.Remove(sniper);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);


                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);

               // AttackTurnNext();

            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            // Check if the target player is defeated
            if (targetPlayer.lives <= 0)
            {
                // Handle player defeat (e.g., remove them from the game)
            }
        }
    }

    void AttackPlayerForButtonSix(Entity attacker, int targetPlayerIndex)
    {
        bool grenadeClicked = attacker.GrenadeClicked;
        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation grenade = attacker.WeaponInfo.Find(weapon => weapon.name == "Grenade");

        GameObject Grenade = attacker.Grenade;
        Grenade.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsHoldingGrenade", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }

        if (grenade != null)
        {
            if(grenadeClicked)
            {
               // targetPlayer.lives = targetPlayer.lives - grenade.damage;
                grenade.bullets = grenade.bullets - 1;
            }


            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

            

            if (grenade.bullets == 0)
            {
                attacker.WeaponInfo.Remove(grenade);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }

            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }

            if (targetPlayer.lives <= 0)
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
    }

    void AttackPlayerForButtonSeven(Entity attacker, int targetPlayerIndex)
    {
        bool shotgunClicked = attacker.ShotgunClicked;
        Entity targetPlayer = playerList[targetPlayerIndex];
        Entity.WeaponInformation shotgun = attacker.WeaponInfo.Find(weapon => weapon.name == "Shotgun");

      

        GameObject Shotgun = attacker.Shotgun;
        Shotgun.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);



        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }



        if (shotgun != null)
        {
            if(shotgunClicked)
            {
               // targetPlayer.lives = targetPlayer.lives - shotgun.damage;
                shotgun.bullets = shotgun.bullets - 1;
            }

          

            StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));

            
         

            if (shotgun.bullets == 0)
            {
                attacker.WeaponInfo.Remove(shotgun);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);




                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                BackAttackPanelButton.gameObject.SetActive(true);
            }
            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }


            if (targetPlayer.lives <= 0)
            {
                //code for what happens when player dies. Don't forget to come back to this! - S.T in the past
            }
        }
    }

    void AttackPlayerForButtonEight(Entity attacker)
    {
        bool GodEyeClicked = attacker.GodEyeClicked;
       
        Entity.WeaponInformation GodEye = attacker.WeaponInfo.Find(weapon => weapon.name == "GodEye");



        GameObject GodEyeObject = attacker.GodEyeswitch;
        GodEyeObject.gameObject.SetActive(false);

        Animator playerAnimator = attacker.playerAnimator;
        playerAnimator.SetBool("IsHoldingGrenade", false);
        playerAnimator.CrossFade("Idle", 0.02f);



        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }



        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }


        }



        if (GodEyeObject != null)
        {
            if (GodEyeClicked)
            {

                for (int i = 0; i < playerList.Count; i++)
                {
                    Entity player = playerList[i % playerList.Count];

                    if (attacker != player)
                    {
                        player.lives = player.lives - GodEye.damage;
                        GodEye.bullets = GodEye.bullets - 1;
                    }
                }
                
            }



           // StartCoroutine(attackAnimationOrder(attacker, targetPlayerIndex));
           StartCoroutine(GodEyeAttackAnimationOrder(currentPlayer));




            if (GodEye.bullets == 0)
            {
                attacker.WeaponInfo.Remove(GodEye);

                playerInrangeBtns[0].gameObject.SetActive(false);
                playerInrangeBtns[1].gameObject.SetActive(false);
                playerInrangeBtns[2].gameObject.SetActive(false);
                playerInrangeBtns[3].gameObject.SetActive(false);
                playerInrangeBtns[4].gameObject.SetActive(false);
                playerInrangeBtns[5].gameObject.SetActive(false);





                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);
                weaponEightRangeText.gameObject.SetActive(false);

                BackAttackPanelButton.gameObject.SetActive(true);
            }
            if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
            {
                playerList[activePlayer % playerList.Count].hasWeapon = false;
            }


            
        }
    }


    public IEnumerator BackToAttackButtonEnumerator()
    {
       

        Entity currentPlayer = playerList[activePlayer % playerList.Count];
      //  Vector3 startPositionForPlayer = currentPlayer.characterObject.transform.localPosition;
        Animator playerAnimator = currentPlayer.playerAnimator;
      
        



        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.SetBool("IsHoldingGrenade", false);
        playerAnimator.CrossFade("Idle", 0.02f);
        playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = false;


       





        bool pistolClickedEnd = currentPlayer.PistolCLicked = false;
        bool ak47ClickedEnd = currentPlayer.Ak47Clicked = false;
        bool m15ClickedEnd = currentPlayer.M15Clicked = false;
        bool RocketLauncherClickedEnd = currentPlayer.RocketLauncherClicked = false;
        bool SniperClickedEnd = currentPlayer.SniperClicked = false;
        bool GrenadeClickedEnd = currentPlayer.GrenadeClicked = false;
        bool ShotgunClickedEnd = currentPlayer.ShotgunClicked = false;
        bool GodEyeClickedEnd = currentPlayer.GodEyeClicked = false;

        GameObject sniperRifle = currentPlayer.SniperRifle;
        sniperRifle.gameObject.SetActive(false);

        GameObject pistol = currentPlayer.Pistol;
        pistol.gameObject.SetActive(false);

        GameObject grenade = currentPlayer.Grenade;
        grenade.gameObject.SetActive(false);

        GameObject ak47 = currentPlayer.Ak47;
        ak47.gameObject.SetActive(false);

        GameObject shotgun = currentPlayer.Shotgun;
        shotgun.gameObject.SetActive(false);

        GameObject m15 = currentPlayer.M15;
        m15.gameObject.SetActive(false);

        GameObject rocketLauncher = currentPlayer.RocketLauncher;



        rocketLauncher.gameObject.SetActive(false);

        GameObject GodEye = currentPlayer.GodEyeswitch;
        GodEye.gameObject.SetActive(false);


       

      
        playerInrangeBtns[0].gameObject.SetActive(false);
        playerInrangeBtns[1].gameObject.SetActive(false);
        playerInrangeBtns[2].gameObject.SetActive(false);
        playerInrangeBtns[3].gameObject.SetActive(false);
        playerInrangeBtns[4].gameObject.SetActive(false);
        playerInrangeBtns[5].gameObject.SetActive(false);
        playerInrangeGodEyeBtn.gameObject.SetActive(false);




        weaponOneRangeText.gameObject.SetActive(false);
        weaponTwoRangeText.gameObject.SetActive(false);
        weaponThreeRangeText.gameObject.SetActive(false);
        weaponFourRangeText.gameObject.SetActive(false);
        weaponFiveRangeText.gameObject.SetActive(false);
        weaponSixRangeText.gameObject.SetActive(false);
        weaponSevenRangeText.gameObject.SetActive(false);
        BackAttackPanelButton.gameObject.SetActive(true);

        yield return new WaitForSeconds(0f);

        if (currentPlayer.position <= 20)
        {
            //
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }
        else if (currentPlayer.position > 20 && currentPlayer.position <= 30)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

           

        }
        else if (currentPlayer.position > 30 && currentPlayer.position <= 49)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

            
        }
        else if (currentPlayer.position > 49 && currentPlayer.position <= 58)
        {
            Quaternion startRotation = currentPlayer.characterObject.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

          
        }
        // yield return new WaitForSeconds(1f);

        if (currentPlayer.characterObject.name == "characterOne")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(0.003999993f, 0.092f, -0.108f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }
        else if (currentPlayer.characterObject.name == "character")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(-0.0169958f, 0.092f, 0.003009602f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }
        else if (currentPlayer.characterObject.name == "characterTwo")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(0f, 0.051f, 0.049f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }
        else if (currentPlayer.characterObject.name == "characterThree")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(-0.156f, 0.048f, -0.02f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }
        else if (currentPlayer.characterObject.name == "characterFour")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(0.05099997f, 0.05199999f, 0.02900004f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }
        else if (currentPlayer.characterObject.name == "characterFive")
        {
            Vector3 startPositionForActivePlayer = currentPlayer.characterObject.transform.localPosition;
            Vector3 endPositionForPlayer = new Vector3(0.08299997f, 0.047f, -0.083f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                currentPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForPlayer, tPosition);
            }
        }




    }
    void BackToAttackButtonSelectClicked()
    {
        
        StartCoroutine(BackToAttackButtonEnumerator());
        AttackTurnNext();

    }

    void OnWeaponButtonClickedOne()
    {
        //  Entity currentPlayer = playerList[activePlayer];

        

        Entity attacker = playerList[activePlayer % playerList.Count];
        Entity.WeaponInformation Pistol = attacker.WeaponInfo.Find(weapon => weapon.name == "Pistol");

        attacker.playerAnimator.applyRootMotion = true;

        bool PistolClicked = attacker.PistolCLicked = true;



        if (Pistol != null)
        {
            // Clear any previous text
            weaponOneRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= Pistol.range)
                {
                 //   weaponOneRangeText.text += player.playerName + "\n";

                    int targetPlayerIndex = i % playerList.Count;
                    playerInrangeBtns[i].gameObject.SetActive(true);

                    
                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonOne(attacker, targetPlayerIndex));
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }
            }
        }


        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        
        

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.188f, -74.264f, 25.617f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(-0.071f, 0.909f, 0.185f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.188f, -74.264f, 25.617f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(-0.023f, 1.135f, 0.197f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.188f, -74.264f, 25.617f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(-0.022f, 1.076f, 0.239f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.243f, -77.755f, 25.556f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(-0.024f, 1.036f, 0.169f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.188f, -74.264f, 25.617f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(-0.032f, 1.036f, 0.191f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
            Quaternion endRotationForPistol = Quaternion.Euler(28.188f, -74.264f, 25.617f);
            float tForPistol = 0;
            while (tForPistol < 1)
            {
                tForPistol += Time.deltaTime * turnSpeed;
                attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

            }

            Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
            Vector3 endPositionForPistol = new Vector3(0.08299997f, 0.047f, 0.001499996f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPosition);
            }
        }


                GameObject pistol = attacker.Pistol;
                pistol.gameObject.SetActive(true);
                ReloadGunsAudio.Play();
        





        weaponOneRangeText.gameObject.SetActive(true);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);

                

                WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);
              

                

                
    }

    void OnWeaponButtonClickedTwo()
    {
        //  Entity currentPlayer = playerList[activePlayer];




        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool Ak47Clicked = attacker.Ak47Clicked = true;

        Entity.WeaponInformation Ak47 = attacker.WeaponInfo.Find(weapon => weapon.name == "AK47");

        attacker.playerAnimator.applyRootMotion = true;





        if (Ak47 != null)
        {
            // Clear any previous text
         //   weaponOneRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= Ak47.range)
                {
                    weaponOneRangeText.text += player.playerName + "\n";

                    int targetPlayerIndex = i % playerList.Count;
                    playerInrangeBtns[i].gameObject.SetActive(true);


                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonTwo(attacker, targetPlayerIndex));
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }
            }
        }
        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);



        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(-0.039f, 0.729f, 0.172f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(-0.026f, 0.776f, 0.298f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(-0.03899998f, 0.729f, 0.1720001f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(0.06211f, 0.7134f, 0.075f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(-0.007f, 0.619f, 0.116f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
            Quaternion endRotationForAK47 = Quaternion.Euler(0f, 0f, 26.589f);
            float tForAK47 = 0;
            while (tForAK47 < 1)
            {
                tForAK47 += Time.deltaTime * turnSpeed;
                attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

            }

            Vector3 startPositionForAK47 = attacker.Ak47.transform.localPosition;
            Vector3 endPositionForAK47 = new Vector3(-0.27f, 0.641f, 0.18f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionForAK47, endPositionForAK47, tPosition);
            }
        }

        GameObject ak47 = attacker.Ak47;
                ak47.gameObject.SetActive(true);
        ReloadGunsAudio.Play();



        weaponTwoRangeText.text = "Players in Range: ";

                weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(true);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(false);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);


                WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);



    }

    void OnWeaponButtonClickedThree()
    {
        //  Entity currentPlayer = playerList[activePlayer];


        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool M15Clicked = attacker.M15Clicked = true;

        Entity.WeaponInformation M15 = attacker.WeaponInfo.Find(weapon => weapon.name == "M15");

        attacker.playerAnimator.applyRootMotion = true;





        if (M15 != null)
        {
            // Clear any previous text
            weaponOneRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {

                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= M15.range)
                {
                   // weaponOneRangeText.text += player.playerName + "\n";

                   
                    
                   
                        int targetPlayerIndex = i % playerList.Count;
                        playerInrangeBtns[i].gameObject.SetActive(true);


                        playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonThree(attacker, targetPlayerIndex));

                        playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                    
                    
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }
            }
        }

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(-0.02654728f, 0.8637401f, 0.1736795f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(-0.082f, 0.839f, 0.265f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(-0.112f, 0.836f, 0.172f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(0.006f, 0.789f, 0.099f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(-0.049f, 0.718f, 0.128f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
            Quaternion endRotationForM15 = Quaternion.Euler(-23.764f, 90f, 0f);
            float tForM15 = 0;
            while (tForM15 < 1)
            {
                tForM15 += Time.deltaTime * turnSpeed;
                attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

            }

            Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
            Vector3 endPositionForM15 = new Vector3(-0.323f, 0.733f, 0.174f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
            }
        }

        GameObject m15 = attacker.M15;
                m15.gameObject.SetActive(true);
        ReloadGunsAudio.Play();


        weaponThreeRangeText.text = "Players in Range: ";

                  weaponOneRangeText.gameObject.SetActive(false);
                  weaponTwoRangeText.gameObject.SetActive(false);
                  weaponThreeRangeText.gameObject.SetActive(true);
                  weaponFourRangeText.gameObject.SetActive(false);
                  weaponFiveRangeText.gameObject.SetActive(false);
                  weaponSixRangeText.gameObject.SetActive(false);
                  weaponSevenRangeText.gameObject.SetActive(false);


                  WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                  WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                  WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);


    }

    void OnWeaponButtonClickedFour()
    {
        //  Entity currentPlayer = playerList[activePlayer];




        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool rocketLauncherBool = attacker.RocketLauncherClicked = true;


        Entity.WeaponInformation RocketLauncher = attacker.WeaponInfo.Find(weapon => weapon.name == "Rocket Launcher");

        attacker.playerAnimator.applyRootMotion = true;





        if (RocketLauncher != null)
        {
            // Clear any previous text
            weaponOneRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= RocketLauncher.range)
                {
                   // weaponOneRangeText.text += player.playerName + "\n";

                    int targetPlayerIndex = i % playerList.Count;
                    playerInrangeBtns[i].gameObject.SetActive(true);


                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonFour(attacker, targetPlayerIndex));
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }
            }
        }

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(-0.2170651f, 0.8697686f, 0.354293f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(0.016f, 1.031646f, 0.485f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(0.01355f, 0.9868f, 0.329f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(0.035f, 1.099f, 0.358f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(-0.007f, 0.824f, 0.298f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
            Quaternion endRotationForRocketLauncher = Quaternion.Euler(0f, 180f, -22.837f);
            float tForRocketLauncher = 0;
            while (tForRocketLauncher < 1)
            {
                tForRocketLauncher += Time.deltaTime * turnSpeed;
                attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForRocketLauncher);

            }

            Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
            Vector3 endPositionForRocketLauncher = new Vector3(-0.2170651f, 0.8697686f, 0.3542931f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
            }
        }

               GameObject rocketLauncher = attacker.RocketLauncher;
                rocketLauncher.gameObject.SetActive(true);
        ReloadGunsAudio.Play();


        weaponFourRangeText.text = "Players in Range: ";

                  weaponOneRangeText.gameObject.SetActive(false);
                  weaponTwoRangeText.gameObject.SetActive(false);
                  weaponThreeRangeText.gameObject.SetActive(false);
                  weaponFourRangeText.gameObject.SetActive(true);
                  weaponFiveRangeText.gameObject.SetActive(false);
                  weaponSixRangeText.gameObject.SetActive(false);
                  weaponSevenRangeText.gameObject.SetActive(false);

                  WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                  WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                  WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);


    }

    void OnWeaponButtonClickedFive()
    {
        
        Entity attacker = playerList[activePlayer % playerList.Count];

        // weaponFiveRangeText.text = "Players in Range:\n";

        bool SniperRifleClicked = attacker.SniperClicked = true;

        // Get the active player's position and weapon range
        Entity.WeaponInformation sniper = attacker.WeaponInfo.Find(weapon => weapon.name == "Sniper");
        attacker.playerAnimator.applyRootMotion = true;


        if (sniper != null)
        {
            // Clear any previous text
            weaponFiveRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= sniper.range)
                {
                  //  weaponFiveRangeText.text += player.playerName + "\n";

                   
                    int targetPlayerIndex = i % playerList.Count;

                    playerInrangeBtns[i].gameObject.SetActive(true);
                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonFive(attacker, targetPlayerIndex));

                    // Set the text of the button
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }

                 

            }
        }

      
        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        


        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);


        //    weaponFiveRangeText.text = "Players in Range: ";

        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(-0.04500001f, 0.94f, 0.177f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(-0.128f, 1.1f, 0.209f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(-0.103f, 1.066137f, 0.205f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(-0.041f, 1.053f, 0.136f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(0.0216f, 1.0827f, 0.1829f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
            Quaternion endRotationForSniper = Quaternion.Euler(0f, 0f, 25.237f);
            float tForSniper = 0;
            while (tForSniper < 1)
            {
                tForSniper += Time.deltaTime * turnSpeed;
                attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

            }

            Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
            Vector3 endPositionForSniper = new Vector3(-0.097f, 1.082f, 0.18f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
            }
        }

        GameObject sniperRifle = attacker.SniperRifle;
                sniperRifle.gameObject.SetActive(true);
        ReloadGunsAudio.Play();



        weaponOneRangeText.gameObject.SetActive(false);
                weaponTwoRangeText.gameObject.SetActive(false);
                weaponThreeRangeText.gameObject.SetActive(false);
                weaponFourRangeText.gameObject.SetActive(false);
                weaponFiveRangeText.gameObject.SetActive(true);
                weaponSixRangeText.gameObject.SetActive(false);
                weaponSevenRangeText.gameObject.SetActive(false);

       

                WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);

        //  StartCoroutine(CreatePlayerButtonsInWeaponRange());


    }

    void OnWeaponButtonClickedSix()
    {
        //  Entity currentPlayer = playerList[activePlayer];




        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool grenadeClicked = attacker.GrenadeClicked = true;

        Entity.WeaponInformation Grenade = attacker.WeaponInfo.Find(weapon => weapon.name == "Grenade");
        attacker.playerAnimator.applyRootMotion = true;



        if (Grenade != null)
        {
            // Clear any previous text
            weaponFiveRangeText.text = "Players in range:\n";
            //

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= Grenade.range)
                {
                   // weaponFiveRangeText.text += player.playerName + "\n";


                    int targetPlayerIndex = i % playerList.Count;

                    playerInrangeBtns[i].gameObject.SetActive(true);
                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonSix(attacker, targetPlayerIndex));

                    // Set the text of the button
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }



            }
        }

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsHoldingGrenade", true);
        playerAnimator.CrossFade("GrenadeIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.063f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.06299999f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.06299999f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.06299999f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.06299999f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForGrenade = attacker.Grenade.transform.localRotation;
            Quaternion endRotationForGrenade = Quaternion.Euler(129.382f, -87.026f, 0f);
            float tForGrenade = 0;
            while (tForGrenade < 1)
            {
                tForGrenade += Time.deltaTime * turnSpeed;
                attacker.Grenade.transform.localRotation = Quaternion.Slerp(startRotationForGrenade, endRotationForGrenade, tForGrenade);

            }

            Vector3 startPositionForGrenade = attacker.Grenade.transform.localPosition;
            Vector3 endPositionForGrenade = new Vector3(-0.06299999f, 0.971f, 0.171f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Grenade.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPosition);
            }
        }

        GameObject grenade = attacker.Grenade;
                grenade.gameObject.SetActive(true);
        ReloadGunsAudio.Play();


        weaponSixRangeText.text = "Players in Range: ";


                

                 // Update the player's hasWeapon flag
                 attacker.hasWeapon = true;

                 weaponOneRangeText.gameObject.SetActive(false);
                 weaponTwoRangeText.gameObject.SetActive(false);
                 weaponThreeRangeText.gameObject.SetActive(false);
                 weaponFourRangeText.gameObject.SetActive(false);
                 weaponFiveRangeText.gameObject.SetActive(false);
                 weaponSixRangeText.gameObject.SetActive(true);
                 weaponSevenRangeText.gameObject.SetActive(false);

                 WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                 WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                 WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                 WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                 WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                 WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                 WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);



    }

    void OnWeaponButtonClickedSeven()
    {
        //  Entity currentPlayer = playerList[activePlayer];


        

        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool shotgunClicked = attacker.ShotgunClicked = true;

        Entity.WeaponInformation Shotgun = attacker.WeaponInfo.Find(weapon => weapon.name == "Shotgun");
        attacker.playerAnimator.applyRootMotion = true;



        if (Shotgun != null)
        {
            // Clear any previous text
            weaponFiveRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {
                Entity player = playerList[i % playerList.Count];
                if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= Shotgun.range)
                {
                   // weaponFiveRangeText.text += player.playerName + "\n";


                    int targetPlayerIndex = i % playerList.Count;

                    playerInrangeBtns[i].gameObject.SetActive(true);
                    playerInrangeBtns[i].onClick.AddListener(() => AttackPlayerForButtonSeven(attacker, targetPlayerIndex));

                    // Set the text of the button
                    playerInrangeBtns[i].GetComponentInChildren<TextMeshProUGUI>().text = "Attack " + player.playerName;
                }
                else
                {
                    // Set the button to false for players not in range
                    playerInrangeBtns[i].gameObject.SetActive(false);
                }



            }
        }

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsAttacking", true);
        playerAnimator.CrossFade("RifleIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(0.02594156f, 0.8957283f, 0.1700381f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(0.019f, 0.9106917f, 0.32f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(-0.136f, 0.834f, 0.17f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(0.024f, 0.805f, 0.116f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(0.041f, 0.725f, 0.085f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
            Quaternion endRotationForShotgun = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(-0.212f, 0.765f, 0.17f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }

        GameObject shotgun = attacker.Shotgun;
                shotgun.gameObject.SetActive(true);
        ReloadGunsAudio.Play();


        weaponSevenRangeText.text = "Players in Range: ";

                  weaponOneRangeText.gameObject.SetActive(false);
                  weaponTwoRangeText.gameObject.SetActive(false);
                  weaponThreeRangeText.gameObject.SetActive(false);
                  weaponFourRangeText.gameObject.SetActive(false);
                  weaponFiveRangeText.gameObject.SetActive(false);
                  weaponSixRangeText.gameObject.SetActive(false);
                  weaponSevenRangeText.gameObject.SetActive(true);

                  WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                  WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                  WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                  WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                  WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);


    }

    void OnWeaponButtonClickedEight()
    {
        //  Entity currentPlayer = playerList[activePlayer];




        BackToAttackButtonSelect.gameObject.SetActive(true);
        BackAttackPanelButton.gameObject.SetActive(false);

        Entity attacker = playerList[activePlayer % playerList.Count];

        bool GodEyeClicked = attacker.GodEyeClicked = true;

        Entity.WeaponInformation GodEye = attacker.WeaponInfo.Find(weapon => weapon.name == "GodEye");
        attacker.playerAnimator.applyRootMotion = true;



        if (GodEye != null)
        {
            // Clear any previous text
            weaponFiveRangeText.text = "Players in range:\n";

            for (int i = 0; i < playerList.Count; i++)
            {

                playerInrangeBtns[i].gameObject.SetActive(false);


                
                    // weaponFiveRangeText.text += player.playerName + "\n";


                    int targetPlayerIndex = i % playerList.Count;

                    playerInrangeGodEyeBtn.gameObject.SetActive(true);
                    playerInrangeGodEyeBtn.onClick.AddListener(() => AttackPlayerForButtonEight(attacker));

                    // Set the text of the button
                    playerInrangeGodEyeBtn.GetComponentInChildren<TextMeshProUGUI>().text = "Attack Everyone ";
                
              



            }
        }

        Animator playerAnimator = attacker.playerAnimator;
        Vector3 startPositionForPlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
        playerAnimator.SetBool("IsHoldingGrenade", true);
        playerAnimator.CrossFade("GrenadeIdle", 0.02f);


        if (attacker.characterObject.name == "character")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(-180f, 0f, 180f);
            float tForGodEye = 0;
            while (tForGodEye < 1)
            {
                tForGodEye += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForGodEye);

            }

            Vector3 startPositionForGodEye = attacker.GodEyeswitch.transform.localPosition;
            Vector3 endPositionForGodEye = new Vector3(-0.042f, 0.033f, 0.057f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.GodEyeswitch.transform.localPosition = Vector3.Lerp(startPositionForGodEye, endPositionForGodEye, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterOne")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(0f, 180f, -28.834f);
            float tForGodEye = 0;
            while (tForGodEye < 1)
            {
                tForGodEye += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForGodEye);

            }

            Vector3 startPositionForGodEye = attacker.GodEyeswitch.transform.localPosition;
            Vector3 endPositionForGodEye = new Vector3(0.019f, 0.9106917f, 0.32f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.GodEyeswitch.transform.localPosition = Vector3.Lerp(startPositionForGodEye, endPositionForGodEye, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(0f, 180f, -28.834f);
            float tForGodEye = 0;
            while (tForGodEye < 1)
            {
                tForGodEye += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForGodEye);

            }

            Vector3 startPositionForGodEye = attacker.GodEyeswitch.transform.localPosition;
            Vector3 endPositionForGodEye = new Vector3(-0.136f, 0.834f, 0.17f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.GodEyeswitch.transform.localPosition = Vector3.Lerp(startPositionForGodEye, endPositionForGodEye, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterThree")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(0f, 180f, -28.834f);
            float tForGodEye = 0;
            while (tForGodEye < 1)
            {
                tForGodEye += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForGodEye);

            }

            Vector3 startPositionForGodEye = attacker.GodEyeswitch.transform.localPosition;
            Vector3 endPositionForGodEye = new Vector3(0.024f, 0.805f, 0.116f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.GodEyeswitch.transform.localPosition = Vector3.Lerp(startPositionForGodEye, endPositionForGodEye, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFour")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(0f, 180f, -28.834f);
            float tForGodEye = 0;
            while (tForGodEye < 1)
            {
                tForGodEye += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForGodEye);

            }

            Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
            Vector3 endPositionForShotgun = new Vector3(0.041f, 0.725f, 0.085f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
            }
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            Quaternion startRotationForGodEye = attacker.GodEyeswitch.transform.localRotation;
            Quaternion endRotationForGodEye = Quaternion.Euler(0f, 180f, -28.834f);
            float tForShotgun = 0;
            while (tForShotgun < 1)
            {
                tForShotgun += Time.deltaTime * turnSpeed;
                attacker.GodEyeswitch.transform.localRotation = Quaternion.Slerp(startRotationForGodEye, endRotationForGodEye, tForShotgun);

            }

            Vector3 startPositionForGodEye = attacker.GodEyeswitch.transform.localPosition;
            Vector3 endPositionForGodEye = new Vector3(-0.212f, 0.765f, 0.17f);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.GodEyeswitch.transform.localPosition = Vector3.Lerp(startPositionForGodEye, endPositionForGodEye, tPosition);
            }
        }

        GameObject Godeyeobject = attacker.GodEyeswitch;
        Godeyeobject.gameObject.SetActive(true);


        weaponSevenRangeText.text = "Players in Range: ";

        weaponOneRangeText.gameObject.SetActive(false);
        weaponTwoRangeText.gameObject.SetActive(false);
        weaponThreeRangeText.gameObject.SetActive(false);
        weaponFourRangeText.gameObject.SetActive(false);
        weaponFiveRangeText.gameObject.SetActive(false);
        weaponSixRangeText.gameObject.SetActive(false);
        weaponSevenRangeText.gameObject.SetActive(false);
        weaponEightRangeText.gameObject.SetActive(false);

        WeaponChooseAttackOneBtn.gameObject.SetActive(false);
        WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
        WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
        WeaponChooseAttackFourBtn.gameObject.SetActive(false);
        WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
        WeaponChooseAttackSixBtn.gameObject.SetActive(false);
        WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);


    }

    public IEnumerator RollDiceFunctionDiceScriptHuman()
    {
        isPlayerRollingDiceMove = true;

        RollDice();



        //It was just a while loop with dicevalue set to 0. The huge bug this entire time. What the actual f....

        float timeout = 10f; // Maximum time to wait for the dice value
        float startTime = Time.time;

        while (dice.diceValue == 0) 
        {
            if (Time.time - startTime >= timeout)
            {
                Debug.Log("Timeout reached. Rerolling dice.");
                RollDice();// Reroll the dice after the timeout is reached.
                startTime = Time.time; // Reset the timer after reroll
            }

            yield return null; // Continue waiting until diceValue is updated
            Debug.Log("Waiting for dice to land...");
        }

        yield return new WaitForSeconds(0.5f);

        if (dice.hasLanded == true && dice.diceValue > 0)
        {
            
            DepthofFieldforDice();

            /*
                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                {
                    steps = 32;
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                {
                    steps = 6;
                }
                else if(playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                {
                    steps = 8;
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                {
                    steps = 6;
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                {
                    steps = 6;
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                {
                  steps = 4;
                }
            */
                
                











               steps = dice.GetDiceValue();
          //  steps = 6;
        
          
           
          






            if (steps == 1)
            {
                dice.showDiceForOne();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 2)
            {
                dice.showDiceForTwo();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 3)
            {
                dice.showDiceForThree();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 4)
            {
                dice.showDiceForFour();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 5)
            {
                dice.showDiceForFive();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 6)
            {
                dice.showDiceForSix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else
            {
                dice.showDiceForSix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }

            yield return new WaitForSeconds(1f);

            dice.ResetDicePositionVoid();
            diceLightHolder.gameObject.SetActive(false);
            DiceLight.Stop();
            

            yield return new WaitForSeconds(0.5f);

            DepthOfFieldBlury();
            isPlayerRollingDiceMove = false;

            StartCoroutine(DelayBeforePlayerMoves(steps));
        }

        Debug.Log("Has reached end of dice roll function");
        
        
    }



    void RollDiceButtonClicked()
    {
        for (int j = 0; j < charactersInJail.Length; j++)
        {
            charactersInJail[j].gameObject.SetActive(false);
        }


        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {

            

            CharacterUIPanel.gameObject.SetActive(false);

            StartCoroutine(RollDiceFunctionDiceScriptHuman());
           

            Debug.Log(playerList[activePlayer % playerList.Count].playerName + " Dice Rolled " + steps);
            
            state = States.WAITING;
        }
    }

    void EndTurnClicked()
    {

        for (int j = 0; j < charactersInJail.Length; j++)
        {
            charactersInJail[j].gameObject.SetActive(false);
        }

        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            Entity attacker = playerList[activePlayer % playerList.Count];
            bool isAttacking = attacker.isAttacking = false;

            Debug.Log("Switching from " + playerList[activePlayer % playerList.Count].playerName);
            moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
            moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);

            StartCoroutine(WaitASecond());



           

            state = States.ROLL_DICE;
        }
        
    }

   

    void BackAttackPanelButtonClicked()
    {
        ResetCameraZoom();
        Entity attacker = playerList[activePlayer % playerList.Count];
        attacker.playerAnimator.applyRootMotion = false;
        AttackPhasePanel.gameObject.SetActive(false);
        CharacterUIPanel.gameObject.SetActive(true);
        attackButton.gameObject.SetActive(true);

        StartCoroutine(BlurEffects());

        state = States.WAITAFTERATTACK;
    }



    void BuyButtonClicked()
    {
        StartCoroutine(BuyButtonClickedCoroutine());
    }


   

    void AttackButtonClicked()
    {
        weaponOneRangeText.gameObject.SetActive(false);
        weaponTwoRangeText.gameObject.SetActive(false);
        weaponThreeRangeText.gameObject.SetActive(false);
        weaponFourRangeText.gameObject.SetActive(false);
        weaponFiveRangeText.gameObject.SetActive(false);
        weaponSixRangeText.gameObject.SetActive(false);
        weaponSevenRangeText.gameObject.SetActive(false);
        weaponEightRangeText.gameObject.SetActive(false);

        playerInrangeBtns[0].gameObject.SetActive(false);
        playerInrangeBtns[1].gameObject.SetActive(false);
        playerInrangeBtns[2].gameObject.SetActive(false);
        playerInrangeBtns[3].gameObject.SetActive(false);
        playerInrangeBtns[4].gameObject.SetActive(false);
        playerInrangeBtns[5].gameObject.SetActive(false);

        playerInrangeGodEyeBtn.gameObject.SetActive(false);


        




        CharacterUIPanel.gameObject.SetActive(false);
        StartCoroutine(attackTurnOrder());
        state = States.WAITING;
    }

    void CloseShopButtonClicked()
    {
        StartCoroutine(CloseWeaponShop());
    }
    


    public void BuyWeapon(int weaponIndex)
    {
        StartCoroutine(BuyWeaponsFunctionHuman(weaponIndex));
    }

    public void useShieldClicked()
    {
        //StartCoroutine(useShieldClickedEnumerator());
        isUsingShieldBool = true;
        UseShield.gameObject.SetActive(false);
        DontUseShield.gameObject.SetActive(false);
    }

    public void dontUseShieldClicked()
    {
        //  StartCoroutine(dontUseShieldClickedEnumerator());
        isNotUsingShieldBool = true;
        DontUseShield.gameObject.SetActive(false);
        UseShield.gameObject.SetActive(false);
    }

  


    public IEnumerator returnWhileZero()
    {  
            yield return null;    
    }



    void Update()
    {

        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.CPU)
        {
            switch (state)
            {



                case States.ROLL_DICE:
                    {

                       

                        CharacterUIPanel.gameObject.SetActive(false);
                       
                        StartCoroutine(WaitForCamera());

                        StartCoroutine(DisableWeapons());

                        //  StartCoroutine(CpuToHumanEndTurn());

                        VoidForCPUToHumanEndTurn();

                        myImage.gameObject.SetActive(false);

                        AttackPhasePanel.gameObject.SetActive(false);
                        weaponShopPanel.gameObject.SetActive(false);
                        rollDiceButton.gameObject.SetActive(false);
                        endTurn.gameObject.SetActive(false);
                        attackButton.gameObject.SetActive(false);
                        buyButton.gameObject.SetActive(false);

                        state = States.WAITING;

                    }

                    break;

                case States.WAITING:
                    {



                        
                        rollDiceButton.interactable = true;
                        endTurn.gameObject.SetActive(false);
                        attackButton.gameObject.SetActive(false);
                        buyButton.gameObject.SetActive(false);

                        state = States.BUYING;
                    }


                    break;

                case States.BUYING:
                    {


                        state = States.SWITCH_PLAYER;
                    }

                    break;

                case States.SWITCH_PLAYER:
                    {
                        if (!isMoving)
                        {

                           // StartCoroutine(PlayerTurnIndicatorCPU());

                           // switchingPlayer = true;

                           
                            if (playerList[activePlayer % playerList.Count].isCPUDoneAttacking == true)
                            {
                                StartCoroutine(CPUWithWeaponSwitchPlayers()); 
                            }

                            if (playerList[activePlayer % playerList.Count].isCPUDoneWalking == true)
                            {
                                StartCoroutine(CPUSwitchPlayers());
                            }
                                
                            
                            

                            


                          //  Debug.Log("Switching to " + playerList[activePlayer].playerName);

                            weaponShopPanel.gameObject.SetActive(false);
                            attackButton.gameObject.SetActive(true);
                            buyButton.gameObject.SetActive(false);
                            rollDiceButton.gameObject.SetActive(true);


                           

                        }
                    }
                    break;
            }
        }
        else if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            switch (state)
            {
                case States.ROLL_DICE:
                    {
                       // CharacterUIPanel.SetActive(true);
                        bool Isattacking = playerList[activePlayer % playerList.Count].isAttacking = false;
                        Isattacking = false;
                     

                      //  cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                       

                        

                        myImage.gameObject.SetActive(false);

                       
                       
                        StartCoroutine(WaitForCamera());

                        StartCoroutine(DisableWeapons());

                        
                        AttackPhasePanel.gameObject.SetActive(false);
                        attackButton.interactable = true;
                        weaponShopPanel.gameObject.SetActive(false);
                        endTurn.gameObject.SetActive(false);
                        buyButton.gameObject.SetActive(false);

                       


                    }
                    break;

                case States.WAITING:
                    {
                       

                        endTurn.gameObject.SetActive(false);
                        attackButton.gameObject.SetActive(false);
                        weaponShopPanel.gameObject.SetActive(false);
                        AttackPhasePanel.gameObject.SetActive(false);

                        StartCoroutine(DisableWeapons());
                        state = States.SWITCH_PLAYER;
                    }

                    break;

                

                case States.SWITCH_PLAYER:
                    {
                       
                        if (!isMoving)
                        {

                            rollDiceButton.gameObject.SetActive(false);
                            attackButton.gameObject.SetActive(false);
                           

                           
                        }
                    }
                    break;

                case States.WAITAFTERATTACK:
                    {
                      
                        bool isAttacking = playerList[activePlayer % playerList.Count].isAttacking;
                        if (!isMoving && !isAttacking)
                        {

                            rollDiceButton.gameObject.SetActive(true);
                            



                        }
                        else if(!isMoving && isAttacking)
                        {
                            rollDiceButton.gameObject.SetActive(false);
                            endTurn.gameObject.SetActive(true);
                        }
                    }
                    break;
            }
        }
    }

    //

    public IEnumerator CPUSwitchPlayers()
    {

        playerList[activePlayer % playerList.Count].isCPUDoneWalking = false;
        playerList[activePlayer % playerList.Count].isCPUDoneAttacking = false;

        yield return new WaitForSeconds(1.5f);

        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", false);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurnOver", true);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimEnding", 0.05f);

        yield return new WaitForSeconds(1f);


        activePlayer = (activePlayer + 1) % playerList.Count;


        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            state = States.ROLL_DICE;
            isPreviousPlayerCPU = true;

            yield return new WaitForSeconds(1f);
           //  cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            StartCoroutine(SwitchPlayerCameraMove());
            yield return new WaitForSeconds(1f);

            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);

            yield return new WaitForSeconds(1f);

            rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn.");
            yield return new WaitForSeconds(1f);
            rollDiceText.text = "";
            yield return new WaitForSeconds(1f);
            rollDiceButton.interactable = true;
            CharacterUIPanel.gameObject.SetActive(true);
            isPreviousPlayerCPU = false;
        }
        else if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.CPU)
        {
            state = States.ROLL_DICE;
        }








    }

    public IEnumerator CPUWithWeaponSwitchPlayers()
    {
      //  yield return new WaitForSeconds(30);

        playerList[activePlayer % playerList.Count].isCPUDoneAttacking = false;
        playerList[activePlayer].isCPUDoneWalking = false;

        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
        yield return new WaitForSeconds(1f);
        rollDiceText.text =  "";
        yield return new WaitForSeconds(1.5f);

        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", false);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurnOver", true);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimEnding", 0.05f);

        yield return new WaitForSeconds(1f);

        activePlayer = (activePlayer + 1) % playerList.Count;

        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.CPU)
        {
            state = States.ROLL_DICE;
        }

        else  if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            
            state = States.ROLL_DICE;
            isPreviousPlayerCPU = true;
            // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            StartCoroutine(SwitchPlayerCameraMove());
            yield return new WaitForSeconds(1f);


            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);

            yield return new WaitForSeconds(1f);

            rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn.");
            yield return new WaitForSeconds(1f);
            rollDiceText.text = "";
            yield return new WaitForSeconds(2f);
            rollDiceButton.interactable = true;
            rollDiceButton.gameObject.SetActive(true);
            attackButton.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);
            isPreviousPlayerCPU = false;
        }


        //  activePlayer = (activePlayer + 1) % playerList.Count;
        //  state = States.ROLL_DICE;



    }

    public IEnumerator BlurEffects()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 4.8f;
            float targetFocalLength = 65f;
            float targetFocusDistance = 2.5f;
            float transitionDuration = 0.3f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }
    }

    IEnumerator DelayBeforePlayerMoves( int Steps)
    {
       
         Steps = steps;
       // rollDiceText.text = "Fate Chose " + Steps;
        Debug.Log(playerList[activePlayer % playerList.Count].playerName + " Dice Rolled " + Steps);
        // rollDiceText.text = playerList[activePlayer].playerName + " Dice Rolled " + steps;
        endTurn.gameObject.SetActive(false);
      //  myImage.gameObject.SetActive(true);
        
        yield return new WaitForSeconds(0.3f);

      
        StartCoroutine(Move(Steps));// Wait for 2 seconds

        yield return new WaitForSeconds(4f);
        
        endTurn.gameObject.SetActive(true);
    }

    public IEnumerator CPUCombat( int currentPlayerIndex, WeaponInformation CPUSelectedWeapon)
    {
        if (isMoving)
        {
            yield break;
        }

        isMoving = true;


        Entity attacker = playerList[activePlayer % playerList.Count];
        //int CPUWeaponToAttack = Random.Range(0, playerList[activePlayer].WeaponInfo.Count);
       // WeaponInformation CPUSelectedWeapon = playerList[activePlayer].WeaponInfo[CPUWeaponToAttack];

        int targetPlayerIndex = currentPlayerIndex % playerList.Count;
        Entity targetPlayer = playerList[targetPlayerIndex];

        Entity.WeaponInformation ShieldEntityForTarget = targetPlayer.WeaponInfo.Find(weapon => weapon.name == "Shield");

        targetPlayer.lives -= CPUSelectedWeapon.damage;
        CPUSelectedWeapon.bullets--;

        playerList[activePlayer % playerList.Count].isCPUDoneAttacking = true;

        yield return new WaitForSeconds(2f);
        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn.");
        yield return new WaitForSeconds(2f);
        rollDiceText.text = ("");
        yield return new WaitForSeconds(2f);

        rollDiceText.text = (attacker.playerName + " decided to attack " + targetPlayer.playerName + ".");
        yield return new WaitForSeconds(4f);
        rollDiceText.text = "";

        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            
            depthOfField.focusDistance.value = 1.3f; 
            depthOfField.aperture.value = 0.7f; 
            depthOfField.focalLength.value = 14f; 
        }

       
        yield return new WaitForSeconds(0.5f);
        ResetCameraZoom();
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(attackingCameraMovement());
        yield return new WaitForSeconds(0.5f);
        DepthOfFieldShootingPlayer();
        yield return new WaitForSeconds(.5f);



        if (CPUSelectedWeapon.name == "Sniper")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.112f, 1.146f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.387f, 1.438f, 0.618f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(0f, 0f, 0f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(0f, 0f, 0f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(0f, 0f, 0f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.33f, 1.353f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }


        }
        else if (CPUSelectedWeapon.name == "Pistol")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.207f, 1.19f, 0.467f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.332f, 1.441f, 0.516f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.335f, 1.394f, 0.475f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.392f, 1.321f, 0.478f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.116f, 1.319f, 0.401f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.327f, 1.363f, 0.469f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }

        }
        else if (CPUSelectedWeapon.name == "AK47")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.215f, 1.04f, 0.46f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.368f, 1.108f, 0.607f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.44f, 1.028f, 0.511f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.289f, 1.028f, 0.512f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.354f, 0.843f, 0.359f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.568f, 0.901f, 0.591f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
        }
        else if (CPUSelectedWeapon.name == "M15")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.222f, 1.146f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.345f, 1.195f, 0.661f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.495f, 1.113f, 0.52f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.236f, 1.113f, 0.52f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.291f, 0.91f, 0.519f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.548f, 1.036f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.05f, 1.202f, 0.232f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.148f, 1.294f, 0.373f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.177f, 1.153f, 0.244f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.043f, 1.112f, 0.287f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.071f, 1.041f, 0.298f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {


                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.336f, 1.087f, 0.232f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
        }
        else if (CPUSelectedWeapon.name == "Grenade")
        {
            if (attacker.characterObject.name == "character")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
        }
        else if (CPUSelectedWeapon.name == "Shotgun")
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.252f, 1.071f, 0.548f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.326f, 1.2f, 0.564f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.424f, 1.104f, 0.548f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.283f, 1.059f, 0.503f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.287f, 0.926f, 0.47f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.374f, 1.165f, 0.568f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
        }

        attacker.playerAnimator.applyRootMotion = true;
        targetPlayer.playerAnimator.applyRootMotion = true;

        yield return new WaitForSeconds(1f);


        if (targetPlayer.position < attacker.position && attacker.position <= 20)
        {
            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }

        else if (targetPlayer.position < attacker.position && attacker.position > 20 && attacker.position <= 30)
        {
            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }

        else if (targetPlayer.position < attacker.position && attacker.position > 30 && attacker.position <= 49)
        {
            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }
        else if (targetPlayer.position < attacker.position && attacker.position > 49 && attacker.position <= 58)
        {
            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }
        else if(targetPlayer.position == attacker.position) //&& attacker.position <= 20)
        {
            Vector3 startPositionForAttacker = attacker.characterObject.transform.localPosition;

            attacker.playerAnimator.SetBool("IsOnSameSquare", true);
            attacker.playerAnimator.CrossFade("SpinAttack", 0.02f);

           
           
            NPCMovementSpeedRun();
            CrowdScreamingAudio.Play();
            CrowdScreamingAudio.volume = 0.4f;


            if (CPUSelectedWeapon.name == "Pistol")
            {
                attacker.Pistol.gameObject.SetActive(true);
            }
            else if (CPUSelectedWeapon.name == "AK47")
            {
                attacker.Ak47.gameObject.SetActive(true);
            }
            else if (CPUSelectedWeapon.name == "M15")
            {
                attacker.M15.gameObject.SetActive(true);
            }
            else if (CPUSelectedWeapon.name == "Rocket Launcher")
            {
                attacker.RocketLauncher.gameObject.SetActive(true);
            }
            else if (CPUSelectedWeapon.name == "Sniper")
            {
                attacker.SniperRifle.gameObject.SetActive(true);
            }
            else if (CPUSelectedWeapon.name == "Grenade")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "Shotgun")
            {
                attacker.Shotgun.gameObject.SetActive(true);
            }

            yield return new WaitForSeconds(2.1f);


            if (CPUSelectedWeapon.name == "Pistol")
            {
                attacker.Pistol.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "AK47")
            {
                attacker.Ak47.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "M15")
            {
                attacker.M15.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "Rocket Launcher")
            {
                attacker.RocketLauncher.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "Sniper")
            {
                attacker.SniperRifle.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "Grenade")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (CPUSelectedWeapon.name == "Shotgun")
            {
                attacker.Shotgun.gameObject.SetActive(false);
            }

            Quaternion startRotation = attacker.characterObject.transform.localRotation;
            if (attacker.position == 0 || attacker.position <= 20)
            {
                Quaternion endRotation = Quaternion.Euler(0, 90, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (attacker.position >= 21 && attacker.position <= 30)
            {
                Quaternion endRotation = Quaternion.Euler(0, 0, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (attacker.position >= 31 && attacker.position <= 49)
            {
                Quaternion endRotation = Quaternion.Euler(0, 270, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (attacker.position >= 50 && attacker.position <= 58)
            {
                Quaternion endRotation = Quaternion.Euler(0, 180, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }


            Vector3 endPositionForAttacker = startPositionForAttacker;
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.characterObject.transform.localPosition = Vector3.Lerp(startPositionForAttacker, endPositionForAttacker, tPosition);
            }


            attacker.playerAnimator.SetBool("IsOnSameSquare", false);
            attacker.playerAnimator.CrossFade("Idle", 0.02f);
            attacker.playerAnimator.applyRootMotion = false;
        }
       
     /*  else if (targetPlayer.position == attacker.position && attacker.position > 20 && attacker.position <= 30)
        {
            attacker.playerAnimator.SetBool("IsOnSameSquare", true);
            attacker.playerAnimator.CrossFade("SpinAttack", 0.02f);
        }
        else if (targetPlayer.position == attacker.position && attacker.position > 30 && attacker.position <= 49)
        {
            attacker.playerAnimator.SetBool("IsOnSameSquare", true);
            attacker.playerAnimator.CrossFade("SpinAttack", 0.02f);
        }
        else if (targetPlayer.position == attacker.position && attacker.position > 49 && attacker.position <= 58)
        {
            attacker.playerAnimator.SetBool("IsOnSameSquare", true);
            attacker.playerAnimator.CrossFade("SpinAttack", 0.02f);
        }
       */




            attacker.playerAnimator.SetBool("IsTurning", false);
            attacker.playerAnimator.SetBool("IsOnSameSquare", false);
            attacker.playerAnimator.CrossFade("Idle", 0.08f);

        yield return new WaitForSeconds(0.5f);



        //  attacker.playerAnimator.applyRootMotion = true;

        if (CPUSelectedWeapon.name == "Pistol" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Pistol" && attacker.position > targetPlayer.position || CPUSelectedWeapon.name == "AK47" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "AK47" && attacker.position > targetPlayer.position || CPUSelectedWeapon.name == "M15" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "M15" && attacker.position > targetPlayer.position || CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position > targetPlayer.position || CPUSelectedWeapon.name == "Sniper" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Sniper" && attacker.position > targetPlayer.position || CPUSelectedWeapon.name == "Shotgun" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Shotgun" && attacker.position > targetPlayer.position)
        {
            attacker.playerAnimator.applyRootMotion = true;

            attacker.playerAnimator.SetBool("IsActuallyAttackingLMAO", true);
            attacker.playerAnimator.CrossFade("FiringRifle", 0.1f);
            

           
           
            NPCMovementSpeedRun();
           
        }
        else if (CPUSelectedWeapon.name == "Grenade" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Grenade" && attacker.position > targetPlayer.position)
        {
            attacker.playerAnimator.applyRootMotion = true;

            Quaternion startRotation = attacker.playerAnimator.transform.rotation;

            attacker.playerAnimator.SetBool("IsThrowing", true);
            attacker.playerAnimator.CrossFade("Throw", 0.1f);

            NPCMovementSpeedRun();
           

            yield return new WaitForSeconds(2.5f);

            attacker.playerAnimator.SetBool("IsThrowing", false);
            attacker.playerAnimator.CrossFade("Idle", 0.1f);


            Quaternion endRotation = startRotation;
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }



        yield return new WaitForSeconds(0.5f);
        CrowdScreamingAudio.Play();
       // CrowdScreamingAudio.volume = 0.4f;

        if (CPUSelectedWeapon.name == "Pistol" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Pistol" && attacker.position > targetPlayer.position)
        {
            attacker.Pistol.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                pistolPlayerFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                pistolPlayerOneFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                pistolPlayerTwoFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                pistolPlayerThreeFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                pistolPlayerFourFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                pistolPlayerFiveFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFiveFlash.gameObject.SetActive(true);
            }
        }
        else if (CPUSelectedWeapon.name == "AK47" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "AK47" && attacker.position > targetPlayer.position)
        {
            attacker.Ak47.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                Ak47PlayerFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Ak47PlayerOneFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Ak47PlayerTwoFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Ak47PlayerThreeFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Ak47PlayerFourFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Ak47PlayerFiveFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFiveFlash.gameObject.SetActive(true);
            }

        }
        else if (CPUSelectedWeapon.name == "M15" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "M15" && attacker.position > targetPlayer.position)
        {
            attacker.M15.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                M15PlayerFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                M15PlayerOneFlash.Play();
                GunShotsAudio.Play();
                M15PlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                M15PlayerTwoFlash.Play();
                GunShotsAudio.Play();
                M15PlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                M15PlayerThreeFlash.Play();
                GunShotsAudio.Play();
                M15PlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                M15PlayerFourFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                M15PlayerFiveFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFiveFlash.gameObject.SetActive(true);
            }
        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position > targetPlayer.position)
        {
            attacker.RocketLauncher.gameObject.SetActive(true);
            attacker.RocketLauncherHead.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                RocketLauncherFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherFlash.gameObject.SetActive(true);

            }
            else if (attacker.characterObject.name == "characterOne")
            {
                RocketLauncherOneFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                RocketLauncherTwoFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherTwoFlash.gameObject.SetActive(true);

            }
            else if (attacker.characterObject.name == "characterThree")
            {
                RocketLauncherThreeFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherThreeFlash.gameObject.SetActive(true);

            }
            else if (attacker.characterObject.name == "characterFour")
            {
                RocketLauncherFourFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherFourFlash.gameObject.SetActive(true);

            }
            else if (attacker.characterObject.name == "characterFive")
            {
                RocketLauncherFiveFlash.Play();
                RocketLauncherAudio.Play();
                RocketLauncherFiveFlash.gameObject.SetActive(true);

            }

        }
        else if (CPUSelectedWeapon.name == "Sniper" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Sniper" && attacker.position > targetPlayer.position)
        {
            attacker.SniperRifle.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                SniperRifleFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                SniperRifleOneFlash.Play();
                GunShotsAudio.Play();
                SniperRifleOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                SniperRifleTwoFlash.Play();
                GunShotsAudio.Play();
                SniperRifleTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                SniperRifleThreeFlash.Play();
                GunShotsAudio.Play();
                SniperRifleThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                SniperRifleFourFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                SniperRifleFiveFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFlash.gameObject.SetActive(true);
            }
        }
        else if (CPUSelectedWeapon.name == "Grenade" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Grenade" && attacker.position > targetPlayer.position)
        {
            attacker.Grenade.gameObject.SetActive(false);
        }
        else if (CPUSelectedWeapon.name == "Shotgun" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Shotgun" && attacker.position > targetPlayer.position)
        {
            attacker.Shotgun.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                ShotgunPlayerFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                ShotgunPlayerOneFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                ShotgunPlayerTwoFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                ShotgunPlayerThreeFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                ShotgunPlayerFourFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                ShotgunPlayerFiveFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFiveFlash.gameObject.SetActive(true);
            }


        }


        yield return new WaitForSeconds(1f);

        StartCoroutine(BlurEffects());
        ResetCameraZoom();

        yield return new WaitForSeconds(0.5f);

        int routePositionforNodes = (attacker.position + 1) % currentRoute.childNodeList.Count;

        float currentIntensity = 0f;

        if (targetPlayer.position > attacker.position)
        {
            for (int i = routePositionforNodes; i < (attacker.position) + ((targetPlayer.position - attacker.position) + 1); i++)
            {
                Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];



             
                float duration = 0.17f;

                float startValueIntensity = 0;
                float endValueIntensity = 2f;

                float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColor = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    cameraController.target = NodeColorObjectList[i].transform;

                    yield return null;
                }




            }
        }
        else if (attacker.position > targetPlayer.position)
        {
            int routePositionforNodesBackwards = (attacker.position - 1 + (currentRoute.childNodeList.Count)) % currentRoute.childNodeList.Count;
            int targetPosition = (targetPlayer.position - 1 + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count;

            for (int i = routePositionforNodesBackwards; i != targetPosition; i = (i - 1 + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count)
            {
                Material changeNodeMaterial = NodeColorObjectList[((i) + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[((i) + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];



                
                float duration = 0.17f;

                float startValueIntensity = 0;
                float endValueIntensity = 2f;

                float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColor = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    cameraController.target = NodeColorObjectList[i].transform;

                    yield return null;
                }




            }
        }
      //  cameraController.target = targetPlayer.playerObject.transform;
        yield return new WaitForSeconds(0.5f);

       
        StartCoroutine(attackingCameraMovement());
        yield return new WaitForSeconds(1f);
        DepthOfFieldShootingPlayer();

      //  yield return new WaitForSeconds(1f);

        targetPlayer.playerAnimator.applyRootMotion = true;

        if (targetPlayer.position > attacker.position && targetPlayer.position <= 20)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 20 && targetPlayer.position <= 30)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);



            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 30 && targetPlayer.position <= 49)
        {

            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);
            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 49 && targetPlayer.position <= 58)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }

        




        targetPlayer.playerAnimator.SetBool("IsTurning", false);
        targetPlayer.playerAnimator.CrossFade("Idle", 0.05f);

        yield return new WaitForSeconds(1f);




        if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "character" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "character")
        {
            if (PlayerHurtExplosion != null)
            {
                PlayerHurtExplosion.gameObject.SetActive(true);
                PlayerHurtExplosion.Play();
                ExplosionAudio.Play();

            }

        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "characterOne" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "characterOne")
        {
            if (PlayerHurtExplosionOne != null)
            {
                PlayerHurtExplosionOne.gameObject.SetActive(true);
                PlayerHurtExplosionOne.Play();
                ExplosionAudio.Play();
            }

        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "characterTwo" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "characterTwo")
        {
            if (PlayerHurtExplosionTwo != null)
            {
                PlayerHurtExplosionTwo.gameObject.SetActive(true);
                PlayerHurtExplosionTwo.Play();
                ExplosionAudio.Play();
            }

        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "characterThree" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "characterThree")
        {
            if (PlayerHurtExplosionThree != null)
            {
                PlayerHurtExplosionThree.gameObject.SetActive(true);
                PlayerHurtExplosionThree.Play();
                ExplosionAudio.Play();
            }

        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "characterFour" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "characterFour")
        {
            if (PlayerHurtExplosionFour != null)
            {
                PlayerHurtExplosionFour.gameObject.SetActive(true);
                PlayerHurtExplosionFour.Play();
                ExplosionAudio.Play();
            }

        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && targetPlayer.characterObject.name == "characterFive" || CPUSelectedWeapon.name == "Grenade" && targetPlayer.characterObject.name == "characterFive")
        {
            if (PlayerHurtExplosionFive != null)
            {
                PlayerHurtExplosionFive.gameObject.SetActive(true);
                PlayerHurtExplosionFive.Play();
                ExplosionAudio.Play();
            }

        }


        Vector3 startPositionForTargetPlayer = targetPlayer.playerObject.transform.position;
        yield return new WaitForSeconds(1f);

        if (ShieldEntityForTarget != null)
        {
            if (targetPlayer.playerType == PlayerTypes.HUMAN)
            {
                UseShield.gameObject.SetActive(true);
                DontUseShield.gameObject.SetActive(true);
            }
            else
            {
                isUsingShieldBool = true;
            }

            //
            while (isUsingShieldBool == false && isNotUsingShieldBool == false)
            {
                yield return null;
                
            }

            if (isUsingShieldBool == true)
            {

                ShieldEntityForTarget.bullets--;

                if (ShieldEntityForTarget.bullets <= 0)
                {
                    targetPlayer.WeaponInfo.Remove(ShieldEntityForTarget);

                    if (targetPlayer.WeaponInfo.Count == 0)
                    {
                        targetPlayer.hasWeapon = false;
                    }
                }

                targetPlayer.playerAnimator.applyRootMotion = false;


                targetPlayer.playerAnimator.SetBool("UsingShield", true);
                targetPlayer.playerAnimator.CrossFade("SwordShieldBlock", 0.1f);

                yield return new WaitForSeconds(0.5f);
                targetPlayer.ShieldAnimator.SetBool("ShieldGrow", true);
                targetPlayer.ShieldAnimator.CrossFade("ShieldGrowth", 0.1f);

                yield return new WaitForSeconds(1f);
                BulletRicochet.Play();

                if (targetPlayer.characterObject.name == "character")
                {
                    BulletShieldImpact.gameObject.SetActive(true);
                    BulletShieldImpact.Play();

                }
                else if (targetPlayer.characterObject.name == "characterOne")
                {
                    BulletShieldImpactOne.gameObject.SetActive(true);
                    BulletShieldImpactOne.Play();
                }
                else if (targetPlayer.characterObject.name == "characterTwo")
                {
                    BulletShieldImpactTwo.gameObject.SetActive(true);
                    BulletShieldImpactTwo.Play();
                }
                else if (targetPlayer.characterObject.name == "characterThree")
                {
                    BulletShieldImpactThree.gameObject.SetActive(true);
                    BulletShieldImpactThree.Play();
                }
                else if (targetPlayer.characterObject.name == "characterFour")
                {
                    BulletShieldImpactFour.gameObject.SetActive(true);
                    BulletShieldImpactFour.Play();
                }
                else if (targetPlayer.characterObject.name == "characterFive")
                {
                    BulletShieldImpactFive.gameObject.SetActive(true);
                    BulletShieldImpactFive.Play();
                }


                targetPlayer.playerAnimator.SetBool("ShieldIdle", true);
                targetPlayer.playerAnimator.SetBool("UsingShield", false);
                targetPlayer.playerAnimator.CrossFade("SwordShieldIdle", 0.1f);

                yield return new WaitForSeconds(6f);

                BulletRicochet.Stop();

                if (targetPlayer.characterObject.name == "character")
                {
                    BulletShieldImpact.Stop();
                    BulletShieldImpact.gameObject.SetActive(false);

                }
                else if (targetPlayer.characterObject.name == "characterOne")
                {
                    BulletShieldImpactOne.Stop();
                    BulletShieldImpactOne.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterTwo")
                {
                    BulletShieldImpactTwo.Stop();
                    BulletShieldImpactTwo.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterThree")
                {
                    BulletShieldImpactThree.Stop();
                    BulletShieldImpactThree.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterFour")
                {
                    BulletShieldImpactFour.Stop();
                    BulletShieldImpactFour.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterFive")
                {
                    BulletShieldImpactFive.Stop();
                    BulletShieldImpactFive.gameObject.SetActive(false);
                }
                targetPlayer.playerAnimator.SetBool("ShieldIdle", false);
                targetPlayer.ShieldAnimator.SetBool("ShieldShrink", false);
                targetPlayer.ShieldAnimator.CrossFade("ShieldShrink", 0.1f);
                targetPlayer.playerAnimator.CrossFade("Idle", 0.1f);



                Vector3 endPositionForCardPanel = startPositionForTargetPlayer;
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForTargetPlayer, endPositionForCardPanel, tPosition);
                }
            }
            else if (isNotUsingShieldBool == true)
            {
                //targetPlayer.lives = targetPlayer.lives - 1;

                if (targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Pistol" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "AK47" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "M15" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Sniper" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Shotgun")
                {
                    Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                    Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;

                    targetPlayer.playerAnimator.SetBool("IsHitExplosion", true);
                    targetPlayer.playerAnimator.CrossFade("ExplosionHurt", 0.05f);


                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                    livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);

                    yield return new WaitForSeconds(4f);

                    targetPlayer.playerAnimator.SetBool("IsHitExplosion", false);
                    targetPlayer.playerAnimator.SetBool("IsGettingUp", true);
                    targetPlayer.playerAnimator.CrossFade("GettingUp", 0.05f);


                    yield return new WaitForSeconds(2f);


                    Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                    float tPositionActivePlayer = 0;
                    float moveSpeedActivePlayer = 5.0f;

                    while (tPositionActivePlayer < 1)
                    {
                        tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                        targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                    }





                    targetPlayer.playerAnimator.SetBool("IsGettingUp", false);
                    targetPlayer.playerAnimator.CrossFade("Idle", 0.05f);
                    Quaternion endRotation = startRotation;
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                    }




                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                    RemoveCharacterUI();
                }
                else if (targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Rocket Launcher" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Grenade")
                {
                    Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                    Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;
                    // yield return new WaitForSeconds(0.3f);

                    //  targetAnimator.applyRootMotion = true;


                    targetPlayer.playerAnimator.SetBool("IsHitExplosion", true);
                    targetPlayer.playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                    livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);


                    yield return new WaitForSeconds(4f);

                    targetPlayer.playerAnimator.SetBool("IsHitExplosion", false);
                    targetPlayer.playerAnimator.SetBool("IsGettingUp", true);
                    targetPlayer.playerAnimator.CrossFade("GettingUp", 0.05f);


                    yield return new WaitForSeconds(2f);


                    Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                    float tPositionActivePlayer = 0;
                    float moveSpeedActivePlayer = 5.0f;

                    while (tPositionActivePlayer < 1)
                    {
                        tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                        targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                    }





                    targetPlayer.playerAnimator.SetBool("IsGettingUp", false);
                    targetPlayer.playerAnimator.CrossFade("Idle", 0.05f);
                    Quaternion endRotation = startRotation;
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                    }

                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                    RemoveCharacterUI();

                }
                else if (targetPlayer.lives <= 0)
                {
                    targetPlayer.playerAnimator.applyRootMotion = true;
                    targetPlayer.playerAnimator.SetBool("IsDead", true);
                    targetPlayer.playerAnimator.CrossFade("CharDeath", 0.05f);

                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                    livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);

                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = targetPlayer.playerName + " gave up the Ghost";
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";

                    Entity playerToBeRemoved = targetPlayer;

                    livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                    RemoveCharacterUI();

                    if (targetPlayer.WeaponInfo.Count > 0 && attacker.WeaponInfo.Count > 0)
                    {
                        for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                        {
                            Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];
                            Entity.WeaponInformation existingWeapon = attacker.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                            if (existingWeapon != null)
                            {


                                existingWeapon.bullets += selectedWeapon.bullets;
                                RemoveCharacterUI();

                            }
                        }
                    }
                    else if (attacker.WeaponInfo.Count == 0 && targetPlayer.WeaponInfo.Count > 0)
                    {
                        for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                        {

                            Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];



                            Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                            {
                                name = selectedWeapon.name,
                                range = selectedWeapon.range,
                                damage = selectedWeapon.damage,
                                bullets = selectedWeapon.bullets
                            };

                            attacker.WeaponInfo.Add(weaponInfo);
                            RemoveCharacterUI();
                        }
                    }


                    attacker.money += targetPlayer.money;
                    targetPlayer.playerAnimator.applyRootMotion = false;


                    for (int i = playerList.Count - 1; i >= 0; i--)
                    {
                        Entity player = playerList[i];
                        if (player == playerToBeRemoved)
                        {
                            playerList.RemoveAt(i);
                            break;
                        }
                    }

                    if (targetPlayerIndex < activePlayer)
                    {
                        activePlayer = activePlayer - 1;

                    }

                    RemoveCharacterUI();




                }
            }
        }
        else
        {

            if (targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Pistol" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "AK47" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "M15" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Sniper" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Shotgun")
            {
                Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;

                targetPlayer.playerAnimator.SetBool("IsHitExplosion", true);
                targetPlayer.playerAnimator.CrossFade("ExplosionHurt", 0.05f);


                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);

                yield return new WaitForSeconds(4f);

                targetPlayer.playerAnimator.SetBool("IsHitExplosion", false);
                targetPlayer.playerAnimator.SetBool("IsGettingUp", true);
                targetPlayer.playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }





                targetPlayer.playerAnimator.SetBool("IsGettingUp", false);
                targetPlayer.playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                }




                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                RemoveCharacterUI();
            }
            else if (targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Rocket Launcher" || targetPlayer.lives > 0 && CPUSelectedWeapon.name == "Grenade")
            {
                Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;
                // yield return new WaitForSeconds(0.3f);

                //  targetAnimator.applyRootMotion = true;


                targetPlayer.playerAnimator.SetBool("IsHitExplosion", true);
                targetPlayer.playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);


                yield return new WaitForSeconds(4f);

                targetPlayer.playerAnimator.SetBool("IsHitExplosion", false);
                targetPlayer.playerAnimator.SetBool("IsGettingUp", true);
                targetPlayer.playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }





                targetPlayer.playerAnimator.SetBool("IsGettingUp", false);
                targetPlayer.playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                }

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                RemoveCharacterUI();

            }
            else if (targetPlayer.lives <= 0)
            {
                targetPlayer.playerAnimator.applyRootMotion = true;
                targetPlayer.playerAnimator.SetBool("IsDead", true);
                targetPlayer.playerAnimator.CrossFade("CharDeath", 0.05f);

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);

                yield return new WaitForSeconds(2f);
                rollDiceText.text = targetPlayer.playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";

                Entity playerToBeRemoved = targetPlayer;

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);
                RemoveCharacterUI();

                if (targetPlayer.WeaponInfo.Count > 0 && attacker.WeaponInfo.Count > 0)
                {
                    for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                    {
                        Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];
                        Entity.WeaponInformation existingWeapon = attacker.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                        if (existingWeapon != null)
                        {


                            existingWeapon.bullets += selectedWeapon.bullets;
                            RemoveCharacterUI();

                        }
                    }
                }
                else if (attacker.WeaponInfo.Count == 0 && targetPlayer.WeaponInfo.Count > 0)
                {
                    for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                    {

                        Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];



                        Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                        {
                            name = selectedWeapon.name,
                            range = selectedWeapon.range,
                            damage = selectedWeapon.damage,
                            bullets = selectedWeapon.bullets
                        };

                        attacker.WeaponInfo.Add(weaponInfo);
                        RemoveCharacterUI();
                    }
                }


                attacker.money += targetPlayer.money;
                targetPlayer.playerAnimator.applyRootMotion = false;


                for (int i = playerList.Count - 1; i >= 0; i--)
                {
                    Entity player = playerList[i];
                    if (player == playerToBeRemoved)
                    {
                        playerList.RemoveAt(i);
                        break;
                    }
                }

                if (targetPlayerIndex < activePlayer)
                {
                    activePlayer = activePlayer - 1;

                }

                RemoveCharacterUI();




            }
        }

       



        /*  Quaternion startStraightRotation = targetPlayer.characterObject.transform.localRotation;
          Quaternion endStraightRotation = Quaternion.Euler(0, 90, 0);
          float StraightT = 0;
          while (StraightT < 1)
          {
              StraightT += Time.deltaTime * turnSpeed;
              targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startStraightRotation, endStraightRotation, StraightT);

          }
          */





        attacker.playerAnimator.SetBool("IsActuallyAttackingLMAO", false);
        attacker.playerAnimator.CrossFade("Idle", 1.2f);

        if (CPUSelectedWeapon.name == "Pistol" && attacker.position < targetPlayer.position ||CPUSelectedWeapon.name == "Pistol" && attacker.position > targetPlayer.position)
        {
            attacker.Pistol.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                pistolPlayerFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                pistolPlayerOneFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                pistolPlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                pistolPlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                pistolPlayerFourFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                pistolPlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
                pistolPlayerFiveFlash.gameObject.SetActive(false);
            }
        }
        else if (CPUSelectedWeapon.name == "AK47" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "AK47" && attacker.position > targetPlayer.position)
        {
            attacker.Ak47.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                Ak47PlayerFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Ak47PlayerOneFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Ak47PlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Ak47PlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Ak47PlayerFourFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Ak47PlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
                Ak47PlayerFiveFlash.gameObject.SetActive(false);
            }

        }
        else if (CPUSelectedWeapon.name == "M15" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "M15" && attacker.position > targetPlayer.position)
        {
            attacker.M15.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                M15PlayerFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                M15PlayerOneFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                M15PlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                M15PlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                M15PlayerFourFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                M15PlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
                M15PlayerFiveFlash.gameObject.SetActive(false);
            }
        }
        else if (CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Rocket Launcher" && attacker.position > targetPlayer.position)
        {
            attacker.RocketLauncher.gameObject.SetActive(false);
            attacker.RocketLauncherHead.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character" && RocketLauncherFlash != null)
            {
                RocketLauncherFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne" && RocketLauncherOneFlash != null)
            {
                RocketLauncherOneFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo" && RocketLauncherTwoFlash != null)
            {
                RocketLauncherTwoFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree" && RocketLauncherThreeFlash != null)
            {
                RocketLauncherThreeFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour" && RocketLauncherFourFlash != null)
            {
                RocketLauncherFourFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive" && RocketLauncherFiveFlash != null)
            {
                RocketLauncherFiveFlash.Stop();
                RocketLauncherAudio.Stop();
                RocketLauncherFiveFlash.gameObject.SetActive(false);
            }
        }
        else if (CPUSelectedWeapon.name == "Sniper" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Sniper" && attacker.position > targetPlayer.position)
        {
            attacker.SniperRifle.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                SniperRifleFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                SniperRifleOneFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                SniperRifleTwoFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                SniperRifleThreeFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                SniperRifleFourFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                SniperRifleFiveFlash.Stop();
                GunShotsAudio.Stop();
                SniperRifleFlash.gameObject.SetActive(false);
            }
        }
        else if (CPUSelectedWeapon.name == "Grenade" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Grenade" && attacker.position > targetPlayer.position)
        {
            attacker.Grenade.gameObject.SetActive(false);
            ExplosionAudio.Stop();
        }
        else if (CPUSelectedWeapon.name == "Shotgun" && attacker.position < targetPlayer.position || CPUSelectedWeapon.name == "Shotgun" && attacker.position > targetPlayer.position)
        {
            attacker.Shotgun.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                ShotgunPlayerFlash.Stop();
                GunShotsAudio.Stop();
                ShotgunPlayerFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                ShotgunPlayerOneFlash.Stop();
                GunShotsAudio.Stop();
                ShotgunPlayerOneFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                ShotgunPlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
                ShotgunPlayerTwoFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                ShotgunPlayerThreeFlash.Play();
                GunShotsAudio.Stop();
                ShotgunPlayerThreeFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                ShotgunPlayerFourFlash.Stop();
                GunShotsAudio.Stop();
                ShotgunPlayerFourFlash.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                ShotgunPlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
                ShotgunPlayerFiveFlash.gameObject.SetActive(false);
            }


        }

        
       
        NPCMovementSpeedWalk();
        CrowdScreamingAudio.Stop();
        CrowdScreamingAudio.volume = 0.201f;


        //

        yield return new WaitForSeconds(0.5f);


        targetPlayer.playerAnimator.applyRootMotion = true;

        if (targetPlayer.position > attacker.position && targetPlayer.position <= 20 && targetPlayer.lives > 0)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);


            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 20 && targetPlayer.position <= 30 && targetPlayer.lives > 0)
        {

            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 30 && targetPlayer.position <= 49 && targetPlayer.lives > 0)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 49 && targetPlayer.position <= 58 && targetPlayer.lives > 0)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", true);
            targetPlayer.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }

        if(targetPlayer.lives > 0)
        {
            targetPlayer.playerAnimator.SetBool("IsTurning", false);
            targetPlayer.playerAnimator.CrossFade("Idle", 0.08f);
        }

        StartCoroutine(BlurEffects());
        ResetCameraZoom();

        yield return new WaitForSeconds(1f);

        //play fall animation 
        cameraController.target = attacker.playerObject.transform;

        for (int i = 0; i <= currentRoute.childNodeList.Count; i++)
        {
            Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];
            currentIntensity = 0f;
            Color finalColor = Color.red * currentIntensity;
            changeNodeTexture.SetColor("_EmissionColor", finalColor);
        }






        playerInrangeBtns[0].gameObject.SetActive(false);
        playerInrangeBtns[1].gameObject.SetActive(false);
        playerInrangeBtns[2].gameObject.SetActive(false);
        playerInrangeBtns[3].gameObject.SetActive(false);
        playerInrangeBtns[4].gameObject.SetActive(false);
        playerInrangeBtns[5].gameObject.SetActive(false);




        weaponOneRangeText.gameObject.SetActive(false);
        weaponTwoRangeText.gameObject.SetActive(false);
        weaponThreeRangeText.gameObject.SetActive(false);
        weaponFourRangeText.gameObject.SetActive(false);
        weaponFiveRangeText.gameObject.SetActive(false);
        weaponSixRangeText.gameObject.SetActive(false);
        weaponSevenRangeText.gameObject.SetActive(false);
        BackAttackPanelButton.gameObject.SetActive(true);


        attacker.playerAnimator.applyRootMotion = true;

        if (attacker.position < 20 && attacker.position > targetPlayer.position)
        {


            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);



            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 90, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          
        }
        else if (attacker.position > 20 && attacker.position <= 30 && attacker.position > targetPlayer.position)
        {

            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);




            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 0, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          
        }
        else if (attacker.position > 30 && attacker.position <= 49 && attacker.position > targetPlayer.position)
        {


            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);


            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 270, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
           
        }
        else if (attacker.position > 49 && attacker.position <= 58 && attacker.position > targetPlayer.position)
        {


            attacker.playerAnimator.SetBool("IsTurning", true);
            attacker.playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);


            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 180, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          
        }



        attacker.playerAnimator.SetBool("IsTurning", false);
        attacker.playerAnimator.CrossFade("Idle", 0.08f);

        yield return new WaitForSeconds(0.1f);


        GameObject pistol = attacker.Pistol;
        pistol.gameObject.SetActive(false);

        GameObject sniper = attacker.SniperRifle;
        sniper.gameObject.SetActive(false);

        GameObject grenade = attacker.Grenade;
        grenade.gameObject.SetActive(false);

        attacker.playerAnimator.SetBool("IsAttacking", false);
        attacker.playerAnimator.CrossFade("Idle", 0.02f);




        GameObject ak47 = attacker.Ak47;
        ak47.gameObject.SetActive(false);

        GameObject shotgun = attacker.Shotgun;
        shotgun.gameObject.SetActive(false);

        GameObject m15 = attacker.M15;
        m15.gameObject.SetActive(false);

        GameObject rocketLauncher = attacker.RocketLauncher;
        rocketLauncher.gameObject.SetActive(false);




        attacker.playerAnimator.applyRootMotion = false;
        // bool isAttacking = attacker.isAttacking = false;

        targetPlayer.playerAnimator.applyRootMotion = false;

        isUsingShieldBool = false;
        isNotUsingShieldBool = false;

        StartCoroutine(BlurEffects());

        /*
          yield return new WaitForSeconds(1f);


          yield return new WaitForSeconds(2f);
          rollDiceText.text = (playerList[activePlayer].playerName + "'s turn ended.");
          yield return new WaitForSeconds(2f);
          rollDiceText.text = "";
          yield return new WaitForSeconds(3f);

          attackButton.gameObject.SetActive(false);
          rollDiceButton.gameObject.SetActive(false);

          isMoving = false;
          */
        if (CPUSelectedWeapon.bullets <= 0)
        {
            attacker.WeaponInfo.Remove(CPUSelectedWeapon);
        }

        // attacker.WeaponInfo.Remove(CPUSelectedWeapon);

        if(attacker.WeaponInfo == null)
        {
            playerList[activePlayer % playerList.Count].hasWeapon = false;
        }
        //  playerList[activePlayer].hasWeapon = false;

        if(playerList.Count == 1)
        {
            StartCoroutine(playerWonFunction(attacker));
        }
        else
        {
            isMoving = false;
        }


      

      

    }

    public void VoidForCPUToHumanEndTurn()
    {
        StartCoroutine(CpuToHumanEndTurn());
    }

    public IEnumerator CpuToHumanEndTurn()
    {
        yield return new WaitForSeconds(0f);

       

        
        if (playerList[activePlayer % playerList.Count].WeaponInfo.Count == 0)
        {
            playerList[activePlayer % playerList.Count].hasWeapon = false;
        }

        if (playerList[activePlayer % playerList.Count].position == 0 || playerList[activePlayer % playerList.Count].position <= 20)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 21 && playerList[activePlayer % playerList.Count].position <= 30)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 31 && playerList[activePlayer % playerList.Count].position <= 49)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 50 && playerList[activePlayer % playerList.Count].position <= 58)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }


        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.CPU)
        {
            //  cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            if(playerList[(activePlayer - 1 + playerList.Count) % playerList.Count].playerType == PlayerTypes.CPU)
            {
                StartCoroutine(SwitchPlayerCameraMove());
            }

            int randomizeIfAttackOrMove = Random.Range(0, 2);

            if (playerList[activePlayer % playerList.Count].hasWeapon == true && playerList[activePlayer % playerList.Count].WeaponInfo.Any(weapon => weapon.name != "Shield"))
            {
                if(randomizeIfAttackOrMove == 0)
                {
                    var availableWeapons = playerList[activePlayer % playerList.Count].WeaponInfo
                        .Where(weapon => weapon.name != "Shield")
                        .ToList();

                    Entity attacker = playerList[activePlayer % playerList.Count];
                    int CPUWeaponToAttack = Random.Range(0, availableWeapons.Count);
                    WeaponInformation CPUSelectedWeapon = playerList[activePlayer % playerList.Count].WeaponInfo[CPUWeaponToAttack];

                    //
                   // int choosePlayerToAttack = Random.Range(0, playerList.Count);
                  //  Entity playerCPUSelected = playerList[choosePlayerToAttack];

                    for (int i = 0; i < playerList.Count; i++)
                    {
                        Entity player = playerList[i % playerList.Count];
                        if (player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) <= CPUSelectedWeapon.range && CPUSelectedWeapon.bullets > 0 && CPUSelectedWeapon != null)
                        {

                            int currentWeaponIndex = i % playerList.Count;

                            if(CPUSelectedWeapon.name == "GodEye")
                            {
                                StartCoroutine(GodEyeAttackAnimationOrder(attacker));
                            }
                            else
                            {
                                StartCoroutine(CPUCombat(currentWeaponIndex, CPUSelectedWeapon));
                            }

                           


                        }
                        else if ((player != attacker && Vector3.Distance(attacker.playerObject.transform.position, player.playerObject.transform.position) > CPUSelectedWeapon.range) || CPUSelectedWeapon.bullets <= 0 || CPUSelectedWeapon == null )
                        {

                            StartCoroutine(MoveCPU());
                            playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                        }
                        





                    }
                   
                }
                else if(randomizeIfAttackOrMove == 1)
                {
                   
                    StartCoroutine(MoveCPU());
                   // playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                }

              

            }
            else if (playerList[activePlayer % playerList.Count].hasWeapon == false)
            {
                StartCoroutine(MoveCPU());
               // playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

            }
          
        }
    }

   

    public void DepthOfFieldClear()
    {
        StartCoroutine(DepthofFieldClearIenumerator());
    }
    public IEnumerator DepthofFieldClearIenumerator()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 0.7f;
            float targetFocalLength = 14f;
            float targetFocusDistance = 1.3f;
            float transitionDuration = 0.3f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }

         
    }

    public void DepthOfFieldBlury()
    {
        StartCoroutine(DepthOfFieldBluryIenumerator());
    }

    public IEnumerator DepthOfFieldBluryIenumerator()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 4.8f;
            float targetFocalLength = 65f;
            float targetFocusDistance = 2.5f;
            float transitionDuration = 0.3f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }
    }

    public void DepthofFieldforDice()
    {
        StartCoroutine(DepthOfFieldforDiceIEnumerator());
    }

    public void DepthOfFieldForAttackPlayer()
    {
        StartCoroutine(DepthOfFieldForAttackPlayerEnumerator());
    }

    public void DepthOfFieldShootingPlayer()
    {
        StartCoroutine(DepthOfFieldShootingPlayerEnumerator());
    }

    public IEnumerator DepthOfFieldShootingPlayerEnumerator()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 5.4f;
            float targetFocalLength = 70f;
            float targetFocusDistance = 1.5f;
            float transitionDuration = 0.15f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }
    }

    public IEnumerator DepthOfFieldForAttackPlayerEnumerator()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 6.3f;
            float targetFocalLength = 74f;
            float targetFocusDistance = 1.4f;
            float transitionDuration = 0.3f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }
    }

    public IEnumerator DepthOfFieldforDiceIEnumerator()
    {
        if(postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            float elapsedTime = 0f;
            float startAperture = depthOfField.aperture.value;
            float startFocalLength = depthOfField.focalLength.value;
            float startfocusDistance = depthOfField.focusDistance.value;

            float targetAperture = 9f;
            float targetFocalLength = 62f;
            float targetFocusDistance = 0.8f;
            float transitionDuration = 0.3f;


            while (elapsedTime < transitionDuration)
            {
                elapsedTime += Time.deltaTime;
                float t = Mathf.Clamp01(elapsedTime / transitionDuration);

                // Interpolate between the current values and the target values over time
                depthOfField.aperture.value = Mathf.Lerp(startAperture, targetAperture, t);
                depthOfField.focalLength.value = Mathf.Lerp(startFocalLength, targetFocalLength, t);
                depthOfField.focusDistance.value = Mathf.Lerp(startfocusDistance, targetFocusDistance, t);

                yield return null;
            }

            // Ensure the final values are exactly the target values
            depthOfField.aperture.value = targetAperture;
            depthOfField.focalLength.value = targetFocalLength;
        }
       

    }

   

    public IEnumerator BuyButtonClickedCoroutine()
    {

        DepthOfFieldClear();


        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            CharacterUIPanel.gameObject.SetActive(false);
            AllCharacterPanelsHolder.gameObject.SetActive(false);
            SecondCharacterUIPanel.gameObject.SetActive(false);
            StartCoroutine(ShopManager());
            yield return new WaitForSeconds(0f);
        }
    }

    public IEnumerator CloseWeaponShop()
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        weaponShopPanel.gameObject.SetActive(false);
        yield return new WaitForSeconds(1f);
        ResetCameraZoom();
        StartCoroutine(BlurEffects());
        yield return new WaitForSeconds(1f);
        cameraController.target = currentPlayer.playerObject.transform;
        yield return new WaitForSeconds(1f);
        CharacterUIPanel.gameObject.SetActive(true);
        AllCharacterPanelsHolder.gameObject.SetActive(true);
        SecondCharacterUIPanel.gameObject.SetActive(true);
    }
    public void RocketLauncherLights()
    {
        
            RocketLauncherFlash.gameObject.SetActive(false);
       
            RocketLauncherOneFlash.gameObject.SetActive(false);
        
            RocketLauncherTwoFlash.gameObject.SetActive(false);
        
            RocketLauncherThreeFlash.gameObject.SetActive(false);
        
            RocketLauncherFourFlash.gameObject.SetActive(false);
        
        
            RocketLauncherFiveFlash.gameObject.SetActive(false);
        
    }

    public void RocketLauncherLightsCheckNullFalse()
    {
        Entity attacker = playerList[activePlayer % playerList.Count];
        if (attacker.characterObject.name == "character")
        {
            RocketLauncherFlash.gameObject.SetActive(false);

        }
        else if (attacker.characterObject.name == "characterOne" )
        {
            RocketLauncherOneFlash.gameObject.SetActive(false);
        }
        else if (attacker.characterObject.name == "characterTwo")
        {
            RocketLauncherTwoFlash.gameObject.SetActive(false);

        }
        else if (attacker.characterObject.name == "characterThree" )
        {
            RocketLauncherThreeFlash.gameObject.SetActive(false);


        }
        else if (attacker.characterObject.name == "characterFour" )
        {
            RocketLauncherFourFlash.gameObject.SetActive(false);
        }
        else if (attacker.characterObject.name == "characterFive")
        {
            RocketLauncherFiveFlash.gameObject.SetActive(false);


        }
    }

    public void RocketLauncherLightsCheckNullTrue()
    {
        Entity attacker = playerList[activePlayer % playerList.Count];
        if (attacker.characterObject.name == "character")
        {
            RocketLauncherFlash.gameObject.SetActive(true);

        }
        else if (attacker.characterObject.name == "characterOne")
        {
            RocketLauncherOneFlash.gameObject.SetActive(true);
        }
        else if (attacker.characterObject.name == "characterTwo" )
        {
            RocketLauncherTwoFlash.gameObject.SetActive(true);

        }
        else if (attacker.characterObject.name == "characterThree")
        {
            RocketLauncherThreeFlash.gameObject.SetActive(true);


        }
        else if (attacker.characterObject.name == "characterFour" )
        {
            RocketLauncherFourFlash.gameObject.SetActive(true);
        }
        else if (attacker.characterObject.name == "characterFive" )
        {
            RocketLauncherFiveFlash.gameObject.SetActive(true);


        }
    }
    public IEnumerator DisableWeapons()
    {
        yield return new WaitForSeconds(0f);

        for (int i = 0; i < playerList.Count; i++)
        {
            
            Entity player = playerList[i];
            if (player != null)
            {
                GameObject sniper = player.SniperRifle;              
                GameObject pistol = player.Pistol;           
                GameObject grenade = player.Grenade;
                GameObject ak47 = player.Ak47;            
                GameObject m15 = player.M15;               
                GameObject shotgun = player.Shotgun;              
                GameObject rocketLauncher = player.RocketLauncher;
                GameObject GodEyeSwitch = player.GodEyeswitch;


               // RobberyCardDecision.gameObject.SetActive(false);
                CharacterInCar.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);

                ChaseScenePanel.gameObject.SetActive(false);
                ChaseScenePanelVerdict.gameObject.SetActive(false);

                pistolPlayerFlash.gameObject.SetActive(false);
                pistolPlayerOneFlash.gameObject.SetActive(false);
                pistolPlayerTwoFlash.gameObject.SetActive(false);
                pistolPlayerThreeFlash.gameObject.SetActive(false);
                pistolPlayerFourFlash.gameObject.SetActive(false);
                pistolPlayerFiveFlash.gameObject.SetActive(false);


                Ak47PlayerFlash.gameObject.SetActive(false);
                Ak47PlayerOneFlash.gameObject.SetActive(false);
                Ak47PlayerTwoFlash.gameObject.SetActive(false);
                Ak47PlayerThreeFlash.gameObject.SetActive(false);
                Ak47PlayerFourFlash.gameObject.SetActive(false);
                Ak47PlayerFiveFlash.gameObject.SetActive(false);

                M15PlayerFlash.gameObject.SetActive(false);
                M15PlayerOneFlash.gameObject.SetActive(false);
                M15PlayerTwoFlash.gameObject.SetActive(false);
                M15PlayerThreeFlash.gameObject.SetActive(false);
                M15PlayerFourFlash.gameObject.SetActive(false);
                M15PlayerFiveFlash.gameObject.SetActive(false);

                SniperRifleFlash.gameObject.SetActive(false);
                SniperRifleOneFlash.gameObject.SetActive(false);
                SniperRifleTwoFlash.gameObject.SetActive(false);
                SniperRifleThreeFlash.gameObject.SetActive(false);
                SniperRifleFourFlash.gameObject.SetActive(false);
                SniperRifleFiveFlash.gameObject.SetActive(false);


                ShotgunPlayerFlash.gameObject.SetActive(false);
                ShotgunPlayerOneFlash.gameObject.SetActive(false);
                ShotgunPlayerTwoFlash.gameObject.SetActive(false);
                ShotgunPlayerThreeFlash.gameObject.SetActive(false);
                ShotgunPlayerFourFlash.gameObject.SetActive(false);
                ShotgunPlayerFiveFlash.gameObject.SetActive(false);


                Soldiers[0].gameObject.SetActive(false);
                Soldiers[1].gameObject.SetActive(false);
                Soldiers[2].gameObject.SetActive(false);
                Soldiers[3].gameObject.SetActive(false);
                Soldiers[4].gameObject.SetActive(false);
                Soldiers[5].gameObject.SetActive(false);
                Soldiers[6].gameObject.SetActive(false);
                Soldiers[7].gameObject.SetActive(false);


                BulletShieldImpact.gameObject.SetActive(false);
                BulletShieldImpactOne.gameObject.SetActive(false);
                BulletShieldImpactTwo.gameObject.SetActive(false);
                BulletShieldImpactThree.gameObject.SetActive(false);
                BulletShieldImpactThree.gameObject.SetActive(false);
                BulletShieldImpactFour.gameObject.SetActive(false);
                BulletShieldImpactFive.gameObject.SetActive(false);


                RocketLauncherLights();

                if(PlayerHurtExplosion != null)
                {
                    PlayerHurtExplosion.gameObject.SetActive(false);
                }
                if(PlayerHurtExplosionOne != null)
                {
                    PlayerHurtExplosionOne.gameObject.SetActive(false);
                }
                if(PlayerHurtExplosionTwo != null)
                {
                    PlayerHurtExplosionTwo.gameObject.SetActive(false);
                }
                if(PlayerHurtExplosionThree != null)
                {
                    PlayerHurtExplosionThree.gameObject.SetActive(false);
                }
                if(PlayerHurtExplosionFour != null)
                {
                    PlayerHurtExplosionFour.gameObject.SetActive(false);
                }
                if(PlayerHurtExplosionFive != null)
                {
                    PlayerHurtExplosionFive.gameObject.SetActive(false);
                }

                CharacterInCar.gameObject.SetActive(false);
                characterInCarOne.gameObject.SetActive(false);
                CharacterInCarTwo.gameObject.SetActive(false);
                CharacterInCarThree.gameObject.SetActive(false);
                CharacterInCarFour.gameObject.SetActive(false);
                CharacterInCarFive.gameObject.SetActive(false);





                GrenadeTrapExplosion.gameObject.SetActive(false);
                    GrenadeTrapExplosionOne.gameObject.SetActive(false);
                    GrenadeTrapExplosionTwo.gameObject.SetActive(false);
                    GrenadeTrapExplosionThree.gameObject.SetActive(false);
                

                FireWorksFlash.gameObject.SetActive(false);
                FireWorksFlash.Stop();

               // diceLightHolder.gameObject.SetActive(false);
              


                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);

                /*
                 if (postProcessVolume.profile.TryGetSettings(out depthOfField))
                 {


                     depthOfField.focusDistance.value = 2.5f; // Adjust as needed
                     depthOfField.aperture.value = 4.8f; // Adjust as needed
                     depthOfField.focalLength.value = 60f; // Adjust as needed

                 }
                 */

                if (playerList[0 % playerList.Count] != null)
                {
                    checkWeaponsPanelTexts[0].text = playerList[0 % playerList.Count].playerName;
                    checkWeaponsPanelTexts[1].text = "" + playerList[0 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTexts[2].text = "$" + playerList[0 % playerList.Count].money.ToString();
                }
                if (playerList[1 % playerList.Count] != null)
                {
                    checkWeaponsPanelTextsOne[0].text = playerList[1 % playerList.Count].playerName;
                    checkWeaponsPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTextsOne[2].text = "$" + playerList[1 % playerList.Count].money.ToString();
                }
                if (playerList[2 % playerList.Count] != null)
                {
                    checkWeaponsPanelTextsTwo[0].text = playerList[2 % playerList.Count].playerName;
                    checkWeaponsPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTextsTwo[2].text = "$" + playerList[2 % playerList.Count].money.ToString();
                }
                if (playerList[3 % playerList.Count] != null)
                {
                    checkWeaponsPanelTextsThree[0].text = playerList[3 % playerList.Count].playerName;
                    checkWeaponsPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTextsThree[2].text = "$" + playerList[3 % playerList.Count].money.ToString();
                }
                if (playerList[4 % playerList.Count] != null)
                {
                    checkWeaponsPanelTextsFour[0].text = playerList[4 % playerList.Count].playerName;
                    checkWeaponsPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTextsFour[2].text = "$" + playerList[4 % playerList.Count].money.ToString();
                }
                if (playerList[5 % playerList.Count] != null)
                {
                    checkWeaponsPanelTextsFive[0].text = playerList[5 % playerList.Count].playerName;
                    checkWeaponsPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].lives.ToString();
                    checkWeaponsPanelTextsFive[2].text = "$" + playerList[5 % playerList.Count].money.ToString();
                }


                UseShield.gameObject.SetActive(false);
                DontUseShield.gameObject.SetActive(false);

                GodEyeLaser.gameObject.SetActive(false);
                GodEyeLaserOne.gameObject.SetActive(false);
                GodEyeLaserTwo.gameObject.SetActive(false);
                GodEyeLaserThree.gameObject.SetActive(false);
                GodEyeLaserFour.gameObject.SetActive(false);
                GodEyeLaserFive.gameObject.SetActive(false);



               








                if (sniper != null)
                    sniper.SetActive(false);               
                if (pistol != null)
                    pistol.SetActive(false);               
                if (grenade != null)
                    grenade.SetActive(false);
                if (ak47 != null)
                    ak47.SetActive(false);
                if (shotgun != null)
                    shotgun.SetActive(false);
                if (m15 != null)
                    m15.SetActive(false);
                if (rocketLauncher != null)
                    rocketLauncher.SetActive(false);
                if (GodEyeSwitch != null)
                    GodEyeSwitch.SetActive(false);
            }





        }


        for (int i = 0; i <  playerList.Count; i++)
        {


            characterPanelsHolder[i].gameObject.SetActive(true);
          
           
            //

        }


        for (int i = playerList.Count; i < characterPanelsHolder.Length; i++)
        {


            characterPanelsHolder[i].gameObject.SetActive(false);
            
            //


           


        }

       

        characterHasWonPanel.gameObject.SetActive(false);

       


    }

    public void RemoveCharacterUI()
    {
        for (int i = 0; i < playerList.Count; i++)
        {


            characterPanelsHolder[i].gameObject.SetActive(true);

        }


        for (int i = playerList.Count; i < characterPanelsHolder.Length; i++)
        {


            characterPanelsHolder[i].gameObject.SetActive(false);





        }

        if (playerList[0 % playerList.Count] != null)
        {
            checkWeaponsPanelTexts[0].text = playerList[0 % playerList.Count].playerName;
            checkWeaponsPanelTexts[1].text = "" + playerList[0 % playerList.Count].lives.ToString();
            checkWeaponsPanelTexts[2].text = "$" + playerList[0 % playerList.Count].money.ToString();
        }
        if (playerList[1 % playerList.Count] != null)
        {
            checkWeaponsPanelTextsOne[0].text = playerList[1 % playerList.Count].playerName;
            checkWeaponsPanelTextsOne[1].text = "" + playerList[1 % playerList.Count].lives.ToString();
            checkWeaponsPanelTextsOne[2].text = "$" + playerList[1 % playerList.Count].money.ToString();
        }
        if (playerList[2 % playerList.Count] != null)
        {
            checkWeaponsPanelTextsTwo[0].text = playerList[2 % playerList.Count].playerName;
            checkWeaponsPanelTextsTwo[1].text = "" + playerList[2 % playerList.Count].lives.ToString();
            checkWeaponsPanelTextsTwo[2].text = "$" + playerList[2 % playerList.Count].money.ToString();
        }
        if (playerList[3 % playerList.Count] != null)
        {
            checkWeaponsPanelTextsThree[0].text = playerList[3 % playerList.Count].playerName;
            checkWeaponsPanelTextsThree[1].text = "" + playerList[3 % playerList.Count].lives.ToString();
            checkWeaponsPanelTextsThree[2].text = "$" + playerList[3 % playerList.Count].money.ToString();
        }
        if (playerList[4 % playerList.Count] != null)
        {
            checkWeaponsPanelTextsFour[0].text = playerList[4 % playerList.Count].playerName;
            checkWeaponsPanelTextsFour[1].text = "" + playerList[4 % playerList.Count].lives.ToString();
            checkWeaponsPanelTextsFour[2].text = "$" + playerList[4 % playerList.Count].money.ToString();
        }
        if (playerList[5 % playerList.Count] != null)
        {
            checkWeaponsPanelTextsFive[0].text = playerList[5 % playerList.Count].playerName;
            checkWeaponsPanelTextsFive[1].text = "" + playerList[5 % playerList.Count].lives.ToString();
            checkWeaponsPanelTextsFive[2].text = "$" + playerList[5 % playerList.Count].money.ToString();
        }
    }
    
 void SetCamera(Transform target, float smoothSpeed, float distance, float offset, float height)
 {
    cameraController.smoothSpeed = smoothSpeed;
    cameraController.distance = distance;
    cameraController.offset = offset;
    cameraController.height = height;
    cameraController.target = target;
 }

 void SwitchPlayer()
 {
   if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN && isPreviousPlayerCPU == false)
   {
            activePlayer = (activePlayer + 1) % playerList.Count;
   }
   
    cameraController.smoothSpeed = 1f;
    cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
        WindCameraSwitchAudio.Stop();
        cameraController.distance = 2.8f;
    cameraController.offset = -2.9f;
 }

   void switchPlayerAfterTrapVoid()
   {
        cameraController.smoothSpeed = 1f;
        cameraController.target = playerList[(activePlayer + 1) % playerList.Count].playerObject.transform;
        WindCameraSwitchAudio.Stop();
        cameraController.distance = 2.8f;
        cameraController.offset = -2.9f;
   }



 void SwitchToJail()
 {
        cameraController.smoothSpeed = 3.5f;
        cameraController.target = JailBuilding.transform;
        WindCameraSwitchAudio.Stop();
        cameraController.distance = 2.8f;
        cameraController.offset = -2.9f;
 }

  void SwitchToHumanFromJail()
  {
        cameraController.smoothSpeed = 1f;
        cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
        WindCameraSwitchAudio.Stop();
        cameraController.distance = 2.8f;
        cameraController.offset = -2.9f;
  }


 
    public IEnumerator switchPlayerAfterTrap()
    {
        Entity RealActivePlayer = playerList[activePlayer % playerList.Count];
        Entity RealNextActivePlayer = playerList[(activePlayer + 1) % playerList.Count];




        if (Vector3.Distance(RealActivePlayer.playerObject.transform.position, RealNextActivePlayer.playerObject.transform.position) >= 5)
        {
            switchingPlayer = true;


            CameraSwitchingPlayers();



            yield return new WaitForSeconds(0.5f);

            int activePlayerPosition = playerList[activePlayer % playerList.Count].position;
            int nextPlayerPosition = playerList[(activePlayer + 1) % playerList.Count].position;

            
                activePlayerPosition = playerList[activePlayer % playerList.Count].position;
                nextPlayerPosition = playerList[(activePlayer + 1) % playerList.Count].position;
            
            






            if ((activePlayerPosition >= 49 && nextPlayerPosition <= 20))
            {
                Debug.Log("Case 1: Transition involving positions >= 49 or <= 20");
                SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                switchPlayerAfterTrapVoid();
            }
            else if (activePlayerPosition >= 50 && (nextPlayerPosition <= 30 && nextPlayerPosition >= 20))
            {
                Debug.Log("Case 2: Transition involving positions >= 49 and next player between 20 and 30");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(1.2f);
                SetCamera(CameraMovePoints[2].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                yield return new WaitForSeconds(1f);
                switchPlayerAfterTrapVoid();
            }
            else if (activePlayerPosition >= 50 && (nextPlayerPosition <= 49 && nextPlayerPosition >= 30))
            {
                Debug.Log("Case 3: Transition involving positions >= 49 and next player between 30 and 49");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                switchPlayerAfterTrapVoid();
            }
            else if ((activePlayerPosition >= 31 && activePlayerPosition <= 50) && (nextPlayerPosition <= 20))
            {
                Debug.Log("Case 4: Transition involving positions between 30 and 49 for active player and <= 20 for next player");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }
            else if ((activePlayerPosition >= 31 && activePlayerPosition <= 50) && (nextPlayerPosition >= 20 && nextPlayerPosition <= 30))
            {
                Debug.Log("Case 5: Transition involving positions between 30 and 49 for active player and between 20 and 30 for next player");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }
            else if ((activePlayerPosition >= 21 && activePlayerPosition <= 31) && (nextPlayerPosition < 20))
            {
                Debug.Log("Case 6: Transition involving positions between 20 and 30 for active player and < 20 for next player");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }

            // inverse position conditions
            else if ((nextPlayerPosition >= 49 && activePlayerPosition <= 20))
            {
                Debug.Log("Inverse Case 1: Transition involving next player positions >= 49 or active player positions <= 20");
                SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                switchPlayerAfterTrapVoid();
            }
            else if (nextPlayerPosition >= 49 && (activePlayerPosition <= 30 && activePlayerPosition >= 20))
            {
                Debug.Log("Inverse Case 2: Transition involving next player positions >= 49 and active player between 20 and 30");
                SetCamera(CameraMovePoints[2].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(1.2f);
                SetCamera(CameraMovePoints[3].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                yield return new WaitForSeconds(1f);
                switchPlayerAfterTrapVoid();
            }
            else if (nextPlayerPosition >= 49 && (activePlayerPosition <= 49 && activePlayerPosition >= 30))
            {
                Debug.Log("Inverse Case 3: Transition involving next player positions >= 49 and active player between 30 and 49");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -1f, -1f, 0.7f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                switchPlayerAfterTrapVoid();
            }
            else if ((nextPlayerPosition >= 30 && nextPlayerPosition <= 49) && (activePlayerPosition <= 20))
            {
                Debug.Log("Inverse Case 4: Transition involving next player between 30 and 49 and active player <= 20");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 1f, 1f, 0.7f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SetCamera(CameraMovePoints[2].transform, 1.4f, -1.8f, 1.9f, 0.7f);
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }
            else if ((nextPlayerPosition >= 30 && nextPlayerPosition <= 49) && (activePlayerPosition >= 20 && activePlayerPosition <= 30))
            {
                Debug.Log("Inverse Case 5: Transition involving next player between 30 and 49 and active player between 20 and 30");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }
            else if ((nextPlayerPosition >= 20 && nextPlayerPosition <= 30) && (activePlayerPosition < 20))
            {
                Debug.Log("Inverse Case 6: Transition involving next player between 20 and 30 and active player < 20");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                switchPlayerAfterTrapVoid();
            }
            else
            {
                Debug.Log("Default case: Directly switch to next player");
                switchPlayerAfterTrapVoid();
            }




            // yield return new WaitForSeconds(1f);

            CameraMoveBackToNormal();

            yield return new WaitForSeconds(6f);

            ResetCameraZoom();

            yield return new WaitForSeconds(1f);

            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);

        }
        else if (Vector3.Distance(RealActivePlayer.playerObject.transform.position, RealNextActivePlayer.playerObject.transform.position) <= 5)
        {
            switchingPlayer = true;
            if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN && isPreviousPlayerCPU == false)
            {
                activePlayer = (activePlayer + 1) % playerList.Count;
               // state = States.ROLL_DICE;
            }



            CameraSlowDown();

            cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();

            yield return new WaitForSeconds(1f);

            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);

        }
    }

    public IEnumerator SwitchPlayerCameraMove()
    {
        Entity RealActivePlayer = playerList[activePlayer % playerList.Count];
        Entity RealNextActivePlayer = playerList[(activePlayer + 1) % playerList.Count];

        if(playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
        {
           RealActivePlayer = playerList[activePlayer % playerList.Count];
           RealNextActivePlayer = playerList[(activePlayer + 1) % playerList.Count];
        }
        else
        {
            RealActivePlayer = playerList[((activePlayer - 1) + playerList.Count) % playerList.Count];
            RealNextActivePlayer = playerList[(activePlayer) % playerList.Count];
        }



        if (Vector3.Distance(RealActivePlayer.playerObject.transform.position, RealNextActivePlayer.playerObject.transform.position) >= 5)
        {
            switchingPlayer = true;


            CameraSwitchingPlayers();
            
            

            yield return new WaitForSeconds(0.5f);

            int activePlayerPosition = playerList[activePlayer % playerList.Count].position;
            int nextPlayerPosition = playerList[(activePlayer + 1) % playerList.Count].position;

            if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
            {
                 activePlayerPosition = playerList[activePlayer % playerList.Count].position;
                 nextPlayerPosition = playerList[(activePlayer + 1) % playerList.Count].position;
            }
            else
            {
                 nextPlayerPosition = playerList[((activePlayer - 1) + playerList.Count) % playerList.Count].position;
                 activePlayerPosition = playerList[(activePlayer) % playerList.Count].position;
            }

          




            if ((activePlayerPosition >= 49 && nextPlayerPosition <= 20))
            {
                Debug.Log("Case 1: Transition involving positions >= 49 or <= 20");
                SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                SwitchPlayer();
            }
            else if (activePlayerPosition >= 50 && (nextPlayerPosition <= 30 && nextPlayerPosition >= 20))
            {
                Debug.Log("Case 2: Transition involving positions >= 49 and next player between 20 and 30");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(1.2f);
                SetCamera(CameraMovePoints[2].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                yield return new WaitForSeconds(1f);
                SwitchPlayer();
            }
            else if (activePlayerPosition >= 50 && (nextPlayerPosition <= 49 && nextPlayerPosition >= 30))
            {
                Debug.Log("Case 3: Transition involving positions >= 49 and next player between 30 and 49");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -2.8f, 2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                SwitchPlayer();
            }
            else if ((activePlayerPosition >= 31 && activePlayerPosition <= 50) && (nextPlayerPosition <= 20))
            {
                Debug.Log("Case 4: Transition involving positions between 30 and 49 for active player and <= 20 for next player");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }
            else if ((activePlayerPosition >= 31 && activePlayerPosition <= 50) && (nextPlayerPosition >= 20 && nextPlayerPosition <= 30))
            {
                Debug.Log("Case 5: Transition involving positions between 30 and 49 for active player and between 20 and 30 for next player");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }
            else if ((activePlayerPosition >= 21 && activePlayerPosition <= 31) && (nextPlayerPosition < 20))
            {
                Debug.Log("Case 6: Transition involving positions between 20 and 30 for active player and < 20 for next player");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }

            // inverse position conditions
            else if ((nextPlayerPosition >= 49 && activePlayerPosition <= 20))
            {
                Debug.Log("Inverse Case 1: Transition involving next player positions >= 49 or active player positions <= 20");
                SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                SwitchPlayer();
            }
            else if (nextPlayerPosition >= 49 && (activePlayerPosition <= 30 && activePlayerPosition >= 20))
            {
                Debug.Log("Inverse Case 2: Transition involving next player positions >= 49 and active player between 20 and 30");
                SetCamera(CameraMovePoints[2].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(1.2f);
                SetCamera(CameraMovePoints[3].transform, 1.8f, 2.8f, -2.9f, 0.95f);
                yield return new WaitForSeconds(1f);
                SwitchPlayer();
            }
            else if (nextPlayerPosition >= 49 && (activePlayerPosition <= 49 && activePlayerPosition >= 30))
            {
                Debug.Log("Inverse Case 3: Transition involving next player positions >= 49 and active player between 30 and 49");
                SetCamera(CameraMovePoints[3].transform, 1.8f, -1f, -1f, 0.7f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.5f);
                SwitchPlayer();
            }
            else if ((nextPlayerPosition >= 30 && nextPlayerPosition <= 49) && (activePlayerPosition <= 20))
            {
                Debug.Log("Inverse Case 4: Transition involving next player between 30 and 49 and active player <= 20");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 1f, 1f, 0.7f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SetCamera(CameraMovePoints[2].transform, 1.4f, -1.8f, 1.9f, 0.7f);
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }
            else if ((nextPlayerPosition >= 30 && nextPlayerPosition <= 49) && (activePlayerPosition >= 20 && activePlayerPosition <= 30))
            {
                Debug.Log("Inverse Case 5: Transition involving next player between 30 and 49 and active player between 20 and 30");
                SetCamera(CameraMovePoints[2].transform, 1.4f, -2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }
            else if ((nextPlayerPosition >= 20 && nextPlayerPosition <= 30) && (activePlayerPosition < 20))
            {
                Debug.Log("Inverse Case 6: Transition involving next player between 20 and 30 and active player < 20");
                SetCamera(CameraMovePoints[1].transform, 1.4f, 2f, 2f, 0.95f);
                WindCameraSwitchAudio.Play();
                yield return new WaitForSeconds(0.7f);
                SwitchPlayer();
            }
            else
            {
                Debug.Log("Default case: Directly switch to next player");
                SwitchPlayer();
            }




            // yield return new WaitForSeconds(1f);

            CameraMoveBackToNormal();

            yield return new WaitForSeconds(6f);

            ResetCameraZoom();

            yield return new WaitForSeconds(1f);

            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);
           
        }
        else if (Vector3.Distance(RealActivePlayer.playerObject.transform.position, RealNextActivePlayer.playerObject.transform.position) <= 5)
        {
            switchingPlayer = true;
            if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN && isPreviousPlayerCPU == false)
            {
                activePlayer = (activePlayer + 1) % playerList.Count;
               
            }
          


            CameraSlowDown();

            cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();

            yield return new WaitForSeconds(1f);

            characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", true);
            characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimations", 0.05f);

        }

    }


    public IEnumerator CameraSwitchFromJailToPlayer()
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];

        if (currentPlayer.position == 0 || currentPlayer.position <= 20)
        {
            CameraSlowDown();

            cameraController.target = currentPlayer.playerObject.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if (currentPlayer.position >= 21 && currentPlayer.position <= 30)
        {
            cameraController.target = currentPlayer.playerObject.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if (currentPlayer.position >= 31 && currentPlayer.position <= 49)
        {
            Debug.Log("Case 5: Transition involving positions between 30 and 49 for active player and jail");
            SetCamera(CameraMovePoints[2].transform, 1.4f, -1.8f, 1.9f, 0.7f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.7f);
            SwitchToHumanFromJail();
        }
        else if (currentPlayer.position >= 50 && currentPlayer.position <= 58)
        {
            Debug.Log("Case 1: Transition involving positions >= 49 or <= 20 to jail");
            SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.8f);
            SwitchToHumanFromJail();
        }

        for (int i = 0; i < charactersInJail.Length; i++)
        {
            charactersInJail[i].gameObject.SetActive(false);
        }
    }

    public IEnumerator CameraSwitchToJail()
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];

        if (currentPlayer.characterObject.name == "character")
        {
            charactersInJail[0].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterOne")
        {
            charactersInJail[1].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterTwo")
        {
            charactersInJail[2].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterThree")
        {
            charactersInJail[3].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterFour")
        {
            charactersInJail[4].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterFive")
        {
            charactersInJail[5].gameObject.SetActive(true);
        }


      

        if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition == 34 || ObjectMovementRedCar.routePosition <= 10)
        {
            Debug.Log("Case 5: Transition involving positions between 0 and 20 for active player and jail");
            CameraSlowDown();

            cameraController.target = JailBuilding.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if(ObjectMovementRedCar.routePosition >= 11 && ObjectMovementRedCar.routePosition <= 18)
        {
            Debug.Log("Case 5: Transition involving positions between 21 and 30 for active player and jail");
            cameraController.target = JailBuilding.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if(ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
        {
            Debug.Log("Case 5: Transition involving positions between 30 and 49 for active player and jail");
            SetCamera(CameraMovePoints[2].transform, 1.8f, 2.8f, -2.9f, 0.95f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.7f);
            SwitchToJail();
        }
        else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 33)
        {
            Debug.Log("Case 1: Transition involving positions >= 49 or <= 20 to jail");
            SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.8f);
            SwitchToJail();
        }
    }

    public IEnumerator CameraSwitchToJailFromPlayer()
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];

        if (currentPlayer.characterObject.name == "character")
        {
            charactersInJail[0].gameObject.SetActive(true);
        }
        else if(currentPlayer.characterObject.name == "characterOne")
        {
            charactersInJail[1].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterTwo")
        {
            charactersInJail[2].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterThree")
        {
            charactersInJail[3].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterFour")
        {
            charactersInJail[4].gameObject.SetActive(true);
        }
        else if (currentPlayer.characterObject.name == "characterFive")
        {
            charactersInJail[5].gameObject.SetActive(true);
        }

        

        if (currentPlayer.position == 0 || currentPlayer.position <= 20)
        {
            Debug.Log("Case 5: Transition involving positions between 0 and 20 for active player and jail");
            CameraSlowDown();

            cameraController.target = JailBuilding.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if (currentPlayer.position >= 21 && currentPlayer.position <= 30)
        {
            Debug.Log("Case 5: Transition involving positions between 21 and 30 for active player and jail");
            cameraController.target = JailBuilding.transform;
            cameraController.distance = 2.8f;
            cameraController.offset = -2.9f;

            yield return new WaitForSeconds(2f);
            ResetCameraZoom();
        }
        else if (currentPlayer.position >= 31 && currentPlayer.position <= 49)
        {
            Debug.Log("Case 5: Transition involving positions between 30 and 49 for active player and jail");
            SetCamera(CameraMovePoints[2].transform, 1.8f, 2.8f, -2.9f, 0.95f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.7f);
            SwitchToJail();
        }
        else if (currentPlayer.position >= 50 && currentPlayer.position <= 58)
        {
            Debug.Log("Case 1: Transition involving positions >= 49 or <= 20 to jail");
            SetCamera(CameraMovePoints[0].transform, 1.8f, 2.8f, -2.9f, 0.95f);
            WindCameraSwitchAudio.Play();
            yield return new WaitForSeconds(0.8f);
            SwitchToJail();
        }
    }

    public IEnumerator CarToPlayerChaseScene()
    {
        GodEyeCameraLook();
        cameraController.target = CameraChasePoint.transform;
      //  GodEyeCameraLook();

        yield return new WaitForSeconds(2f);

        StartCoroutine(BlurEffects());


        cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
        ResetCameraZoom();
        CharacterUIPanel.gameObject.SetActive(true);
        CarsAreMovingChaseAudio.Stop();

        if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
        {
            AllCharacterPanelsHolder.gameObject.SetActive(true);
        }
       

    }

    public IEnumerator PlayerToCarChaseScene()
    {

        // cameraController.target = CameraChasePoint.transform;
        // GodEyeCameraLook();
        SetCamera(CameraChasePoint.transform, 2f, 1f, -2.9f, -2f);

        yield return new WaitForSeconds(2f);

        // StartCoroutine(BlurEffects());
        DepthOfFieldClear();

         CameraSlowDownCarChaseTransition();
        StartCoroutine(CarChaseSceneCameraMovement());
        cameraController.target = ObjectMovementRedCar.transform;
    }
  

   


    IEnumerator WaitASecond()
    {
        ResetCameraZoom();
        CharacterUIPanel.gameObject.SetActive(false);
        isPreviousPlayerHuman = true;

        rollDiceButton.gameObject.SetActive(false);
        attackButton.gameObject.SetActive(false);
        yield return new WaitForSeconds(1f);

        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurn", false);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurnOver", true);
        characterPanelsHolderAnimation[activePlayer % playerList.Count].CrossFade("characterPanelHolderAnimEnding", 0.05f);

        yield return new WaitForSeconds(1f);


        JailBuildingCellDoorAnimator.SetBool("IsInJail", false);
        JailBuildingCellDoorAnimator.CrossFade("New State", 0.02f);


        if (playerList[(activePlayer + 1) % playerList.Count].playerType == PlayerTypes.HUMAN)
        {
            StartCoroutine(SwitchPlayerCameraMove());

            if (playerList[activePlayer % playerList.Count].position == 0 || playerList[activePlayer % playerList.Count].position <= 20)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 90, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if(playerList[activePlayer % playerList.Count].position >= 21 && playerList[activePlayer % playerList.Count].position <= 30)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 0, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position >= 31 && playerList[activePlayer % playerList.Count].position <= 49)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 270, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position >= 50 && playerList[activePlayer % playerList.Count].position <= 58)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 180, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
        }
        else if (playerList[(activePlayer + 1) % playerList.Count].playerType == PlayerTypes.CPU)
        {
          
            StartCoroutine(SwitchPlayerCameraMove());


            if (playerList[activePlayer % playerList.Count].position == 0 || playerList[activePlayer % playerList.Count].position <= 20)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 90, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position >= 21 && playerList[activePlayer % playerList.Count].position <= 30)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 0, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position >= 31 && playerList[activePlayer % playerList.Count].position <= 49)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 270, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position >= 50 && playerList[activePlayer % playerList.Count].position <= 58)
            {
                Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 180, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }

           

           


        }

    


        yield return new WaitForSeconds(2f);
        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn.");
        yield return new WaitForSeconds(2f);
        rollDiceText.text = "";
        yield return new WaitForSeconds(2f);

        if (playerList[activePlayer % playerList.Count].playerType == Entity.PlayerTypes.HUMAN)
        {
            rollDiceButton.gameObject.SetActive(true);
            attackButton.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);


        }

        characterPanelsHolderAnimation[activePlayer % playerList.Count].SetBool("IsCharacterTurnOver", false);
        isPreviousPlayerHuman = false;


    }

    public void AttackTurnNext()
    {
        Entity attacker = playerList[activePlayer % playerList.Count];
        Weapon AstroShield = weaponShop[8];
        //


        // Clear all weapon information text elements
        WeaponChooseAttackOne.text = "";
        WeaponChooseAttackTwo.text = "";
        WeaponChooseAttackThree.text = "";
        WeaponChooseAttackFour.text = "";
        WeaponChooseAttackFive.text = "";
        WeaponChooseAttackSix.text = "";
        WeaponChooseAttackSeven.text = "";

        WeaponChooseAttackOneBtn.gameObject.SetActive(false);
        WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
        WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
        WeaponChooseAttackFourBtn.gameObject.SetActive(false);
        WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
        WeaponChooseAttackSixBtn.gameObject.SetActive(false);
        WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
        WeaponChooseAttackEightBtn.gameObject.SetActive(false);

        BackToAttackButtonSelect.gameObject.SetActive(false);

        // Check if the player has a weapon
        if (!attacker.hasWeapon || attacker.WeaponInfo.Count == 0)
        {
            // Display "No weapon" message in the main weaponInfoText
            NoWeaponsPanel.gameObject.SetActive(true);
            weaponInfoText.text = "No weapon";
        }
        else
        {
            // Iterate through each weapon and update the corresponding button and text
            foreach (var weaponInfo in attacker.WeaponInfo)
            {
                NoWeaponsPanel.gameObject.SetActive(false);
                switch (weaponInfo.name)
                {
                    case "Pistol":
                        WeaponChooseAttackOne.text = "Pistol";
                        WeaponChooseAttackOneBtn.gameObject.SetActive(true);
                        break;
                    case "AK47":
                        WeaponChooseAttackTwo.text = "AK47";
                        WeaponChooseAttackTwoBtn.gameObject.SetActive(true);
                        break;
                    case "M15":
                        WeaponChooseAttackThree.text = "M15";
                        WeaponChooseAttackThreeBtn.gameObject.SetActive(true);
                        break;
                    case "Rocket Launcher":
                        WeaponChooseAttackFour.text = "Rocket Launcher";
                        WeaponChooseAttackFourBtn.gameObject.SetActive(true);
                        break;
                    case "Sniper":
                        WeaponChooseAttackFive.text = "Sniper";
                        WeaponChooseAttackFiveBtn.gameObject.SetActive(true);
                        break;
                    case "Grenade":
                        WeaponChooseAttackSix.text = "Grenade";
                        WeaponChooseAttackSixBtn.gameObject.SetActive(true);
                        break;
                    case "Shotgun":
                        WeaponChooseAttackSeven.text = "Shotgun";
                        WeaponChooseAttackSevenBtn.gameObject.SetActive(true);
                        break;
                    case "GodEye":
                        WeaponChooseAttackEight.text = "GodEye";
                        WeaponChooseAttackEightBtn.gameObject.SetActive(true);
                        WeaponChooseAttackOneBtn.gameObject.SetActive(false);
                        WeaponChooseAttackTwoBtn.gameObject.SetActive(false);
                        WeaponChooseAttackThreeBtn.gameObject.SetActive(false);
                        WeaponChooseAttackFourBtn.gameObject.SetActive(false);
                        WeaponChooseAttackFiveBtn.gameObject.SetActive(false);
                        WeaponChooseAttackSixBtn.gameObject.SetActive(false);
                        WeaponChooseAttackSevenBtn.gameObject.SetActive(false);
                        break;
                        // Add more cases for additional weapons
                }
            }

            // Clear the main weaponInfoText
            weaponInfoText.text = "";
        }
    }


    public IEnumerator WaitForCamera()
    {
        while (cameraController.target != null)
        {
            yield return null;
        }

        switchingPlayer = false;
    }

    public IEnumerator ShopManager()
    {
        yield return new WaitForSeconds(1f);
        if (playerList[activePlayer % playerList.Count].position == 6 || playerList[activePlayer % playerList.Count].position == 4 || playerList[activePlayer % playerList.Count].position == 9)
        {
            cameraController.target = GunShops[0].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 12 || playerList[activePlayer % playerList.Count].position == 15)
        {
            cameraController.target = GunShops[1].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 18 || playerList[activePlayer % playerList.Count].position == 22)
        {
            cameraController.target = GunShops[2].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 26 || playerList[activePlayer % playerList.Count].position == 28)
        {
            cameraController.target = GunShops[3].transform;
            yield return new WaitForSeconds(1f);
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 34 || playerList[activePlayer % playerList.Count].position == 32)
        {
            cameraController.target = GunShops[4].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 38 || playerList[activePlayer % playerList.Count].position == 41)
        {
            cameraController.target = GunShops[5].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 44)
        {
            cameraController.target = GunShops[6].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 52)
        {
            cameraController.target = GunShops[7].transform;
            StartCoroutine(attackingCameraMovement());
        }
        else if (playerList[activePlayer % playerList.Count].position == 55 || playerList[activePlayer % playerList.Count].position == 57)
        {
            cameraController.target = GunShops[8].transform;
            StartCoroutine(attackingCameraMovement());
        }


        yield return new WaitForSeconds(2f);

        if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
        {
            weaponShopPanel.gameObject.SetActive(true);
            CharacterMoneyInShop.text = "Player Money: $" + playerList[activePlayer % playerList.Count].money;
        }
        else
        {
       
            ResetCameraZoom();
            StartCoroutine(BlurEffects());
            yield return new WaitForSeconds(1f);
            cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
            yield return new WaitForSeconds(1f);
        }
      
    }



    public IEnumerator attackTurnOrder()
    {

        

        Entity attacker = playerList[activePlayer % playerList.Count];
        if(attacker.position <= 20)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(1.3f, 0.8f, -0.8f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);
            AttackPhasePanel.gameObject.SetActive(true);

            AttackTurnNext();
        }
        else if(attacker.position > 20 && attacker.position <=30)
        {
             yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(0.9f, 0.8f, 1.2f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);
            AttackPhasePanel.gameObject.SetActive(true);

            AttackTurnNext();
        }
        else if (attacker.position > 30 && attacker.position <= 49)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-1f, 0.8f, 0.9f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);
            AttackPhasePanel.gameObject.SetActive(true);

            AttackTurnNext();
        }
        else if(attacker.position > 49 && attacker.position <= 58 || attacker.position == 0)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-1f, 0.8f, -1f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);
            AttackPhasePanel.gameObject.SetActive(true);

            AttackTurnNext();
        }


        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {
            // Now you can modify the settings
            // For example, increasing bluriness:
            depthOfField.focusDistance.value = 1.3f; // Adjust as needed
            depthOfField.aperture.value = 0.7f; // Adjust as needed
            depthOfField.focalLength.value = 14f; // Adjust as needed
        }

    }

    public IEnumerator CarChaseSceneCameraMovement()
    {

        yield return new WaitForSeconds(0f);
         CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.distance = 1.8f;
            cameraControllerScript.offset = -0.4f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.ResetZoom();
           
        }

    }

    public IEnumerator CarChaseSceneCameraMovementEscape()
    {
        yield return new WaitForSeconds(0f);
        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.distance = 1.8f;
            cameraControllerScript.offset = -1.4f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.ResetZoom();

        }
    }


    public IEnumerator attackingCameraMovement()
    {
        Entity attacker = playerList[activePlayer % playerList.Count];

        if (attacker.position <= 20)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-0.8f, 1f, -1.3f);
                cameraControllerScript.ZoomIn(zoomDistances);
            }
        }
        else if(attacker.position > 20 && attacker.position <=30)
        {
            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(1.2f, 1f, -0.9f);
                cameraControllerScript.ZoomIn(zoomDistances);
            }
        }
        else if(attacker.position > 30 && attacker.position <=49)
        {
            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-0.9f, 1f, 1f);
                cameraControllerScript.ZoomIn(zoomDistances);
            }
        }
        else if(attacker.position > 49 && attacker.position <=58 || attacker.position == 0)
        {
            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-1f, 1f, 1f);
                cameraControllerScript.ZoomIn(zoomDistances);
            }
        }
         
    }

    public IEnumerator playerWonFunction(Entity attacker)
    {
        Entity currentPlayer = attacker;
        Animator playerAnimator = currentPlayer.playerAnimator;

        if (attacker.position <= 20)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(1.3f, 0.8f, -0.8f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);

        }
        else if (attacker.position > 20 && attacker.position <= 30)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(0.9f, 0.8f, 1.2f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);

        }
        else if (attacker.position > 30 && attacker.position <= 49)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-1f, 0.8f, 0.9f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);

        }
        else if (attacker.position > 49 && attacker.position <= 58 || attacker.position == 0)
        {
            yield return new WaitForSeconds(1f);

            CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
            if (cameraControllerScript != null)
            {
                Vector3 zoomDistances = new Vector3(-1f, 0.8f, -1f);
                cameraControllerScript.ZoomIn(zoomDistances);
                DepthOfFieldForAttackPlayer();
            }

            //  yield return new WaitForSeconds(1f);

        }

        yield return new WaitForSeconds(1.5f);


        playerAnimator.SetBool("UsingGodEye", true);
        playerAnimator.CrossFade("VictoryIdle", 0.1f);
        attacker.playerAnimator.applyRootMotion = false;

        FireWorksFlash.gameObject.SetActive(true);
        FireWorksFlash.Play();

        yield return new WaitForSeconds(2f);

       // DepthofFieldforDice();

        /*
        characterHasWonPanel.gameObject.SetActive(true);
        CharacterHasWonPanelAnim.SetBool("HasPlayerWonBool", true);
        CharacterHasWonPanelAnim.CrossFade("HasPlayerWon", 0.05f);
        PlayerHasWonText.text = attacker.playerName + " Has Won ! ";
        */

        AllCharacterPanelsHolder.gameObject.SetActive(false);
        


        




    }


    public IEnumerator GodEyeAttackAnimationOrder(Entity attacker)
    {
        attacker.playerAnimator.applyRootMotion = true;

        Entity currentPlayer = attacker;
        Animator playerAnimator = currentPlayer.playerAnimator;
       

        AttackPhasePanel.gameObject.SetActive(false);
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(BlurEffects());
        ResetCameraZoom();
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(attackingCameraMovement());
        DepthOfFieldShootingPlayer();
        yield return new WaitForSeconds(1f);

        playerAnimator.SetBool("UsingGodEye", true);
        playerAnimator.CrossFade("VictoryIdle", 0.1f);

        currentPlayer.GodEyeswitch.gameObject.SetActive(true);

        yield return new WaitForSeconds(3f);

        StartCoroutine(BlurEffects());
        ResetCameraZoom();

        yield return new WaitForSeconds(1f);



        cameraController.target = GodEyeSatelite.transform;
        GodEyeCameraLook();

        playerAnimator.SetBool("UsingGodEye", false);
        playerAnimator.CrossFade("Idle", 0.1f);

        currentPlayer.GodEyeswitch.gameObject.SetActive(false);


        Quaternion startRotationForCharacter = attacker.characterObject.transform.localRotation;
        Quaternion endRotationForCharacter = Quaternion.Euler(0, 90, 0);
        float tForCharacter = 0;
        while (tForCharacter < 1)
        {
            tForCharacter += Time.deltaTime * turnSpeed;
            currentPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotationForCharacter, endRotationForCharacter, tForCharacter);

        }



        

        for (int i = 0; i < playerList.Count; i++)
        {
            if (playerList[i % playerList.Count] != currentPlayer)
            {

                cameraController.target = GodEyeSatelite.transform;
                GodEyeCameraLook();

                yield return new WaitForSeconds(3f);


                StartCoroutine(BlurEffects());

                Entity targetAttackedPlayer = playerList[i % playerList.Count];
                targetAttackedPlayer.playerAnimator.applyRootMotion = true;
                Vector3 startPositionForTargetPlayer = targetAttackedPlayer.characterObject.transform.localPosition;
                Quaternion startRotationForTargetPlayer = targetAttackedPlayer.characterObject.transform.localRotation;


                 cameraController.target = playerList[i % playerList.Count].playerObject.transform;

                  cameraController.target = playerList[i % playerList.Count].playerObject.transform;
                  CameraSlowDown();

                  cameraController.target = playerList[i % playerList.Count].playerObject.transform;
                  cameraController.distance = 2.8f;
                  cameraController.offset = -2.9f;
                
                 

              //  StartCoroutine(GodEyeSwitchCameraMove(i));

             /*   yield return new WaitForSeconds(3f);

                StartCoroutine(attackingCameraMovement());
                DepthOfFieldShootingPlayer();
             */


                yield return new WaitForSeconds(2.5f);




                if (targetAttackedPlayer.characterObject.name == "character")
                {

                    GodEyeLaser.gameObject.SetActive(true);
                    GodEyeLaser.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosion.gameObject.SetActive(true);
                    PlayerHurtExplosion.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 0 explosion");
                }
                else if (targetAttackedPlayer.characterObject.name == "characterOne")
                {
                    GodEyeLaserOne.gameObject.SetActive(true);
                    GodEyeLaserOne.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosionOne.gameObject.SetActive(true);
                    PlayerHurtExplosionOne.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 1 explosion");
                }
                else if (targetAttackedPlayer.characterObject.name == "characterTwo")
                {
                    GodEyeLaserTwo.gameObject.SetActive(true);
                    GodEyeLaserTwo.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosionTwo.gameObject.SetActive(true);
                    PlayerHurtExplosionTwo.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 2 explosion");
                }
                else if (targetAttackedPlayer.characterObject.name == "characterThree")
                {
                    GodEyeLaserThree.gameObject.SetActive(true);
                    GodEyeLaserThree.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosionThree.gameObject.SetActive(true);
                    PlayerHurtExplosionThree.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 3 explosion");
                }
                else  if (targetAttackedPlayer.characterObject.name == "characterFour")
                {
                    GodEyeLaserFour.gameObject.SetActive(true);
                    GodEyeLaserFour.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosionFive.gameObject.SetActive(true);
                    PlayerHurtExplosionFive.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 4 explosion");
                }
                else if (targetAttackedPlayer.characterObject.name == "characterFive")
                {
                    GodEyeLaserFive.gameObject.SetActive(true);
                    GodEyeLaserFive.Play();

                    yield return new WaitForSeconds(1f);

                    PlayerHurtExplosionFive.gameObject.SetActive(true);
                    PlayerHurtExplosionFive.Play();
                    ExplosionAudio.Play();
                    Debug.Log("player 5 explosion");
                }

                targetAttackedPlayer.playerAnimator.SetBool("IsHitExplosion", true);
                targetAttackedPlayer.playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                yield return new WaitForSeconds(3.5f);

                if (targetAttackedPlayer.characterObject.name == "character")
                {
                    PlayerHurtExplosion.Stop();
                    PlayerHurtExplosion.gameObject.SetActive(false);
                    GodEyeLaser.Stop();
                    GodEyeLaser.gameObject.SetActive(false);
                }
                else if (targetAttackedPlayer.characterObject.name == "characterOne")
                {
                    PlayerHurtExplosionOne.Stop();
                    PlayerHurtExplosionOne.gameObject.SetActive(false);
                    GodEyeLaserOne.Stop();
                    GodEyeLaserOne.gameObject.SetActive(false);
                }
                else  if (targetAttackedPlayer.characterObject.name == "characterTwo")
                {
                    PlayerHurtExplosionTwo.Stop();
                    PlayerHurtExplosionTwo.gameObject.SetActive(false);
                    GodEyeLaserTwo.Stop();
                    GodEyeLaserTwo.gameObject.SetActive(false);
                }
                else  if (targetAttackedPlayer.characterObject.name == "characterThree")
                {
                    PlayerHurtExplosionThree.Stop();
                    PlayerHurtExplosionThree.gameObject.SetActive(false);
                    GodEyeLaserThree.Stop();
                    GodEyeLaserThree.gameObject.SetActive(false);

                }
                else  if (targetAttackedPlayer.characterObject.name == "characterFour")
                {
                    PlayerHurtExplosionFour.Stop();
                    PlayerHurtExplosionFour.gameObject.SetActive(false);
                    GodEyeLaserFour.Stop();
                    GodEyeLaserFour.gameObject.SetActive(false);
                }
                else if (targetAttackedPlayer.characterObject.name == "characterFive")
                {
                    PlayerHurtExplosionFive.Stop();
                    PlayerHurtExplosionFive.gameObject.SetActive(false);
                    GodEyeLaserFive.Stop();
                    GodEyeLaserFive.gameObject.SetActive(false);
                }

               // playerList.Remove(targetAttackedPlayer);

                

                


                yield return new WaitForSeconds(3f);
                targetAttackedPlayer.playerAnimator.applyRootMotion = false;


                StartCoroutine(BlurEffects());
                ResetCameraZoom();

            }
        }

        //StartCoroutine(CameraGodEyeEnd());

        cameraController.target = GodEyeSatelite.transform;
        GodEyeCameraLook();

        yield return new WaitForSeconds(0.5f);


        StartCoroutine(BlurEffects());


        cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;

        cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
        CameraSlowDown();

        cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
        cameraController.distance = 2.8f;
        cameraController.offset = -2.9f;

        yield return new WaitForSeconds(2f);

        for (int i = 0; i < playerList.Count; i++)
        {
            if (playerList[i].lives <= 0)
            {
                playerList.RemoveAt(i);
            }
        }
        RemoveCharacterUI();

        
       
        GodEyeLaser.gameObject.SetActive(false);


        StartCoroutine(playerWonFunction(attacker));
        


    }

    public IEnumerator attackAnimationOrder(Entity attacker, int targetPlayerIndex)
    {
        attacker.playerAnimator.applyRootMotion = true;



        Entity targetPlayer = playerList[targetPlayerIndex % playerList.Count];

        GameObject Pistol = attacker.Pistol;
        GameObject Ak47 = attacker.Ak47;
        GameObject M15 = attacker.M15;
        GameObject RocketLauncher = attacker.RocketLauncher;
        GameObject SniperRifle = attacker.SniperRifle;
        GameObject Grenade = attacker.Grenade;
        GameObject Shotgun = attacker.Shotgun;
        

        //  SniperRifle.gameObject.SetActive(false);

        bool IsAttacking = attacker.isAttacking = true;

        bool pistolClicked = attacker.PistolCLicked;
        bool ak47Clicked = attacker.Ak47Clicked;
        bool m15Clicked = attacker.M15Clicked;
        bool RocketLauncherClicked = attacker.RocketLauncherClicked;
        bool SniperClicked = attacker.SniperClicked;
        bool GrenadeClicked = attacker.GrenadeClicked;
        bool ShotgunClicked = attacker.ShotgunClicked;

       



        Entity.WeaponInformation pistolEntity = attacker.WeaponInfo.Find(weapon => weapon.name == "Pistol");
        Entity.WeaponInformation AK47Entity = attacker.WeaponInfo.Find(weapon => weapon.name == "AK47");
        Entity.WeaponInformation M15Entity = attacker.WeaponInfo.Find(weapon => weapon.name == "M15");
        Entity.WeaponInformation RocketLauncherEntity = attacker.WeaponInfo.Find(weapon => weapon.name == "Rocket Launcher");
        Entity.WeaponInformation sniperEntity = attacker.WeaponInfo.Find(weapon => weapon.name == "Sniper");
        Entity.WeaponInformation grenadeEntity = attacker.WeaponInfo.Find(weapon => weapon.name == "Grenade");
        Entity.WeaponInformation shotgunEntity = attacker.WeaponInfo.Find(weapon => weapon.name == "Shotgun");


        Entity.WeaponInformation ShieldEntityForTarget = targetPlayer.WeaponInfo.Find(weapon => weapon.name == "Shield");

        AttackPhasePanel.gameObject.SetActive(false);
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(BlurEffects());
        ResetCameraZoom();
        yield return new WaitForSeconds(0.5f);
        StartCoroutine(attackingCameraMovement());
        yield return new WaitForSeconds(1f);
        DepthOfFieldShootingPlayer();
        yield return new WaitForSeconds(.5f);

        Entity currentPlayer = playerList[activePlayer % playerList.Count ];
        Animator playerAnimator = currentPlayer.playerAnimator;
        Animator targetAnimator = targetPlayer.playerAnimator;
        /*
           Entity precisePlayerOne = playerList.Find(characterName => characterName.characterObject.name == "character");
           Entity precisePlayerTwo = playerList.Find(characterName => characterName.characterObject.name == "characterOne");
           Entity precisePlayerThree = playerList.Find(characterName => characterName.characterObject.name == "characterTwo");
           Entity precisePlayerFour = playerList.Find(characterName => characterName.characterObject.name == "characterThree");
           Entity precisePlayerFive = playerList.Find(characterName => characterName.characterObject.name == "characterFour");
           Entity precisePlayerSix = playerList.Find(characterName => characterName.characterObject.name == "characterFive");
        */


       

        if (SniperClicked)
        {
            if(attacker.characterObject.name == "character")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.112f, 1.146f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if(attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.387f, 1.438f, 0.618f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.297f, 1.379f, 0.508f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.417f, 1.366f, 0.598f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.287f, 1.312f, 0.586f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForSniper = attacker.SniperRifle.transform.localRotation;
                Quaternion endRotationForSniper = Quaternion.Euler(0, 90, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.SniperRifle.transform.localRotation = Quaternion.Slerp(startRotationForSniper, endRotationForSniper, tForSniper);

                }

                Vector3 startPositionForSniper = attacker.SniperRifle.transform.localPosition;
                Vector3 endPositionForSniper = new Vector3(-0.33f, 1.353f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.SniperRifle.transform.localPosition = Vector3.Lerp(startPositionForSniper, endPositionForSniper, tPosition);
                }
            }


        }
        else if(pistolClicked)
        {
            if(attacker.characterObject.name == "character")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.207f, 1.19f, 0.467f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.332f, 1.441f, 0.516f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.335f, 1.394f, 0.475f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.392f, 1.321f, 0.478f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.116f, 1.319f, 0.401f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForPistol = attacker.Pistol.transform.localRotation;
                Quaternion endRotationForPistol = Quaternion.Euler(0, 0, 0);
                float tForPistol = 0;
                while (tForPistol < 1)
                {
                    tForPistol += Time.deltaTime * turnSpeed;
                    attacker.Pistol.transform.localRotation = Quaternion.Slerp(startRotationForPistol, endRotationForPistol, tForPistol);

                }

                Vector3 startPositionForPistol = attacker.Pistol.transform.localPosition;
                Vector3 endPositionForPistol = new Vector3(-0.327f, 1.363f, 0.469f);
                float tPositionPistol = 0;
                float moveSpeedPistol = 5.0f;

                while (tPositionPistol < 1)
                {
                    tPositionPistol += Time.deltaTime * moveSpeedPistol;
                    attacker.Pistol.transform.localPosition = Vector3.Lerp(startPositionForPistol, endPositionForPistol, tPositionPistol);
                }
            }

        }
        else if(ak47Clicked)
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.215f, 1.04f, 0.46f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.368f, 1.108f, 0.607f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if(attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.44f, 1.028f, 0.511f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if(attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.289f, 1.028f, 0.512f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.354f, 0.843f, 0.359f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
            else if(attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForAK47 = attacker.Ak47.transform.localRotation;
                Quaternion endRotationForAK47 = Quaternion.Euler(0, 90, 0);
                float tForAK47 = 0;
                while (tForAK47 < 1)
                {
                    tForAK47 += Time.deltaTime * turnSpeed;
                    attacker.Ak47.transform.localRotation = Quaternion.Slerp(startRotationForAK47, endRotationForAK47, tForAK47);

                }

                Vector3 startPositionAK47 = attacker.Ak47.transform.localPosition;
                Vector3 endPositionAK47 = new Vector3(-0.568f, 0.901f, 0.591f);
                float tAK47 = 0;
                float moveSpeedAK47 = 5.0f;

                while (tAK47 < 1)
                {
                    tAK47 += Time.deltaTime * moveSpeedAK47;
                    attacker.Ak47.transform.localPosition = Vector3.Lerp(startPositionAK47, endPositionAK47, tAK47);
                }
            }
        }
        else if(m15Clicked)
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15< 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.222f, 1.146f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.345f, 1.195f, 0.661f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.495f, 1.113f, 0.52f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.236f, 1.113f, 0.52f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.291f, 0.91f, 0.519f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForM15 = attacker.M15.transform.localRotation;
                Quaternion endRotationForM15 = Quaternion.Euler(0, 180, 0);
                float tForM15 = 0;
                while (tForM15 < 1)
                {
                    tForM15 += Time.deltaTime * turnSpeed;
                    attacker.M15.transform.localRotation = Quaternion.Slerp(startRotationForM15, endRotationForM15, tForM15);

                }

                Vector3 startPositionForM15 = attacker.M15.transform.localPosition;
                Vector3 endPositionForM15 = new Vector3(-0.548f, 1.036f, 0.528f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.M15.transform.localPosition = Vector3.Lerp(startPositionForM15, endPositionForM15, tPosition);
                }
            }
        }
        else if(RocketLauncherClicked)
        {
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.05f, 1.202f, 0.232f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.148f, 1.294f, 0.373f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.177f, 1.153f, 0.244f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.045f, 1.324f, 0.439f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.071f, 1.041f, 0.298f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                
            
                Quaternion startRotationForRocketLauncher = attacker.RocketLauncher.transform.localRotation;
                Quaternion endRotationForRocketLauncher = Quaternion.Euler(0, 270, 0);
                float tForSniper = 0;
                while (tForSniper < 1)
                {
                    tForSniper += Time.deltaTime * turnSpeed;
                    attacker.RocketLauncher.transform.localRotation = Quaternion.Slerp(startRotationForRocketLauncher, endRotationForRocketLauncher, tForSniper);

                }

                Vector3 startPositionForRocketLauncher = attacker.RocketLauncher.transform.localPosition;
                Vector3 endPositionForRocketLauncher = new Vector3(-0.336f, 1.087f, 0.232f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.RocketLauncher.transform.localPosition = Vector3.Lerp(startPositionForRocketLauncher, endPositionForRocketLauncher, tPosition);
                }
            }
        }
        else if(GrenadeClicked)
        {
            if (attacker.characterObject.name == "character")
            {
              attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                attacker.Grenade.gameObject.SetActive(false);
            }
        }
        else if(ShotgunClicked)
        {
           
            if (attacker.characterObject.name == "character")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.252f, 1.071f, 0.548f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.326f, 1.2f, 0.564f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.424f, 1.104f, 0.548f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.283f, 1.059f, 0.503f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.287f, 0.926f, 0.47f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Quaternion startRotationForShotgun = attacker.Shotgun.transform.localRotation;
                Quaternion endRotationForShotgun = Quaternion.Euler(0, 270, 0);
                float tForShotgun = 0;
                while (tForShotgun < 1)
                {
                    tForShotgun += Time.deltaTime * turnSpeed;
                    attacker.Shotgun.transform.localRotation = Quaternion.Slerp(startRotationForShotgun, endRotationForShotgun, tForShotgun);

                }

                Vector3 startPositionForShotgun = attacker.Shotgun.transform.localPosition;
                Vector3 endPositionForShotgun = new Vector3(-0.374f, 1.165f, 0.568f);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    attacker.Shotgun.transform.localPosition = Vector3.Lerp(startPositionForShotgun, endPositionForShotgun, tPosition);
                }
            }
        }



        if (targetPlayer.position < attacker.position && attacker.position <= 20)
        {
            playerAnimator.SetBool("IsTurning", true);
            playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.6f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }

        else if (targetPlayer.position < attacker.position && attacker.position > 20 && attacker.position <= 30)
        {
            playerAnimator.SetBool("IsTurning", true);
            playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.6f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }

        else if (targetPlayer.position < attacker.position && attacker.position > 30 && attacker.position <= 49)
        {
            playerAnimator.SetBool("IsTurning", true);
            playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.6f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }
        else if (targetPlayer.position < attacker.position && attacker.position > 49 && attacker.position <= 58)
        {
            playerAnimator.SetBool("IsTurning", true);
            playerAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.6f);

            Quaternion startRotation = attacker.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

        }
      


        else if (targetPlayer.position == attacker.position) //&& attacker.position <= 20)
        {
            Vector3 startPositionForAttacker = attacker.characterObject.transform.localPosition;

            attacker.playerAnimator.SetBool("IsOnSameSquare", true);
            attacker.playerAnimator.CrossFade("SpinAttack", 0.02f);

            
           
            NPCMovementSpeedRun();
            CrowdScreamingAudio.Play();
            CrowdScreamingAudio.volume = 0.4f;

            if (pistolClicked)
            {
                Pistol.gameObject.SetActive(true);
               
            }
            else if (ak47Clicked)
            {
                Ak47.gameObject.SetActive(true);
                
            }
            else if (m15Clicked)
            {
                M15.gameObject.SetActive(true);
               
            }
            else if (RocketLauncherClicked)
            {
                RocketLauncher.gameObject.SetActive(true);
            }
            else if (SniperClicked)
            {
                SniperRifle.gameObject.SetActive(true);
               
            }
            else if (GrenadeClicked)
            {
                Grenade.gameObject.SetActive(false);
            }
            else if (ShotgunClicked)
            {
                Shotgun.gameObject.SetActive(true);
               
            }

            yield return new WaitForSeconds(1.7f);

           if (pistolClicked)
           {
            Pistol.gameObject.SetActive(false);
            
           }
           else if (ak47Clicked)
           {
            Ak47.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                Ak47PlayerFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Ak47PlayerOneFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Ak47PlayerTwoFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Ak47PlayerThreeFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Ak47PlayerFourFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Ak47PlayerFiveFlash.Stop();
            }

           }
           else if (m15Clicked)
           {
            M15.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                M15PlayerFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                M15PlayerOneFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                M15PlayerTwoFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                M15PlayerThreeFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                M15PlayerFourFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                M15PlayerFiveFlash.Stop();
            }
           }
           else if (RocketLauncherClicked)
           {
             RocketLauncher.gameObject.SetActive(false);
           }
           else if (SniperClicked)
           {
            SniperRifle.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                SniperRifleFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                SniperRifleOneFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                SniperRifleTwoFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                SniperRifleThreeFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                SniperRifleFourFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                SniperRifleFiveFlash.Stop();
            }
           }
           else if (GrenadeClicked)
           {
            Grenade.gameObject.SetActive(false);
           }
           else if (ShotgunClicked)
           {
            Shotgun.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                ShotgunPlayerFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                ShotgunPlayerOneFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                ShotgunPlayerTwoFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                ShotgunPlayerThreeFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                ShotgunPlayerFourFlash.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                ShotgunPlayerFiveFlash.Stop();
            }
           }

            Quaternion startRotation = attacker.characterObject.transform.rotation;

            if(attacker.position == 0 || attacker.position <= 20)
            {
                Quaternion endRotation = Quaternion.Euler(0, 90, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if(attacker.position >= 21 && attacker.position <= 30)
            {
                Quaternion endRotation = Quaternion.Euler(0, 0, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (attacker.position >= 31 && attacker.position <= 49)
            {
                Quaternion endRotation = Quaternion.Euler(0, 270, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (attacker.position >= 50 && attacker.position <= 58)
            {
                Quaternion endRotation = Quaternion.Euler(0, 180, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }



            Vector3 endPositionForAttacker = startPositionForAttacker;
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                attacker.characterObject.transform.localPosition = Vector3.Lerp(startPositionForAttacker, endPositionForAttacker, tPosition);
            }

            attacker.playerAnimator.SetBool("IsOnSameSquare", false);
            attacker.playerAnimator.CrossFade("Idle", 0.02f);


        }

       // yield return new WaitForSeconds(1f);

        attacker.playerAnimator.applyRootMotion = false;

        playerAnimator.SetBool("IsTurning", false);
        playerAnimator.SetBool("IsOnSameSquare", false);
        playerAnimator.CrossFade("Idle", 0.08f);

        attacker.playerAnimator.applyRootMotion = true;

        

        yield return new WaitForSeconds(0.5f);



          

        if (pistolClicked && attacker.position < targetPlayer.position || pistolClicked && attacker.position > targetPlayer.position || ak47Clicked && attacker.position < targetPlayer.position || ak47Clicked && attacker.position > targetPlayer.position || m15Clicked && attacker.position < targetPlayer.position || m15Clicked && attacker.position > targetPlayer.position || RocketLauncherClicked && attacker.position < targetPlayer.position || RocketLauncherClicked && attacker.position > targetPlayer.position || SniperClicked && attacker.position < targetPlayer.position || SniperClicked && attacker.position > targetPlayer.position || ShotgunClicked && attacker.position < targetPlayer.position || ShotgunClicked && attacker.position > targetPlayer.position )
        {
            attacker.playerAnimator.applyRootMotion = true;

            playerAnimator.SetBool("IsActuallyAttackingLMAO", true);
            playerAnimator.CrossFade("FiringRifle", 0.1f);


            
           
            NPCMovementSpeedRun();
           
            


        }
        else if(GrenadeClicked && attacker.position < targetPlayer.position || GrenadeClicked && attacker.position > targetPlayer.position)
        {
            attacker.playerAnimator.applyRootMotion = true;
            Quaternion startRotation = attacker.characterObject.transform.rotation;

            playerAnimator.SetBool("IsThrowing", true);
            playerAnimator.CrossFade("Throw", 0.1f);


            
            NPCMovementSpeedRun();
      

            yield return new WaitForSeconds(2.5f);

            playerAnimator.SetBool("IsThrowing", false);
            playerAnimator.CrossFade("Idle", 0.1f);


            Quaternion endRotation = startRotation;
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        

       

        yield return new WaitForSeconds(0.5f);
        CrowdScreamingAudio.Play();
       // CrowdScreamingAudio.volume = 0.4f;

        if (pistolClicked && attacker.position < targetPlayer.position || pistolClicked && attacker.position > targetPlayer.position)
        {
            Pistol.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                pistolPlayerFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFlash.gameObject.SetActive(true);

            }
            else if(attacker.characterObject.name == "characterOne")
            {
                pistolPlayerOneFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerOneFlash.gameObject.SetActive(true);
            }
            else if(attacker.characterObject.name == "characterTwo")
            {
                pistolPlayerTwoFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                pistolPlayerThreeFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                pistolPlayerFourFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                pistolPlayerFiveFlash.Play();
                GunShotsAudio.Play();
                pistolPlayerFiveFlash.gameObject.SetActive(true);
            }
        }
        else if(ak47Clicked && attacker.position < targetPlayer.position || ak47Clicked && attacker.position > targetPlayer.position)
        {
            Ak47.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                Ak47PlayerFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Ak47PlayerOneFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Ak47PlayerTwoFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Ak47PlayerThreeFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Ak47PlayerFourFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Ak47PlayerFiveFlash.Play();
                GunShotsAudio.Play();
                Ak47PlayerFiveFlash.gameObject.SetActive(true);
            }

        }
        else if(m15Clicked && attacker.position < targetPlayer.position ||m15Clicked && attacker.position > targetPlayer.position)
        {
            M15.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                M15PlayerFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                M15PlayerOneFlash.Play();
                GunShotsAudio.Play();
                M15PlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                M15PlayerTwoFlash.Play();
                GunShotsAudio.Play();
                M15PlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                M15PlayerThreeFlash.Play();
                GunShotsAudio.Play();
                M15PlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                M15PlayerFourFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                M15PlayerFiveFlash.Play();
                GunShotsAudio.Play();
                M15PlayerFiveFlash.gameObject.SetActive(true);
            }
        }
        else if(RocketLauncherClicked && attacker.position < targetPlayer.position || RocketLauncherClicked && attacker.position > targetPlayer.position)
        {
            RocketLauncher.gameObject.SetActive(true);
            playerList[activePlayer % playerList.Count].RocketLauncherHead.gameObject.SetActive(false);
            RocketLauncherLightsCheckNullTrue();
            RocketLauncherAudio.Play();

        }
        else if(SniperClicked && attacker.position < targetPlayer.position || SniperClicked && attacker.position > targetPlayer.position)
        {
            SniperRifle.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                SniperRifleFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                SniperRifleOneFlash.Play();
                GunShotsAudio.Play();
                SniperRifleOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                SniperRifleTwoFlash.Play();
                GunShotsAudio.Play();
                SniperRifleTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                SniperRifleThreeFlash.Play();
                GunShotsAudio.Play();
                SniperRifleThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                SniperRifleFourFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                SniperRifleFiveFlash.Play();
                GunShotsAudio.Play();
                SniperRifleFlash.gameObject.SetActive(true);
            }
        }
        else if(GrenadeClicked && attacker.position < targetPlayer.position || GrenadeClicked && attacker.position > targetPlayer.position)
        {
            Grenade.gameObject.SetActive(false);
        }
        else if(ShotgunClicked && attacker.position < targetPlayer.position || ShotgunClicked && attacker.position > targetPlayer.position)
        {
            Shotgun.gameObject.SetActive(true);
            if (attacker.characterObject.name == "character")
            {
                ShotgunPlayerFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                ShotgunPlayerOneFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerOneFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                ShotgunPlayerTwoFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerTwoFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                ShotgunPlayerThreeFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerThreeFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                ShotgunPlayerFourFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFourFlash.gameObject.SetActive(true);
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                ShotgunPlayerFiveFlash.Play();
                GunShotsAudio.Play();
                ShotgunPlayerFiveFlash.gameObject.SetActive(true);
            }

            
        }
       

        yield return new WaitForSeconds(1f);

        ResetCameraZoom();
        StartCoroutine(BlurEffects());

        yield return new WaitForSeconds(0.5f);

       int  routePositionforNodes = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;
        
        float currentIntensity = 0f; 

        if(targetPlayer.position > attacker.position)
        {
            for (int i = routePositionforNodes; i < (currentPlayer.position) + ((targetPlayer.position - currentPlayer.position) + 1); i++)
            {
                Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];



            
                float duration = 0.17f;

                float startValueIntensity = 0;
                float endValueIntensity = 2f;

                float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColor = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    cameraController.target = NodeColorObjectList[i].transform;

                    yield return null;
                }




            }
        }
        else if(attacker.position > targetPlayer.position)
        {
            int routePositionforNodesBackwards = (currentPlayer.position - 1 + (currentRoute.childNodeList.Count)) % currentRoute.childNodeList.Count;
            int targetPosition = (targetPlayer.position - 1 + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count;

            for (int i = routePositionforNodesBackwards; i != targetPosition; i = (i - 1 + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count)
            {
                Material changeNodeMaterial = NodeColorObjectList[((i) + currentRoute.childNodeList.Count) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[((i) + currentRoute.childNodeList.Count )% currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];



              
                float duration = 0.17f;

                float startValueIntensity = 0;
                float endValueIntensity = 2f;

                float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColor = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    cameraController.target = NodeColorObjectList[i].transform;

                    yield return null;
                }




            }
            
        }
       

        
       
        yield return new WaitForSeconds(0.5f);

     
        StartCoroutine(attackingCameraMovement());
        yield return new WaitForSeconds(1f);
        DepthOfFieldShootingPlayer();

       // yield return new WaitForSeconds(1f);

        targetPlayer.playerAnimator.applyRootMotion = true;

        if (targetPlayer.position > attacker.position && targetPlayer.position <= 20)
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if(targetPlayer.position > attacker.position && targetPlayer.position > 20 && targetPlayer.position <=30)
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 30 && targetPlayer.position <= 49)
        {

            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);
            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && (targetPlayer.position > 49 && targetPlayer.position <= 58))
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
       






        targetAnimator.SetBool("IsTurning", false);
        targetAnimator.CrossFade("Idle", 0.05f);

        Vector3 startPositionForTargetPlayer = targetPlayer.playerObject.transform.position;

        yield return new WaitForSeconds(1f);

        if(ShieldEntityForTarget != null)
        {
            if(targetPlayer.playerType == PlayerTypes.HUMAN)
            {
                UseShield.gameObject.SetActive(true);
                DontUseShield.gameObject.SetActive(true);
            }
            else
            {
                isUsingShieldBool = true;
            }

            //
            while (isUsingShieldBool == false && isNotUsingShieldBool == false)
            {
                yield return null;
                GunShotsAudio.Pause();
            }

            if (isUsingShieldBool == true)
            {

                ShieldEntityForTarget.bullets--;

                if(ShieldEntityForTarget.bullets <= 0)
                {
                    targetPlayer.WeaponInfo.Remove(ShieldEntityForTarget);
                    
                    if(targetPlayer.WeaponInfo.Count == 0)
                    {
                        targetPlayer.hasWeapon = false;
                    }
                }
             
                 targetPlayer.playerAnimator.applyRootMotion = false;


                targetPlayer.playerAnimator.SetBool("UsingShield", true);
                targetPlayer.playerAnimator.CrossFade("SwordShieldBlock", 0.1f);

                yield return new WaitForSeconds(0.5f);
                targetPlayer.ShieldAnimator.SetBool("ShieldGrow", true);
                targetPlayer.ShieldAnimator.CrossFade("ShieldGrowth", 0.1f);

                yield return new WaitForSeconds(1f);
                GunShotsAudio.Play();
                BulletRicochet.Play();

                if (targetPlayer.characterObject.name == "character")
                {
                    BulletShieldImpact.gameObject.SetActive(true);
                    BulletShieldImpact.Play();
                   
                }
                else if(targetPlayer.characterObject.name == "characterOne")
                {
                     BulletShieldImpactOne.gameObject.SetActive(true);
                    BulletShieldImpactOne.Play();
                }
                else if (targetPlayer.characterObject.name == "characterTwo")
                {
                    BulletShieldImpactTwo.gameObject.SetActive(true);
                    BulletShieldImpactTwo.Play();
                }
                else if (targetPlayer.characterObject.name == "characterThree")
                {
                    BulletShieldImpactThree.gameObject.SetActive(true);
                    BulletShieldImpactThree.Play();
                }
                else if (targetPlayer.characterObject.name == "characterFour")
                {
                    BulletShieldImpactFour.gameObject.SetActive(true);
                    BulletShieldImpactFour.Play();
                }
                else if (targetPlayer.characterObject.name == "characterFive")
                {
                    BulletShieldImpactFive.gameObject.SetActive(true);
                    BulletShieldImpactFive.Play();
                }


                targetPlayer.playerAnimator.SetBool("ShieldIdle", true);
                targetPlayer.playerAnimator.SetBool("UsingShield", false);
                targetPlayer.playerAnimator.CrossFade("SwordShieldIdle", 0.1f);

                yield return new WaitForSeconds(6f);

                BulletRicochet.Stop();

                if (targetPlayer.characterObject.name == "character")
                {
                    BulletShieldImpact.Stop();
                    BulletShieldImpact.gameObject.SetActive(false);
                   
                }
                else if (targetPlayer.characterObject.name == "characterOne")
                {
                    BulletShieldImpactOne.Stop();
                    BulletShieldImpactOne.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterTwo")
                {
                    BulletShieldImpactTwo.Stop();
                    BulletShieldImpactTwo.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterThree")
                {
                    BulletShieldImpactThree.Stop();
                    BulletShieldImpactThree.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterFour")
                {
                    BulletShieldImpactFour.Stop();
                    BulletShieldImpactFour.gameObject.SetActive(false);
                }
                else if (targetPlayer.characterObject.name == "characterFive")
                {
                    BulletShieldImpactFive.Stop();
                    BulletShieldImpactFive.gameObject.SetActive(false);
                }
                targetPlayer.playerAnimator.SetBool("ShieldIdle", false);
                targetPlayer.ShieldAnimator.SetBool("ShieldShrink", false);
                targetPlayer.ShieldAnimator.CrossFade("ShieldShrink", 0.1f);
                targetPlayer.playerAnimator.CrossFade("Idle", 0.1f);


                
                Vector3 endPositionForCardPanel = startPositionForTargetPlayer;
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForTargetPlayer, endPositionForCardPanel, tPosition);
                }
            }
            else if(isNotUsingShieldBool == true)
            {
                //targetPlayer.lives = targetPlayer.lives - 1;

                if(pistolClicked)
                {
                    targetPlayer.lives = targetPlayer.lives - pistolEntity.damage;
                }
                else if(ak47Clicked)
                {
                    targetPlayer.lives = targetPlayer.lives - AK47Entity.damage;
                }
                else if (m15Clicked)
                {
                    targetPlayer.lives = targetPlayer.lives - M15Entity.damage;
                }
                else if (RocketLauncherClicked)
                {
                    targetPlayer.lives = targetPlayer.lives - RocketLauncherEntity.damage;
                }
                else if (SniperClicked)
                {
                    targetPlayer.lives = targetPlayer.lives - sniperEntity.damage;
                }
                else if (GrenadeClicked)
                {
                    targetPlayer.lives = targetPlayer.lives - grenadeEntity.damage;
                }
                else if (ShotgunClicked)
                {
                    targetPlayer.lives = targetPlayer.lives - shotgunEntity.damage;
                }

                if (RocketLauncherClicked && targetPlayer.characterObject.name == "character" || GrenadeClicked && targetPlayer.characterObject.name == "character")
                {
                    if (PlayerHurtExplosion != null)
                    {
                        PlayerHurtExplosion.gameObject.SetActive(true);
                        PlayerHurtExplosion.Play();
                        ExplosionAudio.Play();

                    }

                }
                else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterOne" || GrenadeClicked && targetPlayer.characterObject.name == "characterOne")
                {
                    if (PlayerHurtExplosionOne != null)
                    {
                        PlayerHurtExplosionOne.gameObject.SetActive(true);
                        PlayerHurtExplosionOne.Play();
                        ExplosionAudio.Play();
                    }

                }
                else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterTwo" || GrenadeClicked && targetPlayer.characterObject.name == "characterTwo")
                {
                    if (PlayerHurtExplosionTwo != null)
                    {
                        PlayerHurtExplosionTwo.gameObject.SetActive(true);
                        PlayerHurtExplosionTwo.Play();
                        ExplosionAudio.Play();

                    }

                }
                else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterThree" || GrenadeClicked && targetPlayer.characterObject.name == "characterThree")
                {
                    if (PlayerHurtExplosionThree != null)
                    {
                        PlayerHurtExplosionThree.gameObject.SetActive(true);
                        PlayerHurtExplosionThree.Play();
                        ExplosionAudio.Play();

                    }

                }
                else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterFour" || GrenadeClicked && targetPlayer.characterObject.name == "characterFour")
                {
                    if (PlayerHurtExplosionFour != null)
                    {
                        PlayerHurtExplosionFour.gameObject.SetActive(true);
                        PlayerHurtExplosionFour.Play();
                        ExplosionAudio.Play();

                    }

                }
                else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterFive" || GrenadeClicked && targetPlayer.characterObject.name == "characterFive")
                {
                    if (PlayerHurtExplosionFive != null)
                    {
                        PlayerHurtExplosionFive.gameObject.SetActive(true);
                        PlayerHurtExplosionFive.Play();
                        ExplosionAudio.Play();

                    }

                }

                if (targetPlayer.lives > 0 && pistolClicked || targetPlayer.lives > 0 && ak47Clicked || targetPlayer.lives > 0 && m15Clicked || targetPlayer.lives > 0 && SniperClicked || targetPlayer.lives > 0 && ShotgunClicked)
                {
                    Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                    Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;

                    targetAnimator.SetBool("IsHitExplosion", true);
                    targetAnimator.CrossFade("ExplosionHurt", 0.05f);


                    yield return new WaitForSeconds(4f);

                    targetAnimator.SetBool("IsHitExplosion", false);
                    targetAnimator.SetBool("IsGettingUp", true);
                    targetAnimator.CrossFade("GettingUp", 0.05f);


                    yield return new WaitForSeconds(2f);


                    Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                    float tPositionActivePlayer = 0;
                    float moveSpeedActivePlayer = 5.0f;

                    while (tPositionActivePlayer < 1)
                    {
                        tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                        targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                    }





                    targetAnimator.SetBool("IsGettingUp", false);
                    targetAnimator.CrossFade("Idle", 0.05f);
                    Quaternion endRotation = startRotation;
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                    }

                    RemoveCharacterUI();
                }
                else if (targetPlayer.lives > 0 && RocketLauncherClicked || targetPlayer.lives > 0 && GrenadeClicked)
                {
                    Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                    Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;
                    // yield return new WaitForSeconds(0.3f);

                    //  targetAnimator.applyRootMotion = true;


                    targetAnimator.SetBool("IsHitExplosion", true);
                    targetAnimator.CrossFade("ExplosionHurt", 0.05f);


                    yield return new WaitForSeconds(4f);

                    targetAnimator.SetBool("IsHitExplosion", false);
                    targetAnimator.SetBool("IsGettingUp", true);
                    targetAnimator.CrossFade("GettingUp", 0.05f);


                    yield return new WaitForSeconds(2f);


                    Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                    float tPositionActivePlayer = 0;
                    float moveSpeedActivePlayer = 5.0f;

                    while (tPositionActivePlayer < 1)
                    {
                        tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                        targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                    }





                    targetAnimator.SetBool("IsGettingUp", false);
                    targetAnimator.CrossFade("Idle", 0.05f);
                    Quaternion endRotation = startRotation;
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                    }

                    RemoveCharacterUI();

                }
                else if (targetPlayer.lives <= 0)
                {
                    targetAnimator.applyRootMotion = true;
                    targetAnimator.SetBool("IsDead", true);
                    targetAnimator.CrossFade("CharDeath", 0.05f);

                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = targetPlayer.playerName + " gave up the Ghost";
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";

                    Entity playerToBeRemoved = targetPlayer;
                    RemoveCharacterUI();

                    if (targetPlayer.WeaponInfo.Count > 0 && attacker.WeaponInfo.Count > 0)
                    {
                        for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                        {
                            Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];
                            Entity.WeaponInformation existingWeapon = attacker.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                            if (existingWeapon != null)
                            {


                                existingWeapon.bullets += selectedWeapon.bullets;
                                RemoveCharacterUI();

                            }
                        }

                    }
                    else if (attacker.WeaponInfo.Count == 0 && targetPlayer.WeaponInfo.Count > 0)
                    {
                        for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                        {

                            Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];



                            Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                            {
                                name = selectedWeapon.name,
                                range = selectedWeapon.range,
                                damage = selectedWeapon.damage,
                                bullets = selectedWeapon.bullets
                            };

                            attacker.WeaponInfo.Add(weaponInfo);
                            RemoveCharacterUI();
                        }
                    }


                    attacker.money += targetPlayer.money;


                    for (int i = playerList.Count - 1; i >= 0; i--)
                    {
                        Entity player = playerList[i];
                        if (player == playerToBeRemoved)
                        {
                            playerList.RemoveAt(i);
                            break;
                        }
                    }

                    if (targetPlayerIndex < activePlayer)
                    {
                        activePlayer = activePlayer - 1;

                    }

                    RemoveCharacterUI();




                }
            }
        }
        else
        {

            if (pistolClicked)
            {
                targetPlayer.lives = targetPlayer.lives - pistolEntity.damage;
            }
            else if (ak47Clicked)
            {
                targetPlayer.lives = targetPlayer.lives - AK47Entity.damage;
            }
            else if (m15Clicked)
            {
                targetPlayer.lives = targetPlayer.lives - M15Entity.damage;
            }
            else if (RocketLauncherClicked)
            {
                targetPlayer.lives = targetPlayer.lives - RocketLauncherEntity.damage;
            }
            else if (SniperClicked)
            {
                targetPlayer.lives = targetPlayer.lives - sniperEntity.damage;
            }
            else if (GrenadeClicked)
            {
                targetPlayer.lives = targetPlayer.lives - grenadeEntity.damage;
            }
            else if (ShotgunClicked)
            {
                targetPlayer.lives = targetPlayer.lives - shotgunEntity.damage;
            }


            if (RocketLauncherClicked && targetPlayer.characterObject.name == "character" || GrenadeClicked && targetPlayer.characterObject.name == "character")
            {
                if (PlayerHurtExplosion != null)
                {
                    PlayerHurtExplosion.gameObject.SetActive(true);
                    PlayerHurtExplosion.Play();
                    ExplosionAudio.Play();

                }

            }
            else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterOne" || GrenadeClicked && targetPlayer.characterObject.name == "characterOne")
            {
                if (PlayerHurtExplosionOne != null)
                {
                    PlayerHurtExplosionOne.gameObject.SetActive(true);
                    PlayerHurtExplosionOne.Play();
                    ExplosionAudio.Play();
                }

            }
            else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterTwo" || GrenadeClicked && targetPlayer.characterObject.name == "characterTwo")
            {
                if (PlayerHurtExplosionTwo != null)
                {
                    PlayerHurtExplosionTwo.gameObject.SetActive(true);
                    PlayerHurtExplosionTwo.Play();
                    ExplosionAudio.Play();

                }

            }
            else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterThree" || GrenadeClicked && targetPlayer.characterObject.name == "characterThree")
            {
                if (PlayerHurtExplosionThree != null)
                {
                    PlayerHurtExplosionThree.gameObject.SetActive(true);
                    PlayerHurtExplosionThree.Play();
                    ExplosionAudio.Play();

                }

            }
            else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterFour" || GrenadeClicked && targetPlayer.characterObject.name == "characterFour")
            {
                if (PlayerHurtExplosionFour != null)
                {
                    PlayerHurtExplosionFour.gameObject.SetActive(true);
                    PlayerHurtExplosionFour.Play();
                    ExplosionAudio.Play();

                }

            }
            else if (RocketLauncherClicked && targetPlayer.characterObject.name == "characterFive" || GrenadeClicked && targetPlayer.characterObject.name == "characterFive")
            {
                if (PlayerHurtExplosionFive != null)
                {
                    PlayerHurtExplosionFive.gameObject.SetActive(true);
                    PlayerHurtExplosionFive.Play();
                    ExplosionAudio.Play();

                }

            }

            if (targetPlayer.lives > 0 && pistolClicked || targetPlayer.lives > 0 && ak47Clicked || targetPlayer.lives > 0 && m15Clicked || targetPlayer.lives > 0 && SniperClicked || targetPlayer.lives > 0 && ShotgunClicked)
            {
                Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;

                targetAnimator.SetBool("IsHitExplosion", true);
                targetAnimator.CrossFade("ExplosionHurt", 0.05f);

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                yield return new WaitForSeconds(4f);

                targetAnimator.SetBool("IsHitExplosion", false);
                targetAnimator.SetBool("IsGettingUp", true);
                targetAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }





                targetAnimator.SetBool("IsGettingUp", false);
                targetAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                }

              

                
                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);

                RemoveCharacterUI();
            }
            else if (targetPlayer.lives > 0 && RocketLauncherClicked || targetPlayer.lives > 0 && GrenadeClicked)
            {
                Vector3 startPositionForActivePlayer = targetPlayer.characterObject.transform.localPosition;
                Quaternion startRotation = targetPlayer.characterObject.transform.localRotation;
                // yield return new WaitForSeconds(0.3f);

                //  targetAnimator.applyRootMotion = true;


                targetAnimator.SetBool("IsHitExplosion", true);
                targetAnimator.CrossFade("ExplosionHurt", 0.05f);

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                yield return new WaitForSeconds(4f);

                targetAnimator.SetBool("IsHitExplosion", false);
                targetAnimator.SetBool("IsGettingUp", true);
                targetAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    targetPlayer.characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }





                targetAnimator.SetBool("IsGettingUp", false);
                targetAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    targetPlayer.characterObject.transform.localRotation = Quaternion.Slerp(startRotation, endRotation, t);

                }

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);

                RemoveCharacterUI();

            }
            else if (targetPlayer.lives <= 0)
            {
                targetAnimator.applyRootMotion = true;
                targetAnimator.SetBool("IsDead", true);
                targetAnimator.CrossFade("CharDeath", 0.05f);

                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[targetPlayerIndex % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();

                yield return new WaitForSeconds(2f);
                rollDiceText.text = targetPlayer.playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                livesUIAnimation[targetPlayerIndex % playerList.Count].SetBool("IsLosingLives", false);

                Entity playerToBeRemoved = targetPlayer;
                RemoveCharacterUI();

                if (targetPlayer.WeaponInfo.Count > 0 && attacker.WeaponInfo.Count > 0)
                {
                    for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                    {
                        Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];
                        Entity.WeaponInformation existingWeapon = attacker.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                        if (existingWeapon != null)
                        {


                            existingWeapon.bullets += selectedWeapon.bullets;
                            RemoveCharacterUI();

                        }
                    }
                }
                else if (attacker.WeaponInfo.Count == 0 && targetPlayer.WeaponInfo.Count > 0)
                {
                    for (int i = 0; i < targetPlayer.WeaponInfo.Count; i++)
                    {

                        Entity.WeaponInformation selectedWeapon = targetPlayer.WeaponInfo[i];



                        Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                        {
                            name = selectedWeapon.name,
                            range = selectedWeapon.range,
                            damage = selectedWeapon.damage,
                            bullets = selectedWeapon.bullets
                        };

                        attacker.WeaponInfo.Add(weaponInfo);
                        RemoveCharacterUI();
                    }
                }


                attacker.money += targetPlayer.money;
                targetAnimator.applyRootMotion = false;


                for (int i = playerList.Count - 1; i >= 0; i--)
                {
                    Entity player = playerList[i];
                    if (player == playerToBeRemoved)
                    {
                        playerList.RemoveAt(i);
                        break;
                    }
                }

                if (targetPlayerIndex < activePlayer)
                {
                    activePlayer = activePlayer - 1;

                }

                RemoveCharacterUI();




            }
        }

       
        
       






        yield return new WaitForSeconds(1f);
        

        playerAnimator.SetBool("IsActuallyAttackingLMAO", false);
        playerAnimator.CrossFade("Idle", 1.2f);

        
        
        NPCMovementSpeedWalk();
        CrowdScreamingAudio.Stop();
        CrowdScreamingAudio.volume = 0.201f;


        /*  Quaternion startRotationBack = attacker.characterObject.transform.rotation;
            Quaternion endRotationBack = Quaternion.Euler(0, 90, 0);
            float tBack = 0;
            while (tBack < 1)
            {
                tBack += Time.deltaTime * turnSpeed;
                attacker.characterObject.transform.rotation = Quaternion.Slerp(startRotationBack, endRotationBack, tBack);

            }
        */

        attacker.playerAnimator.applyRootMotion = false;

        if (pistolClicked)
        {
            Pistol.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                pistolPlayerFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                pistolPlayerOneFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                pistolPlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                pistolPlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                pistolPlayerFourFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                pistolPlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
            }
        }
        else if (ak47Clicked)
        {
            Ak47.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                Ak47PlayerFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                Ak47PlayerOneFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                Ak47PlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                Ak47PlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                Ak47PlayerFourFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                Ak47PlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
            }

        }
        else if (m15Clicked)
        {
            M15.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                M15PlayerFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                M15PlayerOneFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                M15PlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                M15PlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                M15PlayerFourFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                M15PlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
            }
        }
        else if (RocketLauncherClicked)
        {
            //
                RocketLauncher.gameObject.SetActive(false);
                playerList[activePlayer % playerList.Count].RocketLauncherHead.gameObject.SetActive(true);
            

            RocketLauncherLightsCheckNullFalse();
            RocketLauncherAudio.Stop();
           
        }
        else if (SniperClicked)
        {
            SniperRifle.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                SniperRifleFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                SniperRifleOneFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                SniperRifleTwoFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                SniperRifleThreeFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                SniperRifleFourFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                SniperRifleFiveFlash.Stop();
                GunShotsAudio.Stop();
            }
        }
        else if (GrenadeClicked)
        {
            Grenade.gameObject.SetActive(false);
            ExplosionAudio.Stop();
        }
        else if (ShotgunClicked)
        {
            Shotgun.gameObject.SetActive(false);
            if (attacker.characterObject.name == "character")
            {
                ShotgunPlayerFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterOne")
            {
                ShotgunPlayerOneFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterTwo")
            {
                ShotgunPlayerTwoFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterThree")
            {
                ShotgunPlayerThreeFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFour")
            {
                ShotgunPlayerFourFlash.Stop();
                GunShotsAudio.Stop();
            }
            else if (attacker.characterObject.name == "characterFive")
            {
                ShotgunPlayerFiveFlash.Stop();
                GunShotsAudio.Stop();
            }
        }

        NPCMovementSpeedWalk();

        yield return new WaitForSeconds(2f);


        targetPlayer.playerAnimator.applyRootMotion = true;

        if (targetPlayer.position > attacker.position && targetPlayer.position <= 20 && targetPlayer.lives > 0)
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);


            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 20 && targetPlayer.position <= 30 && targetPlayer.lives > 0)
        {

            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 30 && targetPlayer.position <= 49 && targetPlayer.lives > 0)
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (targetPlayer.position > attacker.position && targetPlayer.position > 49 && targetPlayer.position <= 58 && targetPlayer.lives > 0)
        {
            targetAnimator.SetBool("IsTurning", true);
            targetAnimator.CrossFade("Turning", 0.02f);

            yield return new WaitForSeconds(1.7f);

            Quaternion startRotation = targetPlayer.characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                targetPlayer.characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }

        if (targetPlayer.lives > 0)
        {
            targetAnimator.SetBool("IsTurning", false);
            targetAnimator.CrossFade("Idle", 0.08f);
        }



        StartCoroutine(BlurEffects());
        ResetCameraZoom();

        yield return new WaitForSeconds(2f);

        //play fall animation 
        cameraController.target = attacker.playerObject.transform;

        int routePositionForNodes = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;

        for (int i = 0; i <= currentRoute.childNodeList.Count ; i++)
        {
            Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];
            currentIntensity = 0f;
            Color finalColor = Color.red * currentIntensity;
            changeNodeTexture.SetColor("_EmissionColor", finalColor);
        }


        //

        if (IsAttacking)
        {
            rollDiceButton.gameObject.SetActive(false);
            endTurn.gameObject.SetActive(true);
        }
        



        playerInrangeBtns[0].gameObject.SetActive(false);
        playerInrangeBtns[1].gameObject.SetActive(false);
        playerInrangeBtns[2].gameObject.SetActive(false);
        playerInrangeBtns[3].gameObject.SetActive(false);
        playerInrangeBtns[4].gameObject.SetActive(false);
        playerInrangeBtns[5].gameObject.SetActive(false);




        weaponOneRangeText.gameObject.SetActive(false);
        weaponTwoRangeText.gameObject.SetActive(false);
        weaponThreeRangeText.gameObject.SetActive(false);
        weaponFourRangeText.gameObject.SetActive(false);
        weaponFiveRangeText.gameObject.SetActive(false);
        weaponSixRangeText.gameObject.SetActive(false);
        weaponSevenRangeText.gameObject.SetActive(false);
        BackAttackPanelButton.gameObject.SetActive(true);


          attacker.playerAnimator.applyRootMotion = true;
        //

        if (attacker.position <= 20 && attacker.position > targetPlayer.position)
        {
           
            
                playerAnimator.SetBool("IsTurning", true);
                playerAnimator.CrossFade("Turning", 0.02f);

                yield return new WaitForSeconds(1.7f);
            
           

            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 90, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          //  yield return new WaitForSeconds(1f);
        }
        else if(attacker.position > 20 && attacker.position <= 30 && attacker.position > targetPlayer.position)
        {
            
                playerAnimator.SetBool("IsTurning", true);
                playerAnimator.CrossFade("Turning", 0.02f);

                yield return new WaitForSeconds(1.7f);
            

          

            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 0, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          //  yield return new WaitForSeconds(1f);
        }
        else if (attacker.position > 30 && attacker.position <= 49 && attacker.position > targetPlayer.position)
        {
            
            
                playerAnimator.SetBool("IsTurning", true);
                playerAnimator.CrossFade("Turning", 0.02f);

                yield return new WaitForSeconds(1.7f);
            

            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 270, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
          //  yield return new WaitForSeconds(1f);
        }
        else if(attacker.position > 49 && attacker.position <= 58 && attacker.position > targetPlayer.position)
        {
                playerAnimator.SetBool("IsTurning", true);
                playerAnimator.CrossFade("Turning", 0.02f);

                yield return new WaitForSeconds(1.7f);
            

            Quaternion startRotationEnd = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
            Quaternion endRotationEnd = Quaternion.Euler(0, 180, 0);
            float tEnd = 0;
            while (tEnd < 1)
            {
                tEnd += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotationEnd, endRotationEnd, tEnd);

            }
           // yield return new WaitForSeconds(1f);
        }
      




            playerAnimator.SetBool("IsTurning", false);
        playerAnimator.CrossFade("Idle", 0.08f);

        yield return new WaitForSeconds(0.1f);


        GameObject pistol = currentPlayer.Pistol;
        pistol.gameObject.SetActive(false);

        GameObject sniper = currentPlayer.SniperRifle;
        sniper.gameObject.SetActive(false);

        GameObject grenade = currentPlayer.Grenade;
        grenade.gameObject.SetActive(false);

        playerAnimator.SetBool("IsAttacking", false);
        playerAnimator.CrossFade("Idle", 0.02f);


        StartCoroutine(BlurEffects());

        GameObject ak47 = currentPlayer.Ak47;
            ak47.gameObject.SetActive(false);

            GameObject shotgun = currentPlayer.Shotgun;
            shotgun.gameObject.SetActive(false);

            GameObject m15 = currentPlayer.M15;
            m15.gameObject.SetActive(false);

            GameObject rocketLauncher = currentPlayer.RocketLauncher;
            rocketLauncher.gameObject.SetActive(false);


        bool pistolClickedEnd =  attacker.PistolCLicked = false;
        bool  ak47ClickedEnd = attacker.Ak47Clicked =  false;
        bool m15ClickedEnd = attacker.M15Clicked = false;
        bool  RocketLauncherClickedEnd = attacker.RocketLauncherClicked = false;
        bool SniperClickedEnd = attacker.SniperClicked =  false;
        bool GrenadeClickedEnd = attacker.GrenadeClicked =  false;
        bool ShotgunClickedEnd = attacker.ShotgunClicked =  false;

        attacker.playerAnimator.applyRootMotion = false;
        // bool isAttacking = attacker.isAttacking = false;

        targetPlayer.playerAnimator.applyRootMotion = false;

        isUsingShieldBool = false;
        isNotUsingShieldBool = false;

        
        if(playerList.Count == 1)
        {
            StartCoroutine(playerWonFunction(attacker));
        }
        else
        {
            CharacterUIPanel.gameObject.SetActive(true);
        }
      

       bool hasAttackedPlayer =  attacker.hasAttackedPlayer = true;


      /*  Entity playerToBeRemoved = targetPlayer;
        playerList.Remove(playerToBeRemoved);
        */

        // StartCoroutine(attackTurnOrder());





    }


    


    public void ResetCameraZoom()
    {
        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 2.8f;
            cameraControllerScript.offset = -2.9f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.smoothSpeed = 8;
        }
    }


    public void CameraSlowDown()
    {
        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 2.8f;
            cameraControllerScript.offset = -2.9f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.smoothSpeed = 3;
     
        
        }
    }

    public void CameraSlowDownCarChaseTransition()
    {
        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 1.8f;
            cameraControllerScript.offset = -0.4f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.smoothSpeed = 6;


        }
    }

    public void GodEyeCameraLook()
    {
        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 0f;
            cameraControllerScript.offset = -2.4f;
            cameraControllerScript.height = -1.5f;
            cameraControllerScript.smoothSpeed = 4;


        }
    }


    public void CameraSwitchingPlayers()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {

            depthOfField.focusDistance.value = 2f;
            depthOfField.aperture.value = 16.5f;
            depthOfField.focalLength.value = 81f;
        }


        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 6f;
            cameraControllerScript.offset = -7f;
            cameraControllerScript.height = 3f;
            cameraControllerScript.smoothSpeed = 2.1f;
        }
    }

    public void CameraMoveBackToNormal()
    {
        if (postProcessVolume.profile.TryGetSettings(out depthOfField))
        {

            depthOfField.focusDistance.value = 2.5f;
            depthOfField.aperture.value = 4.8f;
            depthOfField.focalLength.value = 65f;
        }


        CameraController cameraControllerScript = Camera.main.GetComponent<CameraController>();
        if (cameraControllerScript != null)
        {
            cameraControllerScript.ResetZoom();
            cameraControllerScript.distance = 2.8f;
            cameraControllerScript.offset = -2.9f;
            cameraControllerScript.height = 0.95f;
            cameraControllerScript.smoothSpeed = 1.4f;
        }
    }

    

    public void ReduceCarSpeed()
    {
      
        ObjectMovementScriptPolice.MovementSpeed = 0f;
        ObjectMovementRedCar.MovementSpeed = 0f;
        ObjectMovementChaseObject.MovementSpeed = 0f;
        ObjectMovementYellowCar.MovementSpeed = 0f;
    }

    public void ResetCarSpeed()
    {

        ObjectMovementScriptPolice.MovementSpeed = 3f;
        ObjectMovementRedCar.MovementSpeed = 3f;
        ObjectMovementChaseObject.MovementSpeed = 3f;
        ObjectMovementYellowCar.MovementSpeed = 3f;


    }

    

    public void EverythingFreezes()
    {

        FallingMoney.Pause();

        GunInCarFlash[0].Pause();
        GunInCarFlash[1].Pause();
        GunInCarFlash[2].Pause();
        GunInCarFlash[3].Pause();
        GunInCarFlash[4].Pause();
        GunInCarFlash[5].Pause();


        NPCMovementRunning[0].NPCFreezesVoid();
        NPCMovementRunning[1].NPCFreezesVoid();
        NPCMovementRunning[2].NPCFreezesVoid();
        NPCMovementRunning[3].NPCFreezesVoid();
        NPCMovementRunning[4].NPCFreezesVoid();
        NPCMovementRunning[5].NPCFreezesVoid();
        NPCMovementRunning[6].NPCFreezesVoid();
        NPCMovementRunning[7].NPCFreezesVoid();
        NPCMovementRunning[8].NPCFreezesVoid();

        RoadSeperatorMovementRunning[0].NPCFreezesVoid();
        RoadSeperatorMovementRunning[1].NPCFreezesVoid();
        RoadSeperatorMovementRunning[2].NPCFreezesVoid();
        RoadSeperatorMovementRunning[3].NPCFreezesVoid();
        RoadSeperatorMovementRunning[4].NPCFreezesVoid();
        RoadSeperatorMovementRunning[5].NPCFreezesVoid();
        RoadSeperatorMovementRunning[6].NPCFreezesVoid();
        RoadSeperatorMovementRunning[7].NPCFreezesVoid();
        RoadSeperatorMovementRunning[8].NPCFreezesVoid();
        RoadSeperatorMovementRunning[9].NPCFreezesVoid();
        RoadSeperatorMovementRunning[10].NPCFreezesVoid();
        RoadSeperatorMovementRunning[11].NPCFreezesVoid();
        RoadSeperatorMovementRunning[12].NPCFreezesVoid();
       




        ObjectMovementScriptPolice.MovementSpeed = 0f;
        ObjectMovementRedCar.MovementSpeed = 0f;
        ObjectMovementChaseObject.MovementSpeed = 0f;
        ObjectMovementYellowCar.MovementSpeed = 0f;

        NPCMovementRunning[0].MovementSpeed = 0;
        NPCMovementRunning[1].MovementSpeed = 0;
        NPCMovementRunning[2].MovementSpeed = 0;
        NPCMovementRunning[3].MovementSpeed = 0;
        NPCMovementRunning[4].MovementSpeed = 0;
        NPCMovementRunning[5].MovementSpeed = 0;
        NPCMovementRunning[6].MovementSpeed = 0;
        NPCMovementRunning[7].MovementSpeed = 0;
        NPCMovementRunning[8].MovementSpeed = 0;

        RoadSeperatorMovementRunning[0].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[1].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[2].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[3].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[4].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[5].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[6].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[7].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[8].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[9].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[10].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[11].MovementSpeed = 0f;
        RoadSeperatorMovementRunning[12].MovementSpeed = 0f;

        CharacterInCarAnimation.speed = 0f;
        CharacterInCarAnimationOne.speed = 0f;
        CharacterInCarAnimationTwo.speed = 0f;
        CharacterInCarAnimationThree.speed = 0f;
        CharacterInCarAnimationFour.speed = 0f;
        CharacterInCarAnimationFive.speed = 0f;

        for (int i = 0; i < CarsOnOtherSide.Length; i++)
        {
            CarsOnOtherSide[i].MovementSpeed = 0f;
        }


        timeControllerScript.timeMultiplier = 0f;

        CarsAreMovingChaseAudio.Pause();
        PoliceSirensAudio.Pause();
        GunShotsAudio.Pause();
        CrowdScreamingAudio.Pause();

    }

    public void EverythingUnFreezes()
    {

        FallingMoney.Play();

        GunInCarFlash[0].Play();
        GunInCarFlash[1].Play();
        GunInCarFlash[2].Play();
        GunInCarFlash[3].Play();
        GunInCarFlash[4].Play();
        GunInCarFlash[5].Play();


        NPCMovementRunning[0].NPCUnFreezesVoid();
        NPCMovementRunning[1].NPCUnFreezesVoid();
        NPCMovementRunning[2].NPCUnFreezesVoid();
        NPCMovementRunning[3].NPCUnFreezesVoid();
        NPCMovementRunning[4].NPCUnFreezesVoid();
        NPCMovementRunning[5].NPCUnFreezesVoid();
        NPCMovementRunning[6].NPCUnFreezesVoid();
        NPCMovementRunning[7].NPCUnFreezesVoid();
        NPCMovementRunning[8].NPCUnFreezesVoid();


        RoadSeperatorMovementRunning[0].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[1].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[2].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[3].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[4].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[5].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[6].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[7].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[8].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[9].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[10].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[11].NPCUnFreezesVoid();
        RoadSeperatorMovementRunning[12].NPCUnFreezesVoid();



        ObjectMovementScriptPolice.MovementSpeed = 3f;
        ObjectMovementRedCar.MovementSpeed = 3f;
        ObjectMovementChaseObject.MovementSpeed = 3f;
        ObjectMovementYellowCar.MovementSpeed = 3f;

        NPCMovementRunning[0].MovementSpeed = 1.5f;
        NPCMovementRunning[1].MovementSpeed = 1.5f;
        NPCMovementRunning[2].MovementSpeed = 1.5f;
        NPCMovementRunning[3].MovementSpeed = 1.5f;
        NPCMovementRunning[4].MovementSpeed = 1.5f;
        NPCMovementRunning[5].MovementSpeed = 1.5f;
        NPCMovementRunning[6].MovementSpeed = 1.5f;
        NPCMovementRunning[7].MovementSpeed = 1.5f;
        NPCMovementRunning[8].MovementSpeed = 1.5f;

        RoadSeperatorMovementRunning[0].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[1].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[2].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[3].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[4].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[5].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[6].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[7].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[8].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[9].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[10].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[11].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[12].MovementSpeed = 1.5f;

        CharacterInCarAnimation.speed = 1f;
        CharacterInCarAnimationOne.speed = 1f;
        CharacterInCarAnimationTwo.speed = 1f;
        CharacterInCarAnimationThree.speed = 1f;
        CharacterInCarAnimationFour.speed = 1f;
        CharacterInCarAnimationFive.speed = 1f;


        for (int i = 0; i < CarsOnOtherSide.Length; i++)
        {
            CarsOnOtherSide[i].MovementSpeed = 3f;
        }

        timeControllerScript.timeMultiplier = 1000f;

        CarsAreMovingChaseAudio.UnPause();
        PoliceSirensAudio.UnPause();
        GunShotsAudio.UnPause();
        CrowdScreamingAudio.UnPause();
    }

    public void NPCMovementSpeedRun()
    {
        NPCMovementRunning[0].MovementSpeed = 1.5f;
        NPCMovementRunning[1].MovementSpeed = 1.5f;
        NPCMovementRunning[2].MovementSpeed = 1.5f;
        NPCMovementRunning[3].MovementSpeed = 1.5f;
        NPCMovementRunning[4].MovementSpeed = 1.5f;
        NPCMovementRunning[5].MovementSpeed = 1.5f;
        NPCMovementRunning[6].MovementSpeed = 1.5f;
        NPCMovementRunning[7].MovementSpeed = 1.5f;
        NPCMovementRunning[8].MovementSpeed = 1.5f;



        RoadSeperatorMovementRunning[0].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[1].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[2].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[3].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[4].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[5].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[6].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[7].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[8].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[9].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[10].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[11].MovementSpeed = 1.5f;
        RoadSeperatorMovementRunning[12].MovementSpeed = 1.5f;





        NPCMovementRunning[0].NPCRunning();
        NPCMovementRunning[1].NPCRunning();
        NPCMovementRunning[2].NPCRunning();
        NPCMovementRunning[3].NPCRunning();
        NPCMovementRunning[4].NPCRunning();
        NPCMovementRunning[5].NPCRunning();
        NPCMovementRunning[6].NPCRunning();
        NPCMovementRunning[7].NPCRunning();
        NPCMovementRunning[8].NPCRunning();


        RoadSeperatorMovementRunning[0].NPCRunning();
        RoadSeperatorMovementRunning[1].NPCRunning();
        RoadSeperatorMovementRunning[2].NPCRunning();
        RoadSeperatorMovementRunning[3].NPCRunning();
        RoadSeperatorMovementRunning[4].NPCRunning();
        RoadSeperatorMovementRunning[5].NPCRunning();
        RoadSeperatorMovementRunning[6].NPCRunning();
        RoadSeperatorMovementRunning[7].NPCRunning();
        RoadSeperatorMovementRunning[8].NPCRunning();
        RoadSeperatorMovementRunning[9].NPCRunning();
        RoadSeperatorMovementRunning[10].NPCRunning();
        RoadSeperatorMovementRunning[11].NPCRunning();
        RoadSeperatorMovementRunning[12].NPCRunning();






        //

    }

    public void NPCMovementSpeedWalk()
    {

        
        NPCMovementRunning[0].MovementSpeed = 0.5f;
        NPCMovementRunning[1].MovementSpeed = 0.5f;
        NPCMovementRunning[2].MovementSpeed = 0.5f;
        NPCMovementRunning[3].MovementSpeed = 0.5f;
        NPCMovementRunning[4].MovementSpeed = 0.5f;
        NPCMovementRunning[5].MovementSpeed = 0.5f;
        NPCMovementRunning[6].MovementSpeed = 0.5f;
        NPCMovementRunning[7].MovementSpeed = 0.5f;
        NPCMovementRunning[8].MovementSpeed = 0.5f;




        RoadSeperatorMovementRunning[0].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[1].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[2].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[3].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[4].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[5].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[6].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[7].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[8].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[9].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[10].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[11].MovementSpeed = 0.5f;
        RoadSeperatorMovementRunning[12].MovementSpeed = 0.5f;


        NPCMovementRunning[0].NPCWalking();
        NPCMovementRunning[1].NPCWalking();
        NPCMovementRunning[2].NPCWalking();
        NPCMovementRunning[3].NPCWalking();
        NPCMovementRunning[4].NPCWalking();
        NPCMovementRunning[5].NPCWalking();
        NPCMovementRunning[6].NPCWalking();
        NPCMovementRunning[7].NPCWalking();
        NPCMovementRunning[8].NPCWalking();


        RoadSeperatorMovementRunning[0].NPCWalking();
        RoadSeperatorMovementRunning[1].NPCWalking();
        RoadSeperatorMovementRunning[2].NPCWalking();
        RoadSeperatorMovementRunning[3].NPCWalking();
        RoadSeperatorMovementRunning[4].NPCWalking();
        RoadSeperatorMovementRunning[5].NPCWalking();
        RoadSeperatorMovementRunning[6].NPCWalking();
        RoadSeperatorMovementRunning[7].NPCWalking();
        RoadSeperatorMovementRunning[8].NPCWalking();
        RoadSeperatorMovementRunning[9].NPCWalking();
        RoadSeperatorMovementRunning[10].NPCWalking();
        RoadSeperatorMovementRunning[11].NPCWalking();
        RoadSeperatorMovementRunning[12].NPCWalking();





    }



    void RobBankYesClicked()
    {

        StartCoroutine(RobBankYesClickedCoroutine());

    }

    void RobBankNoClicked()
    {
        StartCoroutine(RobBankNoClickedCoroutine());
    }

    void RobBankDiceRolledClicked()
    {
        
        StartCoroutine(RobBankDiceRolledClickedCoroutine());
    }

    public IEnumerator PlayerGotCaught(int RobBankDiceRandomizer)
    {

      
        //



        // Vector3 startPositionForJailDoor = JailBuildingCellDoor.transform.localPosition;
        //get caught and sent to jail code
        ChaseScenePanel.gameObject.SetActive(false);

       


        //


        yield return new WaitForSeconds(1f);

        RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
        ChaseScenePanelVerdict.gameObject.SetActive(true);

        yield return new WaitForSeconds(1f);

        RobberyCardVerdictText.text = "You got Caught....";
        yield return new WaitForSeconds(2f);
        RobberyCardVerdictText.text = "";


        yield return new WaitForSeconds(2f);

        ChaseScenePanel.gameObject.SetActive(false);
        ReduceCarSpeed();
        MoneyFallingAway.gameObject.SetActive(false);


        if (playerList[activePlayer].characterObject.name == "character")
        {
            CharacterInCarGun.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterOne")
        {
            CharacterInCarGunOne.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterTwo")
        {
            CharacterInCarGunTwo.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterThree")
        {
            CharacterInCarGunThree.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterFour")
        {
            CharacterInCarGunFour.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterFive")
        {
            CharacterInCarGunFive.gameObject.SetActive(false);
        }
        GunShotsAudio.Stop();
        PoliceSirensAudio.Stop();
        CarsAreMovingChaseAudio.Stop();
        CrowdScreamingAudio.Stop();
        PoliceStopSquareAudio.Play();


        if (playerList[activePlayer].characterObject.name == "character")
        {
            CharacterInCarAnimation.SetBool("GotCaught", true);
            CharacterInCarAnimation.CrossFade("Waving", 0.02f);

          

           
        }
        else if (playerList[activePlayer].characterObject.name == "characterOne")
        {
            CharacterInCarAnimationOne.SetBool("GotCaught", true);
            CharacterInCarAnimationOne.CrossFade("Waving", 0.02f);

        }
        else if (playerList[activePlayer].characterObject.name == "characterTwo")
        {
            CharacterInCarAnimationTwo.SetBool("GotCaught", true);
            CharacterInCarAnimationTwo.CrossFade("Waving", 0.02f);

        }
        else if (playerList[activePlayer].characterObject.name == "characterThree")
        {
            CharacterInCarAnimationThree.SetBool("GotCaught", true);
            CharacterInCarAnimationThree.CrossFade("Waving", 0.02f);

        }
        else if (playerList[activePlayer].characterObject.name == "characterFour")
        {
            CharacterInCarAnimationFour.SetBool("GotCaught", true);
            CharacterInCarAnimationFour.CrossFade("Waving", 0.02f);

        }
        else if (playerList[activePlayer].characterObject.name == "characterFive")
        {
            CharacterInCarAnimationFive.SetBool("GotCaught", true);
            CharacterInCarAnimationFive.CrossFade("Waving", 0.02f);

        }



        yield return new WaitForSeconds(3f);

        ChaseScenePanelVerdict.gameObject.SetActive(false);
        DepthOfFieldClear();
        ResetCameraZoom();

        PoliceStopSquareAudio.Stop();
        StartCoroutine(CameraSwitchToJail());
        AllCharacterPanelsHolder.gameObject.SetActive(true);


        yield return new WaitForSeconds(2f);
 

        playerList[activePlayer].money /= 2;
        moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
        moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);

        RemoveCharacterUI();

        NPCMovementSpeedWalk();

        yield return new WaitForSeconds(2f);

        // yield return new WaitForSeconds(1f);
        //
        JailCellClosingAudio.Play();
        JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
        JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
       

        

        

      //  JailBuildingCellDoorAnimator.SetBool("IsInJail", false);
      //  JailBuildingCellDoorAnimator.CrossFade("New State", 0.02f);


      /*  Vector3 endPositionForJailDoor = startPositionForJailDoor;
        float tPosition = 0;
        float moveSpeed = 5.0f;

        while (tPosition < 1)
        {
            tPosition += Time.deltaTime * moveSpeed;
            JailBuildingCellDoor.transform.localPosition = Vector3.Lerp(startPositionForJailDoor, endPositionForJailDoor, tPosition);
        }
      */


        if (playerList[activePlayer].playerType == Entity.PlayerTypes.HUMAN)
        {
            yield return new WaitForSeconds(4f);
            StartCoroutine(CameraSwitchFromJailToPlayer());
            yield return new WaitForSeconds(1f);
            CharacterUIPanel.gameObject.SetActive(true);
            AllCharacterPanelsHolder.SetActive(true);
            AllCharacterPanelsHolder.gameObject.SetActive(true);
            SecondCharacterUIPanel.gameObject.SetActive(true);
            moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
        }
     
        
        if (playerList[activePlayer].characterObject.name == "character")
        {
            CharacterInCar.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterOne")
        {
            characterInCarOne.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterTwo")
        {
            CharacterInCarTwo.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterThree")
        {
            CharacterInCarThree.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterFour")
        {
            CharacterInCarFour.gameObject.SetActive(false);
        }
        else if (playerList[activePlayer].characterObject.name == "characterFive")
        {
            CharacterInCarFive.gameObject.SetActive(false);
        }
        PoliceChaseCar.gameObject.SetActive(false);
        ResetCarSpeed();
        DepthOfFieldBlury();




        if (playerList[activePlayer].characterObject.name == "character")
        {
            CharacterInCarAnimation.SetBool("GotCaught", false);
            
        }
        else if (playerList[activePlayer].characterObject.name == "characterOne")
        {
            CharacterInCarAnimationOne.SetBool("GotCaught", false);
           
        }
        else if (playerList[activePlayer].characterObject.name == "characterTwo")
        {
            CharacterInCarAnimationTwo.SetBool("GotCaught", false);
           
        }
        else if (playerList[activePlayer].characterObject.name == "characterThree")
        {
            CharacterInCarAnimationThree.SetBool("GotCaught", false);
          
        }
        else if (playerList[activePlayer].characterObject.name == "characterFour")
        {
            CharacterInCarAnimationFour.SetBool("GotCaught", false);
           
        }
        else if (playerList[activePlayer].characterObject.name == "characterFive")
        {
            CharacterInCarAnimationFive.SetBool("GotCaught", false);
          
        }

        yield return new WaitForSeconds(2f);

       

        if (playerList[activePlayer].playerType == Entity.PlayerTypes.CPU)
        {
            rollDiceText.text = (playerList[activePlayer].playerName + "'s turn ended.");
            yield return new WaitForSeconds(2f);
            moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
            rollDiceText.text = "";
            yield return new WaitForSeconds(3f);

            isMoving = false;

            JailBuildingCellDoorAnimator.SetBool("IsInJail", false);
        }

       
    }
    public IEnumerator RobBankDiceRolledClickedCoroutine()
    {
        yield return new WaitForSeconds(0f);
        isPlayerRollingDiceRobBank = true;
        int RobBankDiceRandomizer = 0;
        ChaseScenePanel.gameObject.SetActive(false);

        yield return new WaitForSeconds(1f);

        EverythingFreezes();

        

        yield return new WaitForSeconds(1f);

        if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
        {
            dice.RollDice();
        }
        else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
        {
            dice.RollDiceSecondLine();
        }
        else if (ObjectMovementRedCar.routePosition >= 19 &&  ObjectMovementRedCar.routePosition <= 28)
        {
            dice.RollDiceThirdLine();
        }
        else if (ObjectMovementRedCar.routePosition >= 29 &&  ObjectMovementRedCar.routePosition <= 34)
        {
            dice.RollDiceFourthLine();
        }




        while (dice.diceValue == 0)
        {
            yield return null;
            Debug.Log("null");
        }

        yield return new WaitForSeconds(3f);


        if(dice.hasLanded == true)
        {
            DepthofFieldforDice();
           RobBankDiceRandomizer = dice.GetDiceValue();
          //  RobBankDiceRandomizer = 6;

            if (RobBankDiceRandomizer == 1)
            {
                dice.showDiceForRobberyOne();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (RobBankDiceRandomizer == 2)
            {
                dice.showDiceForRobberyTwo();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (RobBankDiceRandomizer == 3)
            {
                dice.showDiceForRobberyThree();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (RobBankDiceRandomizer == 4)
            {
                dice.showDiceForRobberyFour();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (RobBankDiceRandomizer == 5)
            {
                dice.showDiceForRobberyFive();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (RobBankDiceRandomizer == 6)
            {
                dice.showDiceForRobberySix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else
            {
                dice.showDiceForRobberySix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }

            yield return new WaitForSeconds(1f);

            dice.ResetDicePositionVoid();
            isPlayerRollingDiceRobBank = false;
            diceLightHolder.gameObject.SetActive(false);
            DiceLight.Stop();


            yield return new WaitForSeconds(1f);

            DepthOfFieldClear();
        }

        yield return new WaitForSeconds(2f);

        EverythingUnFreezes();
        //

        if (RobBankYesBoolZero == true)
        {
           if(RobBankDiceRandomizer >=1 && RobBankDiceRandomizer <= 6)
           {
                //Escaped police and gain money code
                ChaseScenePanel.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                ChaseScenePanelVerdict.gameObject.SetActive(true);

                yield return new WaitForSeconds(2f);

                RobberyCardVerdictText.text = "You Escaped!";
                yield return new WaitForSeconds(2f);
                RobberyCardVerdictText.text = "";




                StartCoroutine(CarChaseSceneCameraMovementEscape());
                yield return new WaitForSeconds(0.5f);
                cameraController.target = PoliceChaseCar.transform;
                yield return new WaitForSeconds(1f);
                yield return new WaitForSeconds(0.5f);
                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                CarFlipSmoke.gameObject.SetActive(true);
                CarEscapedExplosion.gameObject.SetActive(true);
                ExplosionAudio.Play();
                PoliceSirensAudio.Stop();
                GunShotsAudio.Stop();
                CrowdScreamingAudio.Stop();


                yield return new WaitForSeconds(0.5f);

               
                cameraController.target = ObjectMovementRedCar.transform;


                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarGun.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarGunOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarGunTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarGunThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarGunFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarGunFive.gameObject.SetActive(false);
                }


                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarAnimation.SetBool("DidEscape", true);
                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                }



                yield return new WaitForSeconds(4f);

                ChaseScenePanelVerdict.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);


                DepthOfFieldBlury();
                // cameraController.target = playerList[activePlayer].playerObject.transform;

                StartCoroutine(CarToPlayerChaseScene());

               // ResetCameraZoom();

                yield return new WaitForSeconds(1f);
                int moneyGiven = 2000;
                playerList[activePlayer].money += moneyGiven;
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();

                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                yield return new WaitForSeconds(1.5f);

                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);
                NPCMovementSpeedWalk();
                ObjectMovementScriptPolice.MovementSpeed = 3f;

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCar.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    characterInCarOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarFive.gameObject.SetActive(false);
                }

                


                yield return new WaitForSeconds(1f);

              

             
              
                SecondCharacterUIPanel.gameObject.SetActive(true);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
      



            }
           else
           {

                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));
               


           }

            yield return new WaitForSeconds(1f);



            RobBankYesBoolZero = false;
          


        }
        else if (RobBankYesBoolOne == true)
        {
          if(RobBankDiceRandomizer >=2 && RobBankDiceRandomizer <= 5)
          {
                // Escaped police and gain money code
                  ChaseScenePanel.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                ChaseScenePanelVerdict.gameObject.SetActive(true);

                yield return new WaitForSeconds(2f);

                RobberyCardVerdictText.text = "You Escaped!";
                yield return new WaitForSeconds(2f);
                RobberyCardVerdictText.text = "";

                StartCoroutine(CarChaseSceneCameraMovementEscape());
                yield return new WaitForSeconds(0.5f);
                cameraController.target = PoliceChaseCar.transform;
                yield return new WaitForSeconds(1f);
                yield return new WaitForSeconds(0.5f);
                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                CarFlipSmoke.gameObject.SetActive(true);
                CarEscapedExplosion.gameObject.SetActive(true);
                ExplosionAudio.Play();
                PoliceSirensAudio.Stop();
                GunShotsAudio.Stop();
                CrowdScreamingAudio.Stop();

                yield return new WaitForSeconds(0.5f);
                //   StartCoroutine(CarChaseSceneCameraMovementEscape());
                cameraController.target = ObjectMovementRedCar.transform;

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarGun.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarGunOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarGunTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarGunThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarGunFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarGunFive.gameObject.SetActive(false);
                }

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarAnimation.SetBool("DidEscape", true);
                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                }

                yield return new WaitForSeconds(4f);

                ChaseScenePanelVerdict.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                DepthOfFieldBlury();
                //  cameraController.target = playerList[activePlayer].playerObject.transform;

                StartCoroutine(CarToPlayerChaseScene());

             
               // ResetCameraZoom();

                yield return new WaitForSeconds(1f);
                int moneyGiven = 3500;
                playerList[activePlayer % playerList.Count].money += moneyGiven;

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();

                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                yield return new WaitForSeconds(1.5f);

                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);
                NPCMovementSpeedWalk();


                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCar.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    characterInCarOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarFive.gameObject.SetActive(false);
                }

               
               
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
            


                yield return new WaitForSeconds(1f);



                CharacterUIPanel.gameObject.SetActive(true);
                AllCharacterPanelsHolder.gameObject.SetActive(true);
                SecondCharacterUIPanel.gameObject.SetActive(true);


          }
          else
          {
                //get caught and get sent to jail code

                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));
              
          }

            yield return new WaitForSeconds(1f);
            RobBankYesBoolOne = false;
       

        }
        else if (RobBankYesBoolTwo == true)
        {
            if(RobBankDiceRandomizer >= 1  && RobBankDiceRandomizer  <= 3)
            {
                // Escaped police and gain money code
                ChaseScenePanel.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                ChaseScenePanelVerdict.gameObject.SetActive(true);

                yield return new WaitForSeconds(2f);

                RobberyCardVerdictText.text = "You Escaped!";
                yield return new WaitForSeconds(2f);
                RobberyCardVerdictText.text = "";

                StartCoroutine(CarChaseSceneCameraMovementEscape());
                yield return new WaitForSeconds(0.5f);
                cameraController.target = PoliceChaseCar.transform;
                yield return new WaitForSeconds(1f);
                yield return new WaitForSeconds(0.5f);
                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                CarFlipSmoke.gameObject.SetActive(true);
                CarEscapedExplosion.gameObject.SetActive(true);
                ExplosionAudio.Play();
                PoliceSirensAudio.Stop();
                GunShotsAudio.Stop();
                CrowdScreamingAudio.Stop();

                yield return new WaitForSeconds(0.5f);
                // StartCoroutine(CarChaseSceneCameraMovementEscape());
                cameraController.target = ObjectMovementRedCar.transform;

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarGun.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarGunOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarGunTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarGunThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarGunFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarGunFive.gameObject.SetActive(false);
                }

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarAnimation.SetBool("DidEscape", true);
                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                }

                yield return new WaitForSeconds(4f);

                ChaseScenePanelVerdict.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                DepthOfFieldBlury();
                // cameraController.target = playerList[activePlayer].playerObject.transform;

                StartCoroutine(CarToPlayerChaseScene());

          

                yield return new WaitForSeconds(1f);

                int moneyGiven = 4000;
                playerList[activePlayer % playerList.Count].money += moneyGiven;

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();

                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                yield return new WaitForSeconds(1.5f);

                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);
                NPCMovementSpeedWalk();

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCar.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    characterInCarOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarFive.gameObject.SetActive(false);
                }

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
             

                yield return new WaitForSeconds(1f);



                CharacterUIPanel.gameObject.SetActive(true);
                AllCharacterPanelsHolder.gameObject.SetActive(true);
                SecondCharacterUIPanel.gameObject.SetActive(true);

            }
            else
            {
                //get caught and get sent to jail code
                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));
                
            }

            yield return new WaitForSeconds(1f);

            RobBankYesBoolTwo = false;
      

        }
        else if (RobBankYesBoolThree == true)
        {
            if (RobBankDiceRandomizer == 1 || RobBankDiceRandomizer == 6 )
            {
                // Escaped police and gain money code
                ChaseScenePanel.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                ChaseScenePanelVerdict.gameObject.SetActive(true);

                yield return new WaitForSeconds(2f);

                RobberyCardVerdictText.text = "You Escaped!";
                yield return new WaitForSeconds(2f);
                RobberyCardVerdictText.text = "";

                StartCoroutine(CarChaseSceneCameraMovementEscape());
                yield return new WaitForSeconds(0.5f);
                cameraController.target = PoliceChaseCar.transform;
                yield return new WaitForSeconds(1f);
                yield return new WaitForSeconds(0.5f);
                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                CarFlipSmoke.gameObject.SetActive(true);
                CarEscapedExplosion.gameObject.SetActive(true);
                ExplosionAudio.Play();
                PoliceSirensAudio.Stop();
                GunShotsAudio.Stop();
                CrowdScreamingAudio.Stop();

                yield return new WaitForSeconds(0.5f);

                // StartCoroutine(CarChaseSceneCameraMovementEscape());
                cameraController.target = ObjectMovementRedCar.transform;

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarGun.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarGunOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarGunTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarGunThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarGunFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarGunFive.gameObject.SetActive(false);
                }

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarAnimation.SetBool("DidEscape", true);
                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                }

                yield return new WaitForSeconds(4f);

                ChaseScenePanelVerdict.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                DepthOfFieldBlury();
                // cameraController.target = playerList[activePlayer].playerObject.transform;

                StartCoroutine(CarToPlayerChaseScene());

                

                yield return new WaitForSeconds(1f);
                int moneyGiven = 6000;
                playerList[activePlayer % playerList.Count].money += moneyGiven;

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();

                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                yield return new WaitForSeconds(1.5f);

                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);
                NPCMovementSpeedWalk();

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCar.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    characterInCarOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarFive.gameObject.SetActive(false);
                }

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);


                CharacterUIPanel.gameObject.SetActive(true);
                AllCharacterPanelsHolder.gameObject.SetActive(true);
                SecondCharacterUIPanel.gameObject.SetActive(true);

            }
            else
            {
                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));
               
            }

            yield return new WaitForSeconds(1f);
            RobBankYesBoolThree = false;
          

        }
        else if (RobBankYesBoolFour == true)
        {
            if(RobBankDiceRandomizer == 6)
            {
                // Escaped police and gain money code
                ChaseScenePanel.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);

                playerList[activePlayer].money /= 2;

                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                ChaseScenePanelVerdict.gameObject.SetActive(true);

                yield return new WaitForSeconds(2f);

                RobberyCardVerdictText.text = "You Escaped!";
                yield return new WaitForSeconds(2f);
                RobberyCardVerdictText.text = "";

                StartCoroutine(CarChaseSceneCameraMovementEscape());
                yield return new WaitForSeconds(0.5f);
                cameraController.target = PoliceChaseCar.transform;
                yield return new WaitForSeconds(1f);
                yield return new WaitForSeconds(0.5f);
                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                CarFlipSmoke.gameObject.SetActive(true);
                CarEscapedExplosion.gameObject.SetActive(true);
                ExplosionAudio.Play();
                PoliceSirensAudio.Stop();
                GunShotsAudio.Stop();
                CrowdScreamingAudio.Stop();

                yield return new WaitForSeconds(0.5f);

                // StartCoroutine(CarChaseSceneCameraMovementEscape());
                cameraController.target = ObjectMovementRedCar.transform;

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarGun.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarGunOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarGunTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarGunThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarGunFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarGunFive.gameObject.SetActive(false);
                }

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCarAnimation.SetBool("DidEscape", true);
                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                }

                yield return new WaitForSeconds(4f);

                ChaseScenePanelVerdict.gameObject.SetActive(false);
                yield return new WaitForSeconds(1f);


                DepthOfFieldBlury();
                //  cameraController.target = playerList[activePlayer].playerObject.transform;

                StartCoroutine(CarToPlayerChaseScene());

              

                yield return new WaitForSeconds(1f);
                int moneyGiven = 8000;
                playerList[activePlayer % playerList.Count].money += moneyGiven;

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();

                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                yield return new WaitForSeconds(1.5f);

                CarFlipSmoke.gameObject.SetActive(false);
                CarEscapedExplosion.gameObject.SetActive(false);
                PoliceChaseCar.gameObject.SetActive(false);
                MoneyFallingAway.gameObject.SetActive(false);
                NPCMovementSpeedWalk();

                if (playerList[activePlayer].characterObject.name == "character")
                {
                    CharacterInCar.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterOne")
                {
                    characterInCarOne.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterTwo")
                {
                    CharacterInCarTwo.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterThree")
                {
                    CharacterInCarThree.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFour")
                {
                    CharacterInCarFour.gameObject.SetActive(false);
                }
                else if (playerList[activePlayer].characterObject.name == "characterFive")
                {
                    CharacterInCarFive.gameObject.SetActive(false);
                }



                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney",false);
         


               
                CharacterUIPanel.gameObject.SetActive(true);
                AllCharacterPanelsHolder.gameObject.SetActive(true);
                SecondCharacterUIPanel.gameObject.SetActive(true);

            }
            else
            {
                //get caught and get sent to jail code
                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));
               
            }

            yield return new WaitForSeconds(1f);

            RobBankYesBoolFour = false;
         
        }
    }
    public IEnumerator RobBankNoClickedCoroutine()
    {


        RobberyCardDecisionAnimator.SetBool("IsDoneRobbedBank", true);
        RobberyCardDecisionAnimator.SetBool("IsRobbedBank", false);
        RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionEnding", 0.05f);

        if (RobBankYesBoolZero ==  true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[0].CrossFade("RoberyCardEnding", 0.08f);
            //

            yield return new WaitForSeconds(1f);

            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
            RobberyCards[0].SetBool("RobBankYes", false);
            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            RobBankYesBoolZero = false;

            StartCoroutine(BlurEffects());

            CharacterUIPanel.gameObject.SetActive(true);
        }
        else if(RobBankYesBoolOne == true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[1].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
            RobberyCards[1].SetBool("RobBankYes", false);
            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }

            RobBankYesBoolOne = false;

            StartCoroutine(BlurEffects());

            AllCharacterPanelsHolder.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);
        }
        else if (RobBankYesBoolTwo == true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[2].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
            RobberyCards[2].SetBool("RobBankYes", false);
            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }

            RobBankYesBoolTwo = false;

            StartCoroutine(BlurEffects());

            AllCharacterPanelsHolder.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);
        }
        else if (RobBankYesBoolThree == true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[3].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
            RobberyCards[3].SetBool("RobBankYes", false);
            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }

            RobBankYesBoolThree = false;

            StartCoroutine(BlurEffects());

            AllCharacterPanelsHolder.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);
        }
        else if (RobBankYesBoolFour == true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[4].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
            RobberyCards[4].SetBool("RobBankYes", false);
            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            RobBankYesBoolFour = false;

            StartCoroutine(BlurEffects());

            AllCharacterPanelsHolder.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);
        }

        RobberyCardDecisionAnimator.SetBool("IsDoneRobbedBank", false);
        RobberyCardDecisionAnimator.SetBool("IsRobbedBank", false);
        RobberyCardDecisionAnimator.CrossFade("New State", 0.05f);

    }
    public IEnumerator RobBankYesClickedCoroutine()
    {

        playerList[activePlayer].hasRobbedBank = true;

        Entity currentPlayer = playerList[activePlayer];
        yield return new WaitForSeconds(0f);
        ObjectMovementScriptPolice.MovementSpeed = 2.85f;

        RobberyCardDecisionAnimator.SetBool("IsDoneRobbedBank", true);
        RobberyCardDecisionAnimator.SetBool("IsRobbedBank", false);
        RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionEnding", 0.05f);



        if (playerList[activePlayer].characterObject.name == "character")
        {
            Quaternion startRotationCharInCar = CharacterInCar.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0.31f, 180f, 9.525f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                CharacterInCar.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }
        else if (playerList[activePlayer].characterObject.name == "characterOne")
        {
            Quaternion startRotationCharInCar = characterInCarOne.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                characterInCarOne.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }
        else if (playerList[activePlayer].characterObject.name == "characterTwo")
        {
            Quaternion startRotationCharInCar = CharacterInCarTwo.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                CharacterInCarTwo.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }
        else if (playerList[activePlayer].characterObject.name == "characterThree")
        {
            Quaternion startRotationCharInCar = CharacterInCarThree.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                CharacterInCarThree.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }
        else if (playerList[activePlayer].characterObject.name == "characterFour")
        {
            Quaternion startRotationCharInCar = CharacterInCarFour.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                CharacterInCarFour.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }
        else if (playerList[activePlayer].characterObject.name == "characterFive")
        {
            Quaternion startRotationCharInCar = CharacterInCarFive.transform.localRotation;
            Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                CharacterInCarFive.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

            }
        }

       

        if (RobBankYesBoolZero == true)
        {



            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[0].SetBool("RobBankYes", true);
            RobberyCards[0].CrossFade("RoberyCardMiddle", 0.01f);

           

            yield return new WaitForSeconds(7f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[0].CrossFade("RoberyCardEnding", 0.08f);


            yield return new WaitForSeconds(1f);

            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
            RobberyCards[0].SetBool("RobBankYes", false);
            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);




            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            StartCoroutine(BlurEffects());

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCar.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                characterInCarOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
               CharacterInCarFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarFive.gameObject.SetActive(true);
            }

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCarGun.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                CharacterInCarGunOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarGunTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarGunThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarGunFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarGunFive.gameObject.SetActive(true);
            }
            //  CharacterInCar
            PoliceChaseCar.gameObject.SetActive(true);
            MoneyFallingAway.gameObject.SetActive(true);
           


            yield return new WaitForSeconds(0.4f);
            NPCMovementSpeedRun();

            DepthOfFieldClear();
           // cameraController.target = ObjectMovementRedCar.transform;
           StartCoroutine(PlayerToCarChaseScene());

            yield return new WaitForSeconds(1.5f);
            CarsAreMovingChaseAudio.Play();
            PoliceSirensAudio.Play();
            GunShotsAudio.Play();
            CrowdScreamingAudio.Play();


            RobberyCardNumberReminder.text = "Roll Between 1 - 6";

            CharacterUIPanel.gameObject.SetActive(false);
           // AllCharacterPanelsHolder.gameObject.SetActive(false);
          //  SecondCharacterUIPanel.gameObject.SetActive(false);
            ChaseScenePanel.gameObject.SetActive(true);
            RobBankDiceRolled.gameObject.SetActive(true);
            

            //  RobBankYesBoolZero = false;

        }
        else if(RobBankYesBoolOne  == true)
        {



            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[1].SetBool("RobBankYes", true);
            RobberyCards[1].CrossFade("RoberyCardMiddle", 0.01f);



            yield return new WaitForSeconds(7f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[1].CrossFade("RoberyCardEnding", 0.08f);

            CardsPickedAudio.Play();

            yield return new WaitForSeconds(1f);

            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
            RobberyCards[1].SetBool("RobBankYes", false);
            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);




            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            StartCoroutine(BlurEffects());


            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCar.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                characterInCarOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarFive.gameObject.SetActive(true);
            }

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCarGun.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                CharacterInCarGunOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarGunTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarGunThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarGunFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarGunFive.gameObject.SetActive(true);
            }
            PoliceChaseCar.gameObject.SetActive(true);
            MoneyFallingAway.gameObject.SetActive(true);
      


            yield return new WaitForSeconds(0.4f);
            NPCMovementSpeedRun();

            DepthOfFieldClear();
            // cameraController.target = ObjectMovementRedCar.transform;
            StartCoroutine(PlayerToCarChaseScene());
          //  StartCoroutine(CarChaseSceneCameraMovement());

            yield return new WaitForSeconds(1.5f);
            CarsAreMovingChaseAudio.Play();
            PoliceSirensAudio.Play();
            GunShotsAudio.Play();
            CrowdScreamingAudio.Play();


            RobberyCardNumberReminder.text = "Roll Between 2 - 5";

            CharacterUIPanel.gameObject.SetActive(false);
          //  AllCharacterPanelsHolder.gameObject.SetActive(false);
          //  SecondCharacterUIPanel.gameObject.SetActive(false);

            ChaseScenePanel.gameObject.SetActive(true);
            RobBankDiceRolled.gameObject.SetActive(true);
            


            // RobBankYesBoolOne = false;
        }
        else if (RobBankYesBoolTwo == true)
        {




            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[2].SetBool("RobBankYes", true);
            RobberyCards[2].CrossFade("RoberyCardMiddle", 0.01f);

            yield return new WaitForSeconds(7f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[2].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
            RobberyCards[2].SetBool("RobBankYes", false);
            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);




            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            StartCoroutine(BlurEffects());

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCar.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                characterInCarOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarFive.gameObject.SetActive(true);
            }


            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCarGun.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                CharacterInCarGunOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarGunTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarGunThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarGunFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarGunFive.gameObject.SetActive(true);
            }

            PoliceChaseCar.gameObject.SetActive(true);
            MoneyFallingAway.gameObject.SetActive(true);
 


            yield return new WaitForSeconds(0.4f);
            NPCMovementSpeedRun();

            DepthOfFieldClear();
            // cameraController.target = ObjectMovementRedCar.transform;
            StartCoroutine(PlayerToCarChaseScene());

            yield return new WaitForSeconds(1.5f);
            CarsAreMovingChaseAudio.Play();
            PoliceSirensAudio.Play();
            GunShotsAudio.Play();
            CrowdScreamingAudio.Play();

            StartCoroutine(CarChaseSceneCameraMovement());
            RobberyCardNumberReminder.text = "Roll Between 1 - 3";

            CharacterUIPanel.gameObject.SetActive(false);
          //  AllCharacterPanelsHolder.gameObject.SetActive(false);
          //  SecondCharacterUIPanel.gameObject.SetActive(false);

            ChaseScenePanel.gameObject.SetActive(true);
            RobBankDiceRolled.gameObject.SetActive(true);
            


           // RobBankYesBoolTwo = false;
        }
        else if (RobBankYesBoolThree == true)
        {




            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[3].SetBool("RobBankYes", true);
            RobberyCards[3].CrossFade("RoberyCardMiddle", 0.01f);

            yield return new WaitForSeconds(7f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[3].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
            RobberyCards[3].SetBool("RobBankYes", false);
            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);




            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }

            StartCoroutine(BlurEffects());


            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCar.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                characterInCarOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarFive.gameObject.SetActive(true);
            }

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCarGun.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                CharacterInCarGunOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarGunTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarGunThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarGunFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarGunFive.gameObject.SetActive(true);
            }
            PoliceChaseCar.gameObject.SetActive(true);
            MoneyFallingAway.gameObject.SetActive(true);



            yield return new WaitForSeconds(0.4f);
            NPCMovementSpeedRun();

            DepthOfFieldClear();
            //  cameraController.target = ObjectMovementRedCar.transform;

            StartCoroutine(PlayerToCarChaseScene());
           // StartCoroutine(CarChaseSceneCameraMovement());

            yield return new WaitForSeconds(1.5f);
            CarsAreMovingChaseAudio.Play();
            PoliceSirensAudio.Play();
            GunShotsAudio.Play();
            CrowdScreamingAudio.Play();

            RobberyCardNumberReminder.text = "Roll 1 OR 6";

            CharacterUIPanel.gameObject.SetActive(false);
          //  AllCharacterPanelsHolder.gameObject.SetActive(false);
           // SecondCharacterUIPanel.gameObject.SetActive(false);

            ChaseScenePanel.gameObject.SetActive(true);
            RobBankDiceRolled.gameObject.SetActive(true);
            // RobBankYesBoolThree = false;
        }
        else if (RobBankYesBoolFour == true)
        {


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[4].SetBool("RobBankYes", true);
            RobberyCards[4].CrossFade("RoberyCardMiddle", 0.01f);

            yield return new WaitForSeconds(7f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);

            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
            RobberyCards[4].CrossFade("RoberyCardEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
            RobberyCards[4].SetBool("RobBankYes", false);
            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);




            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }


            StartCoroutine(BlurEffects());


            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCar.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                characterInCarOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarFive.gameObject.SetActive(true);
            }

            if (playerList[activePlayer].characterObject.name == "character")
            {
                CharacterInCarGun.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterOne")
            {
                CharacterInCarGunOne.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterTwo")
            {
                CharacterInCarGunTwo.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterThree")
            {
                CharacterInCarGunThree.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFour")
            {
                CharacterInCarGunFour.gameObject.SetActive(true);
            }
            else if (playerList[activePlayer].characterObject.name == "characterFive")
            {
                CharacterInCarGunFive.gameObject.SetActive(true);
            }

            PoliceChaseCar.gameObject.SetActive(true);
            MoneyFallingAway.gameObject.SetActive(true);



            yield return new WaitForSeconds(0.4f);
            NPCMovementSpeedRun();

            DepthOfFieldClear();
            //  cameraController.target = ObjectMovementRedCar.transform;

            StartCoroutine(PlayerToCarChaseScene());

            //StartCoroutine(CarChaseSceneCameraMovement());
            RobberyCardNumberReminder.text = "Roll 6";

            yield return new WaitForSeconds(1.5f);
            CarsAreMovingChaseAudio.Play();
            PoliceSirensAudio.Play();
            GunShotsAudio.Play();
            CrowdScreamingAudio.Play();

            CharacterUIPanel.gameObject.SetActive(false);
          //  AllCharacterPanelsHolder.gameObject.SetActive(false);
           // SecondCharacterUIPanel.gameObject.SetActive(false);

            ChaseScenePanel.gameObject.SetActive(true);
            RobBankDiceRolled.gameObject.SetActive(true);
            //  RobBankYesBoolFour = false;
        }

        RobberyCardDecisionAnimator.SetBool("IsDoneRobbedBank", false);
        RobberyCardDecisionAnimator.SetBool("IsRobbedBank", false);
        RobberyCardDecisionAnimator.CrossFade("New State", 0.05f);

    }

    public IEnumerator Move(int stepsToMove)
    {
        if (!IsOwner) yield return null;

        if (isMoving)
        {
            yield break;
        }

        isMoving = true;

       
        steps = stepsToMove;

        Entity currentPlayer = playerList[activePlayer % playerList.Count];

      int  routePositionForNodes = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;
        float currentIntensity = 0f; ;

        

        for (int i = routePositionForNodes; i < steps + routePositionForNodes; i++)
        {
             //   Material changeNodeMaterial = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];

               
            
            
                float duration = 0.17f;

               float startValueIntensity = 0;
            float endValueIntensity = 1.8f;

            if (currentPlayer.characterObject.name == "character")
            {
                 endValueIntensity = 2.3f;
            }
            else if(currentPlayer.characterObject.name == "characterOne")
            {
                endValueIntensity = 2.3f;
            }
            else if (currentPlayer.characterObject.name == "characterTwo")
            {
                endValueIntensity = 2.3f;
            }
            else if (currentPlayer.characterObject.name == "characterThree")
            {
                endValueIntensity = 2.3f;
            }
            else if (currentPlayer.characterObject.name == "characterFour")
            {
                endValueIntensity = 2.3f;
            }
            else if (currentPlayer.characterObject.name == "characterFive")
            {
                endValueIntensity = 2.3f;
            }



            float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;
                   /* float newValue = Mathf.Lerp(startValue, endValue, t / duration);
                    changeNodeMaterial.SetFloat("_Scale", newValue);
                   */

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);

                   if(currentPlayer.characterObject.name == "character")
                   {
                    Color finalColor = Color.yellow * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   else if (currentPlayer.characterObject.name == "characterOne")
                   {
                    Color finalColor = Color.white * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   else if (currentPlayer.characterObject.name == "characterTwo")
                   {
                    Color finalColor = Color.blue * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   else if (currentPlayer.characterObject.name == "characterThree")
                   {
                    Color finalColor = Color.green * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   else if (currentPlayer.characterObject.name == "characterFour")
                   {
                    Color finalColor = Color.cyan * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   else if (currentPlayer.characterObject.name == "characterFive")
                   {
                    Color finalColor = Color.magenta * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColor);
                   }
                   


                   yield return null;
                }

            MovingToNextSquareAudio.Play();
           // yield return new WaitForSeconds(0.05f);

            
        }


        yield return new WaitForSeconds(0.5f);
        Animator playerAnimator = currentPlayer.playerAnimator;
  
        playerAnimator.SetBool("IsDiceDoneRolling", true);
        playerAnimator.CrossFade("BeforeMoving", 0.05f);

        yield return new WaitForSeconds(2f);

        playerAnimator.CrossFade("Idle", 0.05f);
        yield return new WaitForSeconds(0.5f);

      
        playerAnimator.SetBool("IsWalking", true);
        playerAnimator.SetBool("IsDiceDoneRolling", false);
        playerAnimator.CrossFade("Walking", 0.05f);
       


        CharacterUIPanel.gameObject.SetActive(false);


     





        while (steps > 0)
        {
            for (int i = 0; i < checkWeaponsButton.Length; i++)
            {
                checkWeaponsButton[i].gameObject.SetActive(false);
            }

            //   NodeChangeColor.SetFloat("_Scale", 1.02f);

            routePosition = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;
            Vector3 nextPos = currentRoute.childNodeList[routePosition].position;
            while (MoveToNextNode(currentPlayer.playerObject, nextPos)) { yield return null; }
            WalkingSound.Play();

            steps--;

            Material changeNodeMaterial = NodeColorObjectList[routePosition].gameObject.GetComponent<MeshRenderer>().materials[1];
            changeNodeMaterial.SetFloat("_Scale", 0f);

            Material changeNodeTexture = NodeColorObjectList[routePosition].gameObject.GetComponent<MeshRenderer>().materials[0];
            currentIntensity = 0f;
            Color finalColor = Color.cyan * currentIntensity;
            changeNodeTexture.SetColor("_EmissionColor", finalColor);


            currentPlayer.position = routePosition;
            yield return new WaitForSeconds(0f);

            

        }

        

        playerAnimator.SetBool("IsWalking", false);
        playerAnimator.CrossFade("Idle", 0.1f);
        WalkingSound.Stop();

      


        if (playerList[activePlayer % playerList.Count].position == 0 && state == States.SWITCH_PLAYER)
        {
            Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 20 && state == States.SWITCH_PLAYER)
        {
            Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 30 && state == States.SWITCH_PLAYER)
        {
            Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 49 && state == States.SWITCH_PLAYER)
        {
            Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }


        yield return new WaitForSeconds(1f);
        // Gun Shop squares condition
        if (playerList[activePlayer % playerList.Count].position == 4 || playerList[activePlayer % playerList.Count].position == 6 || playerList[activePlayer % playerList.Count].position == 9 || playerList[activePlayer % playerList.Count].position == 12 || playerList[activePlayer % playerList.Count].position == 15 || playerList[activePlayer % playerList.Count].position == 18 || playerList[activePlayer % playerList.Count].position == 22 || playerList[activePlayer % playerList.Count].position == 26 || playerList[activePlayer % playerList.Count].position == 28 || playerList[activePlayer % playerList.Count].position == 32|| playerList[activePlayer % playerList.Count].position == 34 || playerList[activePlayer % playerList.Count].position == 38 || playerList[activePlayer % playerList.Count].position == 41 || playerList[activePlayer % playerList.Count].position == 44 || playerList[activePlayer % playerList.Count].position == 46 || playerList[activePlayer % playerList.Count].position == 52 || playerList[activePlayer % playerList.Count].position == 55 || playerList[activePlayer % playerList.Count].position == 57 && state == States.SWITCH_PLAYER)
        {

            DepthofFieldforDice();

            AllCharacterPanelsHolder.gameObject.SetActive(false);

            buyButton.gameObject.SetActive(true);
            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);
            GunShopCardAnimator.SetBool("HasLandedOnCard", true);
            GunShopCardAnimator.CrossFade("CardPanelOpening", 0.1f);
            
            yield return new WaitForSeconds(5.5f);
            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);
            GunShopCardAnimator.SetBool("HasEndedLandingOnCard", true);
            GunShopCardAnimator.CrossFade("CardPanelEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            GunShopCardAnimator.SetBool("HasLandedOnCard", false);
            GunShopCardAnimator.SetBool("HasEndedLandingOnCard", false);

            Vector3 startPositionForCardPanel = GunShopCardPanel.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
                GunShopCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }

           

            isMoving = false;



            StartCoroutine(BlurEffects());
            AllCharacterPanelsHolder.gameObject.SetActive(true);
            //


            CharacterUIPanel.gameObject.SetActive(true);

          

        }
        //Hospital squares conditions
        else if(playerList[activePlayer % playerList.Count].position == 8 || playerList[activePlayer % playerList.Count].position == 48 && state == States.SWITCH_PLAYER)
        {

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);


            if (currentPlayer.lives > 5)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                HospitalCardAnimator.SetBool("HasLandedOnCard", true);
                HospitalCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                HospitalCardAnimator.SetBool("HasEndedLandingOnCard", true);
                HospitalCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                HospitalCardAnimator.SetBool("HasLandedOnCard", false);
                HospitalCardAnimator.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = HospitalCardPanel.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    HospitalCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }

                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                isMoving = false;

                CharacterUIPanel.gameObject.SetActive(true);
            }
            else if (currentPlayer.lives < 6)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                HospitalHealCardAnimator.SetBool("HasLandedOnCard", true);
                HospitalHealCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                HospitalHealCardAnimator.SetBool("HasEndedLandingOnCard", true);
                HospitalHealCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                HospitalHealCardAnimator.SetBool("HasLandedOnCard", false);
                HospitalHealCardAnimator.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = HospitalHealCardPanel.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    HospitalHealCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }
               

                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(0.5f);

                currentPlayer.lives++;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsGainingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimationEnding", 0.05f);
                RemoveCharacterUI();

                yield return new WaitForSeconds(1.5f);

                isMoving = false;

                CharacterUIPanel.gameObject.SetActive(true);

            }

           
        }
        //Robbery Cards Squares condition
        else if (playerList[activePlayer % playerList.Count].position == 3 || playerList[activePlayer % playerList.Count].position == 10 || playerList[activePlayer % playerList.Count].position == 14 || playerList[activePlayer % playerList.Count].position == 17 || playerList[activePlayer % playerList.Count].position == 24 || playerList[activePlayer % playerList.Count].position == 35 || playerList[activePlayer % playerList.Count].position == 37 || playerList[activePlayer % playerList.Count].position == 40 || playerList[activePlayer % playerList.Count].position == 45 || playerList[activePlayer % playerList.Count].position == 54 || playerList[activePlayer % playerList.Count].position == 58 && state == States.SWITCH_PLAYER)
        {
            int RobberyCardSelected = Random.Range(0 ,RobberyCards.Length);
            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            if (RobberyCardSelected == 0)
            {
                RobBankYesBoolZero = true;
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCards[0].SetBool("HasLandedOnRobBank", true);
                RobberyCards[0].CrossFade("RoberyCardOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCardDecisionAnimator.SetBool("IsRobbedBank", true);
                RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionOpening", 0.05f);

              
               
               
               
            }
            else if(RobberyCardSelected == 1)
            {
                RobBankYesBoolOne = true;
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCards[1].SetBool("HasLandedOnRobBank", true);
                RobberyCards[1].CrossFade("RoberyCardOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCardDecisionAnimator.SetBool("IsRobbedBank", true);
                RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionOpening", 0.05f);
            }
            else if (RobberyCardSelected == 2)
            {
                RobBankYesBoolTwo = true;
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCards[2].SetBool("HasLandedOnRobBank", true);
                RobberyCards[2].CrossFade("RoberyCardOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCardDecisionAnimator.SetBool("IsRobbedBank", true);
                RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionOpening", 0.05f);
            }
            else if (RobberyCardSelected == 3)
            {
                RobBankYesBoolThree = true;
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCards[3].SetBool("HasLandedOnRobBank", true);
                RobberyCards[3].CrossFade("RoberyCardOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCardDecisionAnimator.SetBool("IsRobbedBank", true);
                RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionOpening", 0.05f);
            }
            else if (RobberyCardSelected == 4)
            {
                RobBankYesBoolFour = true;
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);

                RobberyCards[4].SetBool("HasLandedOnRobBank", true);
                RobberyCards[4].CrossFade("RoberyCardOpening", 0.1f);
                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                RobberyCardDecision.gameObject.SetActive(true);
                RobberyCardDecisionAnimator.SetBool("IsRobbedBank", true);
                RobberyCardDecisionAnimator.CrossFade("RobberyCardDecisionOpening", 0.05f);
            }


        }
        // broker cards conditions
        else if (playerList[activePlayer % playerList.Count].position == 5 || playerList[activePlayer % playerList.Count].position == 31 || playerList[activePlayer % playerList.Count].position == 51)
        {
            int RandomizeBrokerCards = Random.Range(0, 2);

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            if (RandomizeBrokerCards == 0)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                BrokerCards[0].SetBool("HasLandedOnCard", true);
                BrokerCards[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                BrokerCards[0].SetBool("HasEndedLandingOnCard", true);
                BrokerCards[0].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                BrokerCards[0].SetBool("HasLandedOnCard", false);
                BrokerCards[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = BrokerCardWeapon.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    BrokerCardWeapon.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }

                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                Weapon selectedWeapon = weaponShop[0];
                Entity.WeaponInformation existingWeapon = currentPlayer.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                if(existingWeapon != null)
                {
                    existingWeapon.bullets += selectedWeapon.bullets;
             
                }
                else
                {
                    Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                    {
                        name = selectedWeapon.name,
                        range = selectedWeapon.range,
                        damage = selectedWeapon.damage,
                        bullets = selectedWeapon.bullets
                    };

                    currentPlayer.WeaponInfo.Add(weaponInfo); //
                }

               

                playerList[activePlayer % playerList.Count].hasWeapon = true;
                RemoveCharacterUI();
             

                isMoving = false;

                
               

                yield return new WaitForSeconds(1f);

                CharacterUIPanel.gameObject.SetActive(true);

            }
            else if(RandomizeBrokerCards == 1)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                BrokerCards[1].SetBool("HasLandedOnCard", true);
                BrokerCards[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                BrokerCards[1].SetBool("HasEndedLandingOnCard", true);
                BrokerCards[1].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                BrokerCards[1].SetBool("HasLandedOnCard", false);
                BrokerCards[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = BrokerCardMoney.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    BrokerCardMoney.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }

                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                int brokerCardsAddMoney = 1000;
                playerList[activePlayer % playerList.Count].money += brokerCardsAddMoney;
                RemoveCharacterUI();



                isMoving = false;


                yield return new WaitForSeconds(1f);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);

                CharacterUIPanel.gameObject.SetActive(true);
            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 1 || playerList[activePlayer % playerList.Count].position == 7 || playerList[activePlayer % playerList.Count].position == 11 || playerList[activePlayer % playerList.Count].position == 19 || playerList[activePlayer % playerList.Count].position == 21 || playerList[activePlayer % playerList.Count].position == 43 || playerList[activePlayer % playerList.Count].position == 47 || playerList[activePlayer % playerList.Count].position == 56)
        {
            DepthofFieldforDice();


            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);
            SafeZoneCardAnimator.SetBool("HasLandedOnCard", true);
            SafeZoneCardAnimator.CrossFade("CardPanelOpening", 0.1f);

            yield return new WaitForSeconds(1.8f);

            CardsPickedAudio.Play();
            yield return new WaitForSeconds(0.2f);
            SafeZoneCardAnimator.SetBool("HasEndedLandingOnCard", true);
            SafeZoneCardAnimator.CrossFade("CardPanelEnding", 0.08f);

            yield return new WaitForSeconds(1f);

            SafeZoneCardAnimator.SetBool("HasLandedOnCard", false);
            SafeZoneCardAnimator.SetBool("HasEndedLandingOnCard", false);

            Vector3 startPositionForCardPanel = SafeZoneCardPanel.transform.localPosition;
            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
            float tPosition = 0;
            float moveSpeed = 5.0f;

            while (tPosition < 1)
            {
                tPosition += Time.deltaTime * moveSpeed;
               SafeZoneCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
            }



            isMoving = false;



            StartCoroutine(BlurEffects());
            AllCharacterPanelsHolder.gameObject.SetActive(true);
            //


            CharacterUIPanel.gameObject.SetActive(true);
            
          
        }
        else if (playerList[activePlayer % playerList.Count].position == 16 || playerList[activePlayer % playerList.Count].position == 25 || playerList[activePlayer % playerList.Count].position == 33 || playerList[activePlayer % playerList.Count].position == 42)
        {
            StartCoroutine(TrapCardsFunction());
        }
        else if (playerList[activePlayer % playerList.Count].position == 13 || playerList[activePlayer % playerList.Count].position == 20 || playerList[activePlayer % playerList.Count].position == 29 || playerList[activePlayer % playerList.Count].position == 49) // || playerList[activePlayer].position == 20 || playerList[activePlayer].position == 30 || playerList[activePlayer].position == 49)
        {

            StartCoroutine(PoliceStopFunction(currentPlayer, currentIntensity));
            
        }
        else if(playerList[activePlayer % playerList.Count].position == 2 || playerList[activePlayer % playerList.Count].position == 23 || playerList[activePlayer % playerList.Count].position == 27 || playerList[activePlayer % playerList.Count].position == 36 || playerList[activePlayer % playerList.Count].position == 39 || playerList[activePlayer % playerList.Count].position == 50 || playerList[activePlayer % playerList.Count].position == 53)
        {

            StartCoroutine(MysteryCardsFunction(currentPlayer));
          
          
        }

        else
        {
            yield return new WaitForSeconds(1f);
            endTurn.gameObject.SetActive(true);
            CharacterUIPanel.gameObject.SetActive(true);

           

            isMoving = false;
        }


        Debug.Log("Active Player Position: " + playerList[activePlayer % playerList.Count].position);
        for (int i = 0; i < checkWeaponsButton.Length; i++)
        {
            checkWeaponsButton[i].gameObject.SetActive(true);
        }

        yield return new WaitForSeconds(4f);
        attackButton.gameObject.SetActive(false);
        rollDiceButton.gameObject.SetActive(false);

        isMoving = false;

       



    }

    public IEnumerator MoveCPU()
    {
        if (isMoving)
        {
            yield break;
        }

        isMoving = true;

   

       

       
      //  steps = stepsToMove;

        Entity currentPlayer = playerList[activePlayer % playerList.Count];



       
        attackButton.interactable = false;
        rollDiceButton.interactable = false;
        isPlayerRollingDiceMove = true;

        yield return new WaitForSeconds(2f);
        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn.");
        yield return new WaitForSeconds(2f);
        rollDiceText.text = ("");
        yield return new WaitForSeconds(2f);

        RollDice();

        yield return new WaitForSeconds(2f);
        rollDiceText.text = "";

        while (dice.diceValue == 0)
        {
            float timeout = 10f; // Maximum time to wait for the dice value
            float startTime = Time.time;
            while (dice.diceValue == 0)
            {
                if (Time.time - startTime >= timeout)
                {
                    Debug.Log("Timeout reached. Rerolling dice.");
                    RollDice(); //Roll the dice again after timeout reached
                    startTime = Time.time; // Reset the timer after reroll
                }

                yield return null; // Continue waiting until diceValue is updated
                Debug.Log("Waiting for dice to land...");
            }
        }

        // steps = Random.Range(3, 3);

        if (dice.hasLanded == true)
        {

            //  steps = dice.GetDiceValue();
            DepthofFieldforDice();

            /* 
             if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
             {
                 steps = 1;
             }
             else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
             {
                 steps = 16;
             }
             else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
             {
                 steps = 4;
             }
             else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
             {
                 steps = 6;
             }
             else
             {
                  steps = dice.GetDiceValue();
             }
             */



            // steps = dice.GetDiceValue();
            steps = 6;
           // rollDiceText.text = ("Fate chose " + steps);

            
           

            if (steps == 1)
            {
                dice.showDiceForOne();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 2)
            {
                dice.showDiceForTwo();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 3)
            {
                dice.showDiceForThree();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 4)
            {
                dice.showDiceForFour();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 5)
            {
                dice.showDiceForFive();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else if (steps == 6)
            {
                dice.showDiceForSix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }
            else
            {
                dice.showDiceForSix();
                diceLightHolder.gameObject.SetActive(true);
                DiceLight.Play();
                yield return new WaitForSeconds(0.6f);
                ShowDiceSound.Play();
            }

            yield return new WaitForSeconds(1f);

            dice.ResetDicePositionVoid();
            diceLightHolder.gameObject.SetActive(false);
            DiceLight.Stop();
            isPlayerRollingDiceMove = false;

            yield return new WaitForSeconds(0.5f);

            DepthOfFieldBlury();

         
          

            rollDiceButton.gameObject.SetActive(false);
            attackButton.gameObject.SetActive(false);



            routePosition = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;
            float currentIntensity = 0f; ;

            for (int i = routePosition; i < steps + routePosition; i++)
            {
              //  Material changeNodeMaterial = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[(i) % currentRoute.childNodeList.Count].gameObject.GetComponent<MeshRenderer>().materials[0];



                float duration = 0.17f;

                float startValueIntensity = 0;
                float endValueIntensity = 1.8f;

                if (currentPlayer.characterObject.name == "character")
                {
                    endValueIntensity = 2f;
                }
                else if (currentPlayer.characterObject.name == "characterOne")
                {
                    endValueIntensity = 2f;
                }
                else if (currentPlayer.characterObject.name == "characterTwo")
                {
                    endValueIntensity = 2.3f;
                }
                else if (currentPlayer.characterObject.name == "characterThree")
                {
                    endValueIntensity = 2.3f;
                }
                else if (currentPlayer.characterObject.name == "characterFour")
                {
                    endValueIntensity = 2.3f;
                }
                else if (currentPlayer.characterObject.name == "characterFive")
                {
                    endValueIntensity = 2.3f;
                }



                float t = 0;
                while (t < duration)
                {
                    t += Time.deltaTime;
                    /* float newValue = Mathf.Lerp(startValue, endValue, t / duration);
                     changeNodeMaterial.SetFloat("_Scale", newValue);
                    */

                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);

                    if (currentPlayer.characterObject.name == "character")
                    {
                        Color finalColor = Color.yellow * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }
                    else if (currentPlayer.characterObject.name == "characterOne")
                    {
                        Color finalColor = Color.white * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }
                    else if (currentPlayer.characterObject.name == "characterTwo")
                    {
                        Color finalColor = Color.blue * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }
                    else if (currentPlayer.characterObject.name == "characterThree")
                    {
                        Color finalColor = Color.green * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }
                    else if (currentPlayer.characterObject.name == "characterFour")
                    {
                        Color finalColor = Color.cyan * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }
                    else if (currentPlayer.characterObject.name == "characterFive")
                    {
                        Color finalColor = Color.magenta * currentIntensity;
                        changeNodeTexture.SetColor("_EmissionColor", finalColor);
                    }


                    yield return null;
                }

                MovingToNextSquareAudio.Play();


            }

            yield return new WaitForSeconds(0.5f);
            Animator playerAnimator = currentPlayer.playerAnimator;


            playerAnimator.SetBool("IsDiceDoneRolling", true);
            playerAnimator.CrossFade("BeforeMoving", 0.05f);

            yield return new WaitForSeconds(2f);



            playerAnimator.CrossFade("Idle", 0.05f);
            yield return new WaitForSeconds(0.5f);

            playerAnimator.SetBool("IsWalking", true);
            playerAnimator.SetBool("IsDiceDoneRolling", false);
            playerAnimator.CrossFade("Walking", 0.05f);

            CharacterUIPanel.gameObject.SetActive(false);

            while (steps > 0)
            {

                routePosition = (currentPlayer.position + 1) % currentRoute.childNodeList.Count;
                Vector3 nextPos = currentRoute.childNodeList[routePosition].position;
                while (MoveToNextNode(currentPlayer.playerObject, nextPos)) { yield return null; }
                WalkingSound.Play();

                steps--;

                Material changeNodeMaterial = NodeColorObjectList[routePosition].gameObject.GetComponent<MeshRenderer>().materials[1];
                changeNodeMaterial.SetFloat("_Scale", 0f);

                Material changeNodeTexture = NodeColorObjectList[routePosition].gameObject.GetComponent<MeshRenderer>().materials[0];
                currentIntensity = 0f;
                Color finalColor = Color.cyan * currentIntensity;
                changeNodeTexture.SetColor("_EmissionColor", finalColor);



                currentPlayer.position = routePosition;
                yield return new WaitForSeconds(0f);

                for (int i = 0; i < checkWeaponsButton.Length; i++)
                {
                    checkWeaponsButton[i].gameObject.SetActive(false);
                }
            }

            playerAnimator.SetBool("IsWalking", false);
            playerAnimator.CrossFade("Idle", 0.1f);
            WalkingSound.Stop();



            

            yield return new WaitForSeconds(2f);

            //  CharacterUIPanel.gameObject.SetActive(true);

            Debug.Log("Active Player Position: " + playerList[activePlayer % playerList.Count].position);

            if (playerList[activePlayer % playerList.Count].position == 0)
            {
                Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 0, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position == 20)
            {
                Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 270, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position == 30)
            {
                Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 180, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position == 49)
            {
                Quaternion startRotation = playerList[activePlayer].playerObject.transform.rotation;
                Quaternion endRotation = Quaternion.Euler(0, 90, 0);
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }
            }


            if (playerList[activePlayer % playerList.Count].position == 4 ||playerList[activePlayer % playerList.Count].position == 6 || playerList[activePlayer % playerList.Count].position == 9  || playerList[activePlayer % playerList.Count].position == 12 || playerList[activePlayer % playerList.Count].position == 15 || playerList[activePlayer % playerList.Count].position  == 18 || playerList[activePlayer % playerList.Count].position == 22 || playerList[activePlayer % playerList.Count].position == 26 || playerList[activePlayer % playerList.Count].position == 28 || playerList[activePlayer % playerList.Count].position == 32 || playerList[activePlayer % playerList.Count].position == 34 || playerList[activePlayer % playerList.Count].position == 38 || playerList[activePlayer % playerList.Count].position == 41 || playerList[activePlayer % playerList.Count].position == 44 || playerList[activePlayer % playerList.Count].position == 46 ||  playerList[activePlayer % playerList.Count].position == 52 || playerList[activePlayer % playerList.Count].position == 55 || playerList[activePlayer % playerList.Count].position == 57 && state == States.SWITCH_PLAYER)
            {
               DepthofFieldforDice();


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                GunShopCardAnimator.SetBool("HasLandedOnCard", true);
                GunShopCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(1.8f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                GunShopCardAnimator.SetBool("HasEndedLandingOnCard", true);
                GunShopCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                GunShopCardAnimator.SetBool("HasLandedOnCard", false);
                GunShopCardAnimator.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = GunShopCardPanel.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    GunShopCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());

                yield return new WaitForSeconds(1.5f);


                StartCoroutine(ShopManager());

                yield return new WaitForSeconds(2f);

                int randomWeaponIndex = Random.Range(0, weaponShop.Count);
                Weapon selectedWeapon = weaponShop[randomWeaponIndex];

                Entity.WeaponInformation existingWeapon = currentPlayer.WeaponInfo.Find(w => w.name == selectedWeapon.name);

                if (existingWeapon != null)
                {
                    // If the weapon exists, we then add bullets to the existing weapon
                    if (currentPlayer.money >= selectedWeapon.price)
                    {
                        existingWeapon.bullets += selectedWeapon.bullets;
                        currentPlayer.money -= selectedWeapon.price;

                        rollDiceText.text = (currentPlayer.playerName + " bought " + selectedWeapon.name);
                        BoughtWeaponShopAudio.Play();
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";

                        RemoveCharacterUI();
                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;


                    }
                    else
                    {
                        Debug.Log("Not enough money to buy " + selectedWeapon.name);
                        BoughtWeaponText.text = ("Not enough money to buy " + selectedWeapon.name);
                        yield return new WaitForSeconds(1.5f);
                        BoughtWeaponText.text = "";


                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        attackButton.gameObject.SetActive(false);
                        rollDiceButton.gameObject.SetActive(false);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;


                    }

                }
                else
                {
                    if (currentPlayer.money >= selectedWeapon.price)
                    {
                        currentPlayer.money -= selectedWeapon.price;

                        Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                        {
                            name = selectedWeapon.name,
                            range = selectedWeapon.range,
                            damage = selectedWeapon.damage,
                            bullets = selectedWeapon.bullets
                        };

                        currentPlayer.WeaponInfo.Add(weaponInfo);
                        RemoveCharacterUI();

                        Debug.Log(currentPlayer.playerName + " bought " + selectedWeapon.name);
                        rollDiceText.text = (currentPlayer.playerName + " bought " + selectedWeapon.name);
                        BoughtWeaponShopAudio.Play();
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";

                        currentPlayer.hasWeapon = true;
                        currentPlayer.hadWeapon = true;



                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        attackButton.gameObject.SetActive(false);
                        rollDiceButton.gameObject.SetActive(false);

                        RemoveCharacterUI();
                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                        // Update any relevant UI elements here
                    }
                    else
                    {
                        Debug.Log("Not enough money to buy " + selectedWeapon.name);
                        rollDiceText.text = ("Not enough money to buy " + selectedWeapon.name);
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";

                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        attackButton.gameObject.SetActive(false);
                        rollDiceButton.gameObject.SetActive(false);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                    }
                }
               



            }

            else if (playerList[activePlayer % playerList.Count].position == 8 || playerList[activePlayer % playerList.Count].position == 48 && state == States.SWITCH_PLAYER)
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);


                if (currentPlayer.lives >= 6)
                {
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    HospitalCardAnimator.SetBool("HasLandedOnCard", true);
                    HospitalCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                    yield return new WaitForSeconds(5.5f);

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    HospitalCardAnimator.SetBool("HasEndedLandingOnCard", true);
                    HospitalCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                    yield return new WaitForSeconds(1f);

                    HospitalCardAnimator.SetBool("HasLandedOnCard", false);
                    HospitalCardAnimator.SetBool("HasEndedLandingOnCard", false);

                    Vector3 startPositionForCardPanel = HospitalCardPanel.transform.localPosition;
                    Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                    float tPosition = 0;
                    float moveSpeed = 5.0f;

                    while (tPosition < 1)
                    {
                        tPosition += Time.deltaTime * moveSpeed;
                        HospitalCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);

                    }

                    StartCoroutine(BlurEffects());

                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";
                    yield return new WaitForSeconds(3f);

                    attackButton.gameObject.SetActive(false);
                    rollDiceButton.gameObject.SetActive(false);

                    isMoving = false;
                    playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                    AllCharacterPanelsHolder.gameObject.SetActive(true);
                }

                else if (currentPlayer.lives < 6)
                {
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    HospitalHealCardAnimator.SetBool("HasLandedOnCard", true);
                    HospitalHealCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                    yield return new WaitForSeconds(5.5f);

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    HospitalHealCardAnimator.SetBool("HasEndedLandingOnCard", true);
                    HospitalHealCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                    yield return new WaitForSeconds(1f);

                    HospitalHealCardAnimator.SetBool("HasLandedOnCard", false);
                    HospitalHealCardAnimator.SetBool("HasEndedLandingOnCard", false);

                    Vector3 startPositionForCardPanel = HospitalHealCardPanel.transform.localPosition;
                    Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                    float tPosition = 0;
                    float moveSpeed = 5.0f;

                    while (tPosition < 1)
                    {
                        tPosition += Time.deltaTime * moveSpeed;
                        HospitalHealCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                    }

                    currentPlayer.lives++;
                    RemoveCharacterUI();

                    StartCoroutine(BlurEffects());

                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";
                    yield return new WaitForSeconds(3f);

                    attackButton.gameObject.SetActive(false);
                    rollDiceButton.gameObject.SetActive(false);

                    isMoving = false;
                    playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                    AllCharacterPanelsHolder.gameObject.SetActive(true);

                }

            }

            else if (playerList[activePlayer % playerList.Count].position == 3 || playerList[activePlayer % playerList.Count].position == 10 || playerList[activePlayer % playerList.Count].position == 14 || playerList[activePlayer % playerList.Count].position == 17 || playerList[activePlayer % playerList.Count].position == 24 || playerList[activePlayer % playerList.Count].position == 35 || playerList[activePlayer % playerList.Count].position == 37 || playerList[activePlayer % playerList.Count].position == 40 || playerList[activePlayer % playerList.Count].position == 45 || playerList[activePlayer % playerList.Count].position == 54 || playerList[activePlayer % playerList.Count].position == 58 && state == States.SWITCH_PLAYER)
            {
                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                {
                    Quaternion startRotationCharInCar = CharacterInCar.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0.31f, 180f, 9.525f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        CharacterInCar.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                {
                    Quaternion startRotationCharInCar = characterInCarOne.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        characterInCarOne.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                {
                    Quaternion startRotationCharInCar = CharacterInCarTwo.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        CharacterInCarTwo.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                {
                    Quaternion startRotationCharInCar = CharacterInCarThree.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        CharacterInCarThree.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                {
                    Quaternion startRotationCharInCar = CharacterInCarFour.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        CharacterInCarFour.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }
                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                {
                    Quaternion startRotationCharInCar = CharacterInCarFive.transform.localRotation;
                    Quaternion endRotation = Quaternion.Euler(0f, 180f, 15.895f);
                    float t = 0;
                    while (t < 1)
                    {
                        t += Time.deltaTime * turnSpeed;
                        CharacterInCarFive.transform.localRotation = Quaternion.Slerp(startRotationCharInCar, endRotation, t);

                    }
                }


                Vector3 startPositionForPoliceCarStone = PoliceChaseCarStone.transform.localPosition;
                Vector3 endPositionForPoliceCarStone = ChaseSceneCameraSeeObject.transform.localPosition;
                float tPositionForCarStone = 0;
                float moveSpeedForCarStone = 5.0f;

                while (tPositionForCarStone < 1)
                {
                    tPositionForCarStone += Time.deltaTime * moveSpeedForCarStone;
                    PoliceChaseCarStone.transform.localPosition = Vector3.Lerp(startPositionForPoliceCarStone, endPositionForPoliceCarStone, tPositionForCarStone);
                }

                int RobberyCardSelected = Random.Range(0, RobberyCards.Length);

                DepthofFieldforDice();

                AllCharacterPanelsHolder.gameObject.SetActive(false);

                if (RobberyCardSelected == 0)
                {
                    RobBankYesBoolZero = true;

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    RobberyCards[0].SetBool("HasLandedOnRobBank", true);
                    RobberyCards[0].CrossFade("RoberyCardOpening", 0.1f);
                    yield return new WaitForSeconds(5.5f);

                    //

                    int CPUGoingToRobBank = Random.Range(0, 2);


                    if (CPUGoingToRobBank == 0)
                    {
                        playerList[activePlayer % playerList.Count].hasRobbedBank = true;

                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to rob the bank.";
                        yield return new WaitForSeconds(1.5f);
                        rollDiceText.text = "";
                        ObjectMovementScriptPolice.MovementSpeed = 2.85f;
                        CharacterUIPanel.gameObject.SetActive(false);


                        yield return new WaitForSeconds(0f);



                        if (RobBankYesBoolZero == true)
                        {
                            RobberyCardDecision.gameObject.SetActive(false);
                            yield return new WaitForSeconds(0.5f);

                            RobberyCards[0].SetBool("RobBankYes", true);
                            RobberyCards[0].CrossFade("RoberyCardMiddle", 0.01f);

                            yield return new WaitForSeconds(7f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.08f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                           


                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());


                            if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                            {
                                CharacterInCarGun.gameObject.SetActive(true);
                                CharacterInCar.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                            {
                                CharacterInCarGunOne.gameObject.SetActive(true);
                                characterInCarOne.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                            {
                                CharacterInCarGunTwo.gameObject.SetActive(true);
                                CharacterInCarTwo.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                            {
                                CharacterInCarGunThree.gameObject.SetActive(true);
                                CharacterInCarThree.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                            {
                                CharacterInCarGunFour.gameObject.SetActive(true);
                                CharacterInCarFour.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                            {
                                CharacterInCarGunFive.gameObject.SetActive(true);
                                CharacterInCarFive.gameObject.SetActive(true);
                            }
                            PoliceChaseCar.gameObject.SetActive(true);
                            MoneyFallingAway.gameObject.SetActive(true);
                            


                            yield return new WaitForSeconds(0.4f);
                            NPCMovementSpeedRun();

                            DepthOfFieldClear();
                            // cameraController.target = ObjectMovementRedCar.transform;
                            StartCoroutine(PlayerToCarChaseScene());
                            // StartCoroutine(CarChaseSceneCameraMovement());
                            yield return new WaitForSeconds(1.5f);
                            CarsAreMovingChaseAudio.Play();
                            PoliceSirensAudio.Play();
                            GunShotsAudio.Play();
                            CrowdScreamingAudio.Play();

                            yield return new WaitForSeconds(2f);

                            RobberyCardNumberReminder.text = "Roll Between 1 - 6";
                            RobBankDiceRolled.gameObject.SetActive(false);
                            ChaseScenePanel.gameObject.SetActive(true);


                          
                            isPlayerRollingDiceRobBank = true;
                            int RobBankDiceRandomizer = 0;
                            yield return new WaitForSeconds(2f);
                            ChaseScenePanel.gameObject.SetActive(false);

                            yield return new WaitForSeconds(1f);

                            EverythingFreezes();



                            yield return new WaitForSeconds(1f);

                            if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
                            {
                                dice.RollDice();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
                            {
                                dice.RollDiceSecondLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
                            {
                                dice.RollDiceThirdLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 34)
                            {
                                dice.RollDiceFourthLine();
                            }




                            while (dice.diceValue == 0)
                            {
                                yield return null;
                                Debug.Log("null");
                            }

                            yield return new WaitForSeconds(3f);


                            if (dice.hasLanded == true && dice.diceValue > 0)
                            {
                                DepthofFieldforDice();
                                RobBankDiceRandomizer = dice.GetDiceValue();
                                // steps = 7;

                                if (RobBankDiceRandomizer == 1)
                                {
                                    dice.showDiceForRobberyOne();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 2)
                                {
                                    dice.showDiceForRobberyTwo();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 3)
                                {
                                    dice.showDiceForRobberyThree();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 4)
                                {
                                    dice.showDiceForRobberyFour();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 5)
                                {
                                    dice.showDiceForRobberyFive();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 6)
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }

                                yield return new WaitForSeconds(1f);

                                dice.ResetDicePositionVoid();
                                diceLightHolder.gameObject.SetActive(false);
                                DiceLight.Stop();
                                isPlayerRollingDiceRobBank = false;


                                yield return new WaitForSeconds(1f);

                                DepthOfFieldClear();
                            }

                            yield return new WaitForSeconds(2f);

                            EverythingUnFreezes();

                            yield return new WaitForSeconds(1f);

                            //  RobBankYesBoolZero = false;


                            if (RobBankDiceRandomizer >= 1 && RobBankDiceRandomizer <= 6)
                            {
                                //Escaped police and gain money code
                                ChaseScenePanel.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                                ChaseScenePanelVerdict.gameObject.SetActive(true);

                                yield return new WaitForSeconds(2f);

                                RobberyCardVerdictText.text = "You Escaped!";
                                yield return new WaitForSeconds(2f);
                                RobberyCardVerdictText.text = "";


                                // PoliceChaseCar.gameObject.SetActive(false);
                                StartCoroutine(CarChaseSceneCameraMovementEscape());
                                yield return new WaitForSeconds(0.5f);
                                cameraController.target = PoliceChaseCar.transform;
                                yield return new WaitForSeconds(1f);
                                yield return new WaitForSeconds(0.5f);
                                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(true);
                                CarEscapedExplosion.gameObject.SetActive(true);
                                ExplosionAudio.Play();
                                PoliceSirensAudio.Stop();
                                GunShotsAudio.Stop();
                                CarsAreMovingChaseAudio.Stop();
                                CrowdScreamingAudio.Stop();


                                yield return new WaitForSeconds(0.5f);

                                cameraController.target = ObjectMovementRedCar.transform;



                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarGun.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarGunOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarGunTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarGunThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarGunFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarGunFive.gameObject.SetActive(false);
                                }

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarAnimation.SetBool("DidEscape", true);
                                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                                }

                                yield return new WaitForSeconds(4f);

                                ChaseScenePanelVerdict.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                /* cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                                 CharacterUIPanel.gameObject.SetActive(true);
                                 StartCoroutine(BlurEffects());
                                 ResetCameraZoom();
                                 */
                                StartCoroutine(CarToPlayerChaseScene());

                                yield return new WaitForSeconds(1f);

                                int moneyGiven = 2000;
                                playerList[activePlayer % playerList.Count].money += moneyGiven;
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                                RemoveCharacterUI();

                                NPCMovementSpeedWalk();
                                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(false);
                                CarEscapedExplosion.gameObject.SetActive(false);


                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCar.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    characterInCarOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarFive.gameObject.SetActive(false);
                                }

                                yield return new WaitForSeconds(1f);
                                PoliceChaseCar.gameObject.SetActive(false);
                                MoneyFallingAway.gameObject.SetActive(false);
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
                              

                                ObjectMovementScriptPolice.MovementSpeed = 3f;

                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = "";
                                yield return new WaitForSeconds(3f);

                                isMoving = false;
                                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;



                            }
                            else
                            {
                                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));



                            }

                            yield return new WaitForSeconds(1f);



                            RobBankYesBoolZero = false;




                        }

                    }
                    else if (CPUGoingToRobBank == 1)
                    {
                        if (RobBankYesBoolZero == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolZero = false;

                        }
                        else if (RobBankYesBoolOne == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolOne = false;

                        }
                        else if (RobBankYesBoolTwo == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolTwo = false;

                        }
                        else if (RobBankYesBoolThree == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolThree = false;

                        }
                        else if (RobBankYesBoolFour == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());

                            RobBankYesBoolFour = false;

                        }
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

                    }

                }
                else if (RobberyCardSelected == 1)
                {
                    RobBankYesBoolOne = true;
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    RobberyCards[1].SetBool("HasLandedOnRobBank", true);
                    RobberyCards[1].CrossFade("RoberyCardOpening", 0.1f);
                    yield return new WaitForSeconds(5.5f);

                    int CPUGoingToRobBank = Random.Range(0, 2);

                    if (CPUGoingToRobBank == 0)
                    {
                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to rob the bank.";
                        yield return new WaitForSeconds(1.5f);
                        rollDiceText.text = "";
                        ObjectMovementScriptPolice.MovementSpeed = 2.85f;
                        CharacterUIPanel.gameObject.SetActive(false);


                        yield return new WaitForSeconds(0f);



                        if (RobBankYesBoolOne == true)
                        {

                            yield return new WaitForSeconds(0.5f);

                            RobberyCards[1].SetBool("RobBankYes", true);
                            RobberyCards[1].CrossFade("RoberyCardMiddle", 0.01f);

                            yield return new WaitForSeconds(7f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.08f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);




                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());


                            if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                            {
                                CharacterInCarGun.gameObject.SetActive(true);
                                CharacterInCar.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                            {
                                CharacterInCarGunOne.gameObject.SetActive(true);
                                characterInCarOne.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                            {
                                CharacterInCarGunTwo.gameObject.SetActive(true);
                                CharacterInCarTwo.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                            {
                                CharacterInCarGunThree.gameObject.SetActive(true);
                                CharacterInCarThree.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                            {
                                CharacterInCarGunFour.gameObject.SetActive(true);
                                CharacterInCarFour.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                            {
                                CharacterInCarGunFive.gameObject.SetActive(true);
                                CharacterInCarFive.gameObject.SetActive(true);
                            }
                            PoliceChaseCar.gameObject.SetActive(true);
                            MoneyFallingAway.gameObject.SetActive(true);
                            


                            yield return new WaitForSeconds(0.4f);
                            NPCMovementSpeedRun();
                            DepthOfFieldClear();
                            StartCoroutine(PlayerToCarChaseScene());
                            yield return new WaitForSeconds(1.5f);
                            CarsAreMovingChaseAudio.Play();
                            PoliceSirensAudio.Play();
                            GunShotsAudio.Play();
                            CrowdScreamingAudio.Play();
                            //  StartCoroutine(CarChaseSceneCameraMovement());

                            yield return new WaitForSeconds(2f);
                            RobberyCardNumberReminder.text = "Roll Between 2 - 5";
                            RobBankDiceRolled.gameObject.SetActive(false);
                            ChaseScenePanel.gameObject.SetActive(true);



                            isPlayerRollingDiceRobBank = true;
                            int RobBankDiceRandomizer = 0;
                            yield return new WaitForSeconds(2f);
                            ChaseScenePanel.gameObject.SetActive(false);

                            yield return new WaitForSeconds(1f);

                            EverythingFreezes();



                            yield return new WaitForSeconds(1f);

                            if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
                            {
                                dice.RollDice();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
                            {
                                dice.RollDiceSecondLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
                            {
                                dice.RollDiceThirdLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 34)
                            {
                                dice.RollDiceFourthLine();
                            }




                            while (dice.diceValue == 0)
                            {
                                yield return null;
                                Debug.Log("null");
                            }

                            yield return new WaitForSeconds(3f);


                            if (dice.hasLanded == true && dice.diceValue > 0)
                            {
                                DepthofFieldforDice();
                                RobBankDiceRandomizer = dice.GetDiceValue();
                                // steps = 7;

                                if (RobBankDiceRandomizer == 1)
                                {
                                    dice.showDiceForRobberyOne();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 2)
                                {
                                    dice.showDiceForRobberyTwo();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 3)
                                {
                                    dice.showDiceForRobberyThree();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 4)
                                {
                                    dice.showDiceForRobberyFour();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 5)
                                {
                                    dice.showDiceForRobberyFive();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 6)
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }

                                yield return new WaitForSeconds(1f);

                                dice.ResetDicePositionVoid();
                                DiceLight.Stop();
                                diceLightHolder.gameObject.SetActive(false);
                                isPlayerRollingDiceRobBank = false;


                                yield return new WaitForSeconds(1f);

                                DepthOfFieldClear();
                            }

                            yield return new WaitForSeconds(2f);

                            EverythingUnFreezes();

                            yield return new WaitForSeconds(1f);

                           

                            //  RobBankYesBoolZero = false;


                            if (RobBankDiceRandomizer >= 2 && RobBankDiceRandomizer <= 5)
                            {
                                //Escaped police and gain money code
                                ChaseScenePanel.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                                ChaseScenePanelVerdict.gameObject.SetActive(true);

                                yield return new WaitForSeconds(2f);

                                RobberyCardVerdictText.text = "You Escaped!";
                                yield return new WaitForSeconds(2f);
                                RobberyCardVerdictText.text = "";



                                // PoliceChaseCar.gameObject.SetActive(false);
                                StartCoroutine(CarChaseSceneCameraMovementEscape());
                                yield return new WaitForSeconds(0.5f);
                                cameraController.target = PoliceChaseCar.transform;
                                yield return new WaitForSeconds(1f);
                                yield return new WaitForSeconds(0.5f);
                                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(true);
                                CarEscapedExplosion.gameObject.SetActive(true);
                                ExplosionAudio.Play();
                                PoliceSirensAudio.Stop();
                                GunShotsAudio.Stop();
                                CarsAreMovingChaseAudio.Stop();
                                CrowdScreamingAudio.Stop();


                                yield return new WaitForSeconds(0.5f);

                                cameraController.target = ObjectMovementRedCar.transform;

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarGun.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarGunOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarGunTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarGunThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarGunFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarGunFive.gameObject.SetActive(false);
                                }

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarAnimation.SetBool("DidEscape", true);
                                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                                }

                                yield return new WaitForSeconds(4f);

                                ChaseScenePanelVerdict.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                StartCoroutine(CarToPlayerChaseScene());

                               /* CharacterUIPanel.gameObject.SetActive(true);
                                StartCoroutine(BlurEffects());
                                ResetCameraZoom();
                                */

                                yield return new WaitForSeconds(1f);
                                int moneyGiven = 3000;
                                playerList[activePlayer % playerList.Count].money += moneyGiven;

                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                                RemoveCharacterUI();

                                NPCMovementSpeedWalk();
                                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(false);
                                CarEscapedExplosion.gameObject.SetActive(false);


                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCar.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    characterInCarOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarFive.gameObject.SetActive(false);
                                }

                                yield return new WaitForSeconds(1f);
                                PoliceChaseCar.gameObject.SetActive(false);
                                MoneyFallingAway.gameObject.SetActive(false);
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
                               



                                ObjectMovementScriptPolice.MovementSpeed = 3f;

                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = "";
                                yield return new WaitForSeconds(3f);

                                isMoving = false;
                                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;



                            }
                            else
                            {
                                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));



                            }

                            yield return new WaitForSeconds(1f);



                            RobBankYesBoolOne = false;





                        }

                    }
                    else if (CPUGoingToRobBank == 1)
                    {
                        if (RobBankYesBoolZero == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolZero = false;

                        }
                        else if (RobBankYesBoolOne == true)
                        {

                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());


                            RobBankYesBoolOne = false;

                        }
                        else if (RobBankYesBoolTwo == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());

                            RobBankYesBoolTwo = false;

                        }
                        else if (RobBankYesBoolThree == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());

                            RobBankYesBoolThree = false;

                        }
                        else if (RobBankYesBoolFour == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolFour = false;

                        }
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

                    }


                }
                else if (RobberyCardSelected == 2)
                {
                    RobBankYesBoolTwo = true;
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    RobberyCards[2].SetBool("HasLandedOnRobBank", true);
                    RobberyCards[2].CrossFade("RoberyCardOpening", 0.1f);
                    yield return new WaitForSeconds(5.5f);


                    int CPUGoingToRobBank = Random.Range(0, 2);


                    if (CPUGoingToRobBank == 0)
                    {
                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to rob the bank.";
                        yield return new WaitForSeconds(1.5f);
                        rollDiceText.text = "";
                        ObjectMovementScriptPolice.MovementSpeed = 2.85f;
                        CharacterUIPanel.gameObject.SetActive(false);


                        yield return new WaitForSeconds(0f);



                        if (RobBankYesBoolTwo == true)
                        {
                            RobberyCardDecision.gameObject.SetActive(false);
                            yield return new WaitForSeconds(0.5f);

                            RobberyCards[2].SetBool("RobBankYes", true);
                            RobberyCards[2].CrossFade("RoberyCardMiddle", 0.01f);

                            yield return new WaitForSeconds(7f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.08f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);




                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());



                            if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                            {
                                CharacterInCarGun.gameObject.SetActive(true);
                                CharacterInCar.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                            {
                                CharacterInCarGunOne.gameObject.SetActive(true);
                                characterInCarOne.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                            {
                                CharacterInCarGunTwo.gameObject.SetActive(true);
                                CharacterInCarTwo.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                            {
                                CharacterInCarGunThree.gameObject.SetActive(true);
                                CharacterInCarThree.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                            {
                                CharacterInCarGunFour.gameObject.SetActive(true);
                                CharacterInCarFour.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                            {
                                CharacterInCarGunFive.gameObject.SetActive(true);
                                CharacterInCarFive.gameObject.SetActive(true);
                            }
                            PoliceChaseCar.gameObject.SetActive(true);
                            MoneyFallingAway.gameObject.SetActive(true);
                      


                            yield return new WaitForSeconds(0.4f);
                            NPCMovementSpeedRun();
                            DepthOfFieldClear();
                            StartCoroutine(PlayerToCarChaseScene());
                            yield return new WaitForSeconds(1.5f);
                            CarsAreMovingChaseAudio.Play();
                            PoliceSirensAudio.Play();
                            GunShotsAudio.Play();
                            CrowdScreamingAudio.Play();
                            //  StartCoroutine(CarChaseSceneCameraMovement());

                            yield return new WaitForSeconds(2f);

                            RobberyCardNumberReminder.text = "Roll Between 1 - 3";
                            RobBankDiceRolled.gameObject.SetActive(false);
                            ChaseScenePanel.gameObject.SetActive(true);



                            isPlayerRollingDiceRobBank = true;
                            int RobBankDiceRandomizer = 0;
                            yield return new WaitForSeconds(2f);
                            ChaseScenePanel.gameObject.SetActive(false);

                            yield return new WaitForSeconds(1f);

                            EverythingFreezes();



                            yield return new WaitForSeconds(1f);

                            if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
                            {
                                dice.RollDice();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
                            {
                                dice.RollDiceSecondLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
                            {
                                dice.RollDiceThirdLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 34)
                            {
                                dice.RollDiceFourthLine();
                            }




                            while (dice.diceValue == 0)
                            {
                                yield return null;
                                Debug.Log("null");
                            }

                            yield return new WaitForSeconds(3f);


                            if (dice.hasLanded == true && dice.diceValue > 0)
                            {
                                DepthofFieldforDice();
                                RobBankDiceRandomizer = dice.GetDiceValue();
                                // steps = 7;

                                if (RobBankDiceRandomizer == 1)
                                {
                                    dice.showDiceForRobberyOne();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 2)
                                {
                                    dice.showDiceForRobberyTwo();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 3)
                                {
                                    dice.showDiceForRobberyThree();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 4)
                                {
                                    dice.showDiceForRobberyFour();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 5)
                                {
                                    dice.showDiceForRobberyFive();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 6)
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }

                                yield return new WaitForSeconds(1f);

                                dice.ResetDicePositionVoid();
                                diceLightHolder.gameObject.SetActive(false);
                                DiceLight.Stop();
                                isPlayerRollingDiceRobBank = false;


                                yield return new WaitForSeconds(1f);

                                DepthOfFieldClear();
                            }

                            yield return new WaitForSeconds(2f);

                            EverythingUnFreezes();

                            yield return new WaitForSeconds(1f);

                         

                            //  RobBankYesBoolZero = false;


                            if (RobBankDiceRandomizer >= 1 && RobBankDiceRandomizer <= 3)
                            {
                                //Escaped police and gain money code
                                ChaseScenePanel.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                                ChaseScenePanelVerdict.gameObject.SetActive(true);

                                yield return new WaitForSeconds(2f);

                                RobberyCardVerdictText.text = "You Escaped!";
                                yield return new WaitForSeconds(2f);
                                RobberyCardVerdictText.text = "";


                                // PoliceChaseCar.gameObject.SetActive(false);
                                StartCoroutine(CarChaseSceneCameraMovementEscape());
                                yield return new WaitForSeconds(0.5f);
                                cameraController.target = PoliceChaseCar.transform;
                                yield return new WaitForSeconds(1f);
                                yield return new WaitForSeconds(0.5f);
                                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(true);
                                CarEscapedExplosion.gameObject.SetActive(true);
                                ExplosionAudio.Play();
                                PoliceSirensAudio.Stop();
                                GunShotsAudio.Stop();
                                CarsAreMovingChaseAudio.Stop();
                                CrowdScreamingAudio.Stop();


                                yield return new WaitForSeconds(0.5f);

                                cameraController.target = ObjectMovementRedCar.transform;

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarGun.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarGunOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarGunTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarGunThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarGunFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarGunFive.gameObject.SetActive(false);
                                }

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarAnimation.SetBool("DidEscape", true);
                                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                                }

                                yield return new WaitForSeconds(4f);

                                ChaseScenePanelVerdict.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);


                                StartCoroutine(CarToPlayerChaseScene());
                              /*  CharacterUIPanel.gameObject.SetActive(true);
                                StartCoroutine(BlurEffects());
                                ResetCameraZoom();
                                */

                                yield return new WaitForSeconds(1f);
                                int moneyGiven = 4000;
                                playerList[activePlayer % playerList.Count].money += moneyGiven;
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                                RemoveCharacterUI();

                                NPCMovementSpeedWalk();
                                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(false);
                                CarEscapedExplosion.gameObject.SetActive(false);


                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCar.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    characterInCarOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarFive.gameObject.SetActive(false);
                                }

                                yield return new WaitForSeconds(1f);
                                PoliceChaseCar.gameObject.SetActive(false);
                                MoneyFallingAway.gameObject.SetActive(false);
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);



                                ObjectMovementScriptPolice.MovementSpeed = 3f;

                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = "";
                                yield return new WaitForSeconds(3f);

                                isMoving = false;
                                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;




                            }
                            else
                            {
                                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));



                            }

                            yield return new WaitForSeconds(1f);



                            RobBankYesBoolTwo = false;





                        }

                    }
                    else if (CPUGoingToRobBank == 1)
                    {
                        if (RobBankYesBoolZero == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolZero = false;

                        }
                        else if (RobBankYesBoolOne == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolOne = false;

                        }
                        else if (RobBankYesBoolTwo == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolTwo = false;

                        }
                        else if (RobBankYesBoolThree == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());


                            RobBankYesBoolThree = false;

                        }
                        else if (RobBankYesBoolFour == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolFour = false;

                        }
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

                    }

                }
                else if (RobberyCardSelected == 3)
                {
                    RobBankYesBoolThree = true;
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    RobberyCards[3].SetBool("HasLandedOnRobBank", true);
                    RobberyCards[3].CrossFade("RoberyCardOpening", 0.1f);
                    yield return new WaitForSeconds(5.5f);




                    int CPUGoingToRobBank = Random.Range(0, 2);


                    if (CPUGoingToRobBank == 0)
                    {
                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to rob the bank.";
                        yield return new WaitForSeconds(1.5f);
                        rollDiceText.text = "";
                        ObjectMovementScriptPolice.MovementSpeed = 2.85f;
                        CharacterUIPanel.gameObject.SetActive(false);


                        yield return new WaitForSeconds(0f);



                        if (RobBankYesBoolThree == true)
                        {
                            RobberyCardDecision.gameObject.SetActive(false);
                            yield return new WaitForSeconds(0.5f);

                            RobberyCards[3].SetBool("RobBankYes", true);
                            RobberyCards[3].CrossFade("RoberyCardMiddle", 0.01f);

                            yield return new WaitForSeconds(7f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.08f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);




                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());


                            if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                            {
                                CharacterInCarGun.gameObject.SetActive(true);
                                CharacterInCar.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                            {
                                CharacterInCarGunOne.gameObject.SetActive(true);
                                characterInCarOne.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                            {
                                CharacterInCarGunTwo.gameObject.SetActive(true);
                                CharacterInCarTwo.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                            {
                                CharacterInCarGunThree.gameObject.SetActive(true);
                                CharacterInCarThree.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                            {
                                CharacterInCarGunFour.gameObject.SetActive(true);
                                CharacterInCarFour.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                            {
                                CharacterInCarGunFive.gameObject.SetActive(true);
                                CharacterInCarFive.gameObject.SetActive(true);
                            }
                            PoliceChaseCar.gameObject.SetActive(true);
                            MoneyFallingAway.gameObject.SetActive(true);
                           


                            yield return new WaitForSeconds(0.4f);
                            NPCMovementSpeedRun();

                            DepthOfFieldClear();
                            StartCoroutine(PlayerToCarChaseScene());
                            yield return new WaitForSeconds(1.5f);
                            CarsAreMovingChaseAudio.Play();
                            PoliceSirensAudio.Play();
                            GunShotsAudio.Play();
                            CrowdScreamingAudio.Play();
                            // StartCoroutine(CarChaseSceneCameraMovement());

                            yield return new WaitForSeconds(2f);

                            RobberyCardNumberReminder.text = "Roll 1 Or 6";
                            RobBankDiceRolled.gameObject.SetActive(false);
                            ChaseScenePanel.gameObject.SetActive(true);



                            isPlayerRollingDiceRobBank = true;
                            int RobBankDiceRandomizer = 0;
                            yield return new WaitForSeconds(2f);
                            ChaseScenePanel.gameObject.SetActive(false);

                            yield return new WaitForSeconds(1f);

                            EverythingFreezes();



                            yield return new WaitForSeconds(1f);

                            if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
                            {
                                dice.RollDice();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
                            {
                                dice.RollDiceSecondLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
                            {
                                dice.RollDiceThirdLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 34)
                            {
                                dice.RollDiceFourthLine();
                            }




                            while (dice.diceValue == 0)
                            {
                                yield return null;
                                Debug.Log("null");
                            }

                            yield return new WaitForSeconds(3f);


                            if (dice.hasLanded == true && dice.diceValue > 0)
                            {
                                DepthofFieldforDice();
                                RobBankDiceRandomizer = dice.GetDiceValue();
                                // steps = 7;

                                if (RobBankDiceRandomizer == 1)
                                {
                                    dice.showDiceForRobberyOne();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 2)
                                {
                                    dice.showDiceForRobberyTwo();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 3)
                                {
                                    dice.showDiceForRobberyThree();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 4)
                                {
                                    dice.showDiceForRobberyFour();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 5)
                                {
                                    dice.showDiceForRobberyFive();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 6)
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }

                                yield return new WaitForSeconds(1f);

                                dice.ResetDicePositionVoid();
                                diceLightHolder.gameObject.SetActive(false);
                                DiceLight.Stop();
                                isPlayerRollingDiceRobBank = false;


                                yield return new WaitForSeconds(1f);

                                DepthOfFieldClear();
                            }

                            yield return new WaitForSeconds(2f);

                            EverythingUnFreezes();

                            yield return new WaitForSeconds(1f);

                           

                            //  RobBankYesBoolZero = false;


                            if (RobBankDiceRandomizer == 1 || RobBankDiceRandomizer == 6)
                            {
                                //Escaped police and gain money code
                                ChaseScenePanel.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                                ChaseScenePanelVerdict.gameObject.SetActive(true);

                                yield return new WaitForSeconds(2f);

                                RobberyCardVerdictText.text = "You Escaped!";
                                yield return new WaitForSeconds(2f);
                                RobberyCardVerdictText.text = "";


                                // PoliceChaseCar.gameObject.SetActive(false);
                                StartCoroutine(CarChaseSceneCameraMovementEscape());
                                yield return new WaitForSeconds(0.5f);
                                cameraController.target = PoliceChaseCar.transform;
                                yield return new WaitForSeconds(1f);
                                yield return new WaitForSeconds(0.5f);
                                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(true);
                                CarEscapedExplosion.gameObject.SetActive(true);
                                ExplosionAudio.Play();
                                PoliceSirensAudio.Stop();
                                GunShotsAudio.Stop();
                                CarsAreMovingChaseAudio.Stop();
                                CrowdScreamingAudio.Stop();


                                yield return new WaitForSeconds(0.5f);

                                cameraController.target = ObjectMovementRedCar.transform;

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarGun.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarGunOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarGunTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarGunThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarGunFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarGunFive.gameObject.SetActive(false);
                                }

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarAnimation.SetBool("DidEscape", true);
                                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                                }

                                yield return new WaitForSeconds(4f);

                                ChaseScenePanelVerdict.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                StartCoroutine(CarToPlayerChaseScene());
                              /*  CharacterUIPanel.gameObject.SetActive(true);
                                StartCoroutine(BlurEffects());
                                ResetCameraZoom();
                                */

                                yield return new WaitForSeconds(1f);
                                int moneyGiven = 6000;
                                playerList[activePlayer % playerList.Count].money += moneyGiven;
                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                                RemoveCharacterUI();

                                NPCMovementSpeedWalk();
                                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(false);
                                CarEscapedExplosion.gameObject.SetActive(false);

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCar.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    characterInCarOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarFive.gameObject.SetActive(false);
                                }

                                yield return new WaitForSeconds(1f);
                                PoliceChaseCar.gameObject.SetActive(false);
                                MoneyFallingAway.gameObject.SetActive(false);

                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
                                


                                ObjectMovementScriptPolice.MovementSpeed = 3f;

                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = "";
                                yield return new WaitForSeconds(3f);

                                isMoving = false;
                                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;



                            }
                            else
                            {
                                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));



                            }

                            yield return new WaitForSeconds(1f);



                            RobBankYesBoolThree = false;





                        }

                    }
                    else if (CPUGoingToRobBank == 1)
                    {
                        if (RobBankYesBoolZero == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolZero = false;

                        }
                        else if (RobBankYesBoolOne == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolOne = false;

                        }
                        else if (RobBankYesBoolTwo == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());

                            RobBankYesBoolTwo = false;

                        }
                        else if (RobBankYesBoolThree == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolThree = false;

                        }
                        else if (RobBankYesBoolFour == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolFour = false;

                        }
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

                    }

                }
                else if (RobberyCardSelected == 4)
                {
                    RobBankYesBoolFour = true;

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    RobberyCards[4].SetBool("HasLandedOnRobBank", true);
                    RobberyCards[4].CrossFade("RoberyCardOpening", 0.1f);
                    yield return new WaitForSeconds(5.5f);


                    int CPUGoingToRobBank = Random.Range(0, 2);


                    if (CPUGoingToRobBank == 0)
                    {
                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to rob the bank.";
                        yield return new WaitForSeconds(1.5f);
                        rollDiceText.text = "";
                        ObjectMovementScriptPolice.MovementSpeed = 2.85f;
                        CharacterUIPanel.gameObject.SetActive(false);


                        yield return new WaitForSeconds(0f);



                        if (RobBankYesBoolFour == true)
                        {
                            RobberyCardDecision.gameObject.SetActive(false);
                            yield return new WaitForSeconds(0.5f);

                            RobberyCards[4].SetBool("RobBankYes", true);
                            RobberyCards[4].CrossFade("RoberyCardMiddle", 0.01f);

                            yield return new WaitForSeconds(7f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.08f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);




                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());



                            if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                            {
                                CharacterInCarGun.gameObject.SetActive(true);
                                CharacterInCar.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                            {
                                CharacterInCarGunOne.gameObject.SetActive(true);
                                characterInCarOne.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                            {
                                CharacterInCarGunTwo.gameObject.SetActive(true);
                                CharacterInCarTwo.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                            {
                                CharacterInCarGunThree.gameObject.SetActive(true);
                                CharacterInCarThree.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                            {
                                CharacterInCarGunFour.gameObject.SetActive(true);
                                CharacterInCarFour.gameObject.SetActive(true);
                            }
                            else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                            {
                                CharacterInCarGunFive.gameObject.SetActive(true);
                                CharacterInCarFive.gameObject.SetActive(true);
                            }
                            PoliceChaseCar.gameObject.SetActive(true);
                            MoneyFallingAway.gameObject.SetActive(true);
                           


                            yield return new WaitForSeconds(0.4f);
                            NPCMovementSpeedRun();

                            DepthOfFieldClear();
                            StartCoroutine(PlayerToCarChaseScene());
                            yield return new WaitForSeconds(1.5f);
                            CarsAreMovingChaseAudio.Play();
                            PoliceSirensAudio.Play();
                            GunShotsAudio.Play();
                            CrowdScreamingAudio.Play();
                            //StartCoroutine(CarChaseSceneCameraMovement());

                            yield return new WaitForSeconds(2f);

                            RobberyCardNumberReminder.text = "Roll 6";
                            RobBankDiceRolled.gameObject.SetActive(false);
                            ChaseScenePanel.gameObject.SetActive(true);



                            isPlayerRollingDiceRobBank = true;
                            int RobBankDiceRandomizer = 0;
                            yield return new WaitForSeconds(2f);
                            ChaseScenePanel.gameObject.SetActive(false);

                            yield return new WaitForSeconds(1f);

                            EverythingFreezes();



                            yield return new WaitForSeconds(1f);

                            if (ObjectMovementRedCar.routePosition == 0 || ObjectMovementRedCar.routePosition <= 11)
                            {
                                dice.RollDice();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 12 && ObjectMovementRedCar.routePosition <= 18)
                            {
                                dice.RollDiceSecondLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 19 && ObjectMovementRedCar.routePosition <= 28)
                            {
                                dice.RollDiceThirdLine();
                            }
                            else if (ObjectMovementRedCar.routePosition >= 29 && ObjectMovementRedCar.routePosition <= 34)
                            {
                                dice.RollDiceFourthLine();
                            }




                            while (dice.diceValue == 0)
                            {
                                yield return null;
                                Debug.Log("null");
                            }

                            yield return new WaitForSeconds(3f);


                            if (dice.hasLanded == true && dice.diceValue > 0)
                            {
                                DepthofFieldforDice();
                                RobBankDiceRandomizer = dice.GetDiceValue();
                                // steps = 7;

                                if (RobBankDiceRandomizer == 1)
                                {
                                    dice.showDiceForRobberyOne();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 2)
                                {
                                    dice.showDiceForRobberyTwo();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 3)
                                {
                                    dice.showDiceForRobberyThree();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 4)
                                {
                                    dice.showDiceForRobberyFour();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 5)
                                {
                                    dice.showDiceForRobberyFive();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else if (RobBankDiceRandomizer == 6)
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }
                                else
                                {
                                    dice.showDiceForRobberySix();
                                    diceLightHolder.gameObject.SetActive(true);
                                    DiceLight.Play();
                                    yield return new WaitForSeconds(0.6f);
                                    ShowDiceSound.Play();
                                }

                                yield return new WaitForSeconds(1f);

                                dice.ResetDicePositionVoid();
                                diceLightHolder.gameObject.SetActive(false);
                                DiceLight.Stop();
                                isPlayerRollingDiceRobBank = false;


                                yield return new WaitForSeconds(1f);

                                DepthOfFieldClear();
                            }

                            yield return new WaitForSeconds(2f);

                            EverythingUnFreezes();

                            yield return new WaitForSeconds(1f);

                           

                            //  RobBankYesBoolZero = false;


                            if (RobBankDiceRandomizer == 6)
                            {
                                //Escaped police and gain money code
                                ChaseScenePanel.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                RobberyCardNumberRolled.text = "You Rolled: " + (RobBankDiceRandomizer);
                                ChaseScenePanelVerdict.gameObject.SetActive(true);

                                yield return new WaitForSeconds(2f);

                                RobberyCardVerdictText.text = "You Escaped!";
                                yield return new WaitForSeconds(2f);
                                RobberyCardVerdictText.text = "";




                                // PoliceChaseCar.gameObject.SetActive(false);
                                StartCoroutine(CarChaseSceneCameraMovementEscape());
                                yield return new WaitForSeconds(0.5f);
                                cameraController.target = PoliceChaseCar.transform;
                                yield return new WaitForSeconds(1f);
                                yield return new WaitForSeconds(0.5f);
                                PoliceCarFlip.SetBool("RollCorrectNumbers", true);
                                PoliceCarFlip.CrossFade("CarFlip", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(true);
                                CarEscapedExplosion.gameObject.SetActive(true);
                                ExplosionAudio.Play();
                                PoliceSirensAudio.Stop();
                                GunShotsAudio.Stop();
                                CarsAreMovingChaseAudio.Stop();
                                CrowdScreamingAudio.Stop();


                                yield return new WaitForSeconds(0.5f);

                                cameraController.target = ObjectMovementRedCar.transform;

                              

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarGun.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarGunOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarGunTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarGunThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarGunFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarGunFive.gameObject.SetActive(false);
                                }

                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCarAnimation.SetBool("DidEscape", true);
                                    CharacterInCarAnimation.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    CharacterInCarAnimationOne.SetBool("DidEscape", true);
                                    CharacterInCarAnimationOne.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarAnimationTwo.SetBool("DidEscape", true);
                                    CharacterInCarAnimationTwo.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarAnimationThree.SetBool("DidEscape", true);
                                    CharacterInCarAnimationThree.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarAnimationFour.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFour.CrossFade("VictoryIdle", 0.02f);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarAnimationFive.SetBool("DidEscape", true);
                                    CharacterInCarAnimationFive.CrossFade("VictoryIdle", 0.02f);
                                }

                                yield return new WaitForSeconds(4f);

                                ChaseScenePanelVerdict.gameObject.SetActive(false);
                                yield return new WaitForSeconds(1f);

                                StartCoroutine(CarToPlayerChaseScene());
                              /*  CharacterUIPanel.gameObject.SetActive(true);
                                StartCoroutine(BlurEffects());
                                ResetCameraZoom();
                                */

                                yield return new WaitForSeconds(1f);
                                int moneyGiven = 9000;
                                playerList[activePlayer % playerList.Count].money += moneyGiven;

                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                                RemoveCharacterUI();

                                NPCMovementSpeedWalk();
                                PoliceCarFlip.SetBool("RollCorrectNumbers", false);
                                PoliceCarFlip.CrossFade("CarNormal", 0.02f);
                                CarFlipSmoke.gameObject.SetActive(false);
                                CarEscapedExplosion.gameObject.SetActive(false);


                                if (playerList[activePlayer % playerList.Count].characterObject.name == "character")
                                {
                                    CharacterInCar.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterOne")
                                {
                                    characterInCarOne.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterTwo")
                                {
                                    CharacterInCarTwo.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterThree")
                                {
                                    CharacterInCarThree.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFour")
                                {
                                    CharacterInCarFour.gameObject.SetActive(false);
                                }
                                else if (playerList[activePlayer % playerList.Count].characterObject.name == "characterFive")
                                {
                                    CharacterInCarFive.gameObject.SetActive(false);
                                }

                                yield return new WaitForSeconds(1f);
                                PoliceChaseCar.gameObject.SetActive(false);
                                MoneyFallingAway.gameObject.SetActive(false);

                                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
                               


                                ObjectMovementScriptPolice.MovementSpeed = 3f;


                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                                yield return new WaitForSeconds(2f);
                                rollDiceText.text = "";
                                yield return new WaitForSeconds(3f);

                                isMoving = false;
                                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;


                            }
                            else
                            {
                                StartCoroutine(PlayerGotCaught(RobBankDiceRandomizer));



                            }

                            yield return new WaitForSeconds(1f);



                            RobBankYesBoolFour = false;





                        }

                    }
                    else if (CPUGoingToRobBank == 1)
                    {
                        if (RobBankYesBoolZero == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[0].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[0].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[0].SetBool("RobBankYes", false);
                            RobberyCards[0].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEasy.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEasy.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolZero = false;

                        }
                        else if (RobBankYesBoolOne == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[1].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[1].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[1].SetBool("RobBankYes", false);
                            RobberyCards[1].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMedium.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMedium.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }


                            StartCoroutine(BlurEffects());

                            RobBankYesBoolOne = false;

                        }
                        else if (RobBankYesBoolTwo == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[2].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[2].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[2].SetBool("RobBankYes", false);
                            RobberyCards[2].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardMediumGettingHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardMediumGettingHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolTwo = false;

                        }
                        else if (RobBankYesBoolThree == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[3].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[3].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[3].SetBool("RobBankYes", false);
                            RobberyCards[3].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardHard.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardHard.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolThree = false;

                        }
                        else if (RobBankYesBoolFour == true)
                        {
                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " decided to not rob the bank.";

                            yield return new WaitForSeconds(0.5f);

                            CardsPickedAudio.Play();
                            yield return new WaitForSeconds(0.2f);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", true);
                            RobberyCards[4].CrossFade("RoberyCardEnding", 0.01f);

                            yield return new WaitForSeconds(1f);

                            RobberyCards[4].SetBool("HasLandedOnRobBank", false);
                            RobberyCards[4].SetBool("RobBankYes", false);
                            RobberyCards[4].SetBool("HasEndedLandingOnRobBank", false);

                            Vector3 startPositionForCardPanel = RobberyCardEpic.transform.localPosition;
                            Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                            float tPosition = 0;
                            float moveSpeed = 5.0f;

                            while (tPosition < 1)
                            {
                                tPosition += Time.deltaTime * moveSpeed;
                                RobberyCardEpic.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                            }

                            StartCoroutine(BlurEffects());

                            RobBankYesBoolFour = false;

                        }
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                        yield return new WaitForSeconds(2f);
                        rollDiceText.text = "";
                        yield return new WaitForSeconds(3f);

                        isMoving = false;
                        playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;

                    }



                }



                AllCharacterPanelsHolder.gameObject.SetActive(true);

            }

            else if (playerList[activePlayer % playerList.Count].position == 5 || playerList[activePlayer % playerList.Count].position == 31 || playerList[activePlayer % playerList.Count].position == 51)
            {
                int RandomizeBrokerCards = Random.Range(0, 2);

                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                if (RandomizeBrokerCards == 0)
                {
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);

                    BrokerCards[0].SetBool("HasLandedOnCard", true);
                    BrokerCards[0].CrossFade("CardPanelOpening",0.1f);

                    yield return new WaitForSeconds(5.5f);

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    BrokerCards[0].SetBool("HasEndedLandingOnCard", true);
                    BrokerCards[0].CrossFade("CardPanelEnding", 0.08f);

                    yield return new WaitForSeconds(1f);

                    BrokerCards[0].SetBool("HasLandedOnCard", false);
                    BrokerCards[0].SetBool("HasEndedLandingOnCard", false);

                    Vector3 startPositionForCardPanel = BrokerCardWeapon.transform.localPosition;
                    Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                    float tPosition = 0;
                    float moveSpeed = 5.0f;

                    while (tPosition < 1)
                    {
                        tPosition += Time.deltaTime * moveSpeed;
                        BrokerCardWeapon.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                    }

                    StartCoroutine(BlurEffects());

                    Weapon selectedWeapon = weaponShop[0];

                    Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                    {
                        name = selectedWeapon.name,
                        range = selectedWeapon.range,
                        damage = selectedWeapon.damage,
                        bullets = selectedWeapon.bullets
                    };

                    currentPlayer.WeaponInfo.Add(weaponInfo);
                    RemoveCharacterUI();

                    playerList[activePlayer % playerList.Count].hasWeapon = true;


                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";
                    yield return new WaitForSeconds(3f);

                    isMoving = false;
                    playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                    AllCharacterPanelsHolder.gameObject.SetActive(true);
                }
                else if (RandomizeBrokerCards == 1)
                {
                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    BrokerCards[1].SetBool("HasLandedOnCard", true);
                    BrokerCards[1].CrossFade("CardPanelOpening", 0.1f);

                    yield return new WaitForSeconds(5.5f);

                    CardsPickedAudio.Play();
                    yield return new WaitForSeconds(0.2f);
                    BrokerCards[1].SetBool("HasEndedLandingOnCard", true);
                    BrokerCards[1].CrossFade("CardPanelEnding", 0.08f);

                    yield return new WaitForSeconds(1f);

                    BrokerCards[1].SetBool("HasLandedOnCard", false);
                    BrokerCards[1].SetBool("HasEndedLandingOnCard", false);

                    Vector3 startPositionForCardPanel = BrokerCardMoney.transform.localPosition;
                    Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                    float tPosition = 0;
                    float moveSpeed = 5.0f;

                    while (tPosition < 1)
                    {
                        tPosition += Time.deltaTime * moveSpeed;
                        BrokerCardMoney.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                    }

                    int brokerCardsAddMoney = 1000;
                    playerList[activePlayer % playerList.Count].money += brokerCardsAddMoney;
                    RemoveCharacterUI();



                    StartCoroutine(BlurEffects());



                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";
                    yield return new WaitForSeconds(3f);

                    isMoving = false;
                    playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
                    AllCharacterPanelsHolder.gameObject.SetActive(true);

                }
            }
            else if (playerList[activePlayer % playerList.Count].position == 1 || playerList[activePlayer % playerList.Count].position == 7 || playerList[activePlayer % playerList.Count].position == 11 || playerList[activePlayer % playerList.Count].position == 19 || playerList[activePlayer % playerList.Count].position == 21 || playerList[activePlayer % playerList.Count].position == 43 || playerList[activePlayer % playerList.Count].position == 47 || playerList[activePlayer % playerList.Count].position == 56)
            {
                DepthofFieldforDice();


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                SafeZoneCardAnimator.SetBool("HasLandedOnCard", true);
                SafeZoneCardAnimator.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(1.8f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                SafeZoneCardAnimator.SetBool("HasEndedLandingOnCard", true);
                SafeZoneCardAnimator.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                SafeZoneCardAnimator.SetBool("HasLandedOnCard", false);
                SafeZoneCardAnimator.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = SafeZoneCardPanel.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    SafeZoneCardPanel.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                isMoving = false;
                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;



                StartCoroutine(BlurEffects());
                //


                
            }
            else if (playerList[activePlayer % playerList.Count].position == 16 || playerList[activePlayer % playerList.Count].position == 25 || playerList[activePlayer % playerList.Count].position == 33 || playerList[activePlayer % playerList.Count].position == 42)
            {
                StartCoroutine(TrapCardsFunction());
            }
            else if (playerList[activePlayer % playerList.Count].position == 13 || playerList[activePlayer % playerList.Count].position == 20 || playerList[activePlayer % playerList.Count].position == 29 || playerList[activePlayer % playerList.Count].position == 49) // || playerList[activePlayer].position == 20 || playerList[activePlayer].position == 30 || playerList[activePlayer].position == 49)
            {

                StartCoroutine(PoliceStopFunction(currentPlayer, currentIntensity));

            }
            else if (playerList[activePlayer % playerList.Count].position == 2 || playerList[activePlayer % playerList.Count].position == 23 || playerList[activePlayer % playerList.Count].position == 27 || playerList[activePlayer % playerList.Count].position == 36 || playerList[activePlayer % playerList.Count].position == 39 || playerList[activePlayer % playerList.Count].position == 50 || playerList[activePlayer % playerList.Count].position == 53)
            {

                StartCoroutine(MysteryCardsFunction(currentPlayer));


            }
            else
            {
                yield return new WaitForSeconds(2f);
                rollDiceText.text = (playerList[activePlayer % playerList.Count].playerName + "'s turn ended.");
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                yield return new WaitForSeconds(3f);

                attackButton.gameObject.SetActive(false);
                rollDiceButton.gameObject.SetActive(false);

                isMoving = false;
                playerList[activePlayer % playerList.Count].isCPUDoneWalking = true;
            }

            for (int i = 0; i < checkWeaponsButton.Length; i++)
            {
                checkWeaponsButton[i].gameObject.SetActive(true);
            }
        }

        moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);
        moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);



    }


    public IEnumerator BuyWeaponsFunctionHuman( int weaponIndex)
    {
        Entity currentPlayer = playerList[activePlayer % playerList.Count];
        Weapon selectedWeapon = weaponShop[weaponIndex]; 

        // To check if the player already has the same weapon
        Entity.WeaponInformation existingWeapon = currentPlayer.WeaponInfo.Find(w => w.name == selectedWeapon.name);


       
        weaponButtonOne.gameObject.SetActive(false);
        weaponButtonTwo.gameObject.SetActive(false);
        weaponButtonThree.gameObject.SetActive(false);
        weaponButtonFour.gameObject.SetActive(false);
        weaponButtonFive.gameObject.SetActive(false);
        weaponButtonSix.gameObject.SetActive(false);
        weaponButtonSeven.gameObject.SetActive(false);
        weaponButtonEight.gameObject.SetActive(false);
        weaponButtonNine.gameObject.SetActive(false);
        CloseShopButton.gameObject.SetActive(false);

        yield return new WaitForSeconds(0.4f);



        if (existingWeapon != null)
        {
           
            // If the weapon exists, add bullets to the existing weapon
            if (currentPlayer.money >= selectedWeapon.price)
            {
                BoughtWeaponShopAudio.Play();
                existingWeapon.bullets += selectedWeapon.bullets;
                currentPlayer.money -= selectedWeapon.price;
                RemoveCharacterUI();


                BoughtFromShopMoneyAnim[0].SetBool("HasBought", true);
                BoughtFromShopMoneyAnim[0].CrossFade("BuyingFromShop", 0.05f);

                BoughtFromShopMoneyAnim[1].SetBool("HasBought", true);
                BoughtFromShopMoneyAnim[1].CrossFade("BuyingFromShopOne", 0.05f);
              

                yield return new WaitForSeconds(2f);

                CharacterMoneyInShop.text = "Player Money: $" + currentPlayer.money;



                weaponButtonOne.gameObject.SetActive(true);
                weaponButtonTwo.gameObject.SetActive(true);
                weaponButtonThree.gameObject.SetActive(true);
                weaponButtonFour.gameObject.SetActive(true);
                weaponButtonFive.gameObject.SetActive(true);
                weaponButtonSix.gameObject.SetActive(true);
                weaponButtonSeven.gameObject.SetActive(true);
                weaponButtonEight.gameObject.SetActive(true);
                weaponButtonNine.gameObject.SetActive(true);
                CloseShopButton.gameObject.SetActive(true);

                BoughtFromShopMoneyAnim[0].SetBool("HasBought", false);
                BoughtFromShopMoneyAnim[0].CrossFade("New State", 0.05f);

                BoughtFromShopMoneyAnim[1].SetBool("HasBought", false);
                BoughtFromShopMoneyAnim[1].CrossFade("New State", 0.05f);

            }
            else
            {
                Debug.Log("Not enough money to buy " + selectedWeapon.name);
                BoughtWeaponText.text = ("Not enough money to buy " + selectedWeapon.name);
                yield return new WaitForSeconds(1.5f);
                BoughtWeaponText.text = "";

                weaponButtonOne.gameObject.SetActive(true);
                weaponButtonTwo.gameObject.SetActive(true);
                weaponButtonThree.gameObject.SetActive(true);
                weaponButtonFour.gameObject.SetActive(true);
                weaponButtonFive.gameObject.SetActive(true);
                weaponButtonSix.gameObject.SetActive(true);
                weaponButtonSeven.gameObject.SetActive(true);
                weaponButtonEight.gameObject.SetActive(true);
                weaponButtonNine.gameObject.SetActive(true);
                CloseShopButton.gameObject.SetActive(true);
            }
          
        }
        else
        {

            // If the weapon doesn't exist, create a new instance and add it to the list
            if (currentPlayer.money >= selectedWeapon.price)
            {
                BoughtWeaponShopAudio.Play();
                currentPlayer.money -= selectedWeapon.price;

                Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                {
                    name = selectedWeapon.name,
                    range = selectedWeapon.range,
                    damage = selectedWeapon.damage,
                    bullets = selectedWeapon.bullets
                };

                currentPlayer.WeaponInfo.Add(weaponInfo);
                RemoveCharacterUI();

                Debug.Log(currentPlayer.playerName + " bought " + selectedWeapon.name);
                BoughtFromShopMoneyAnim[0].SetBool("HasBought", true);
                BoughtFromShopMoneyAnim[0].CrossFade("BuyingFromShop", 0.05f);

                BoughtFromShopMoneyAnim[1].SetBool("HasBought", true);
                BoughtFromShopMoneyAnim[1].CrossFade("BuyingFromShopOne", 0.05f);
                

                yield return new WaitForSeconds(2f);

                CharacterMoneyInShop.text = "Player Money: $" + currentPlayer.money;



                weaponButtonOne.gameObject.SetActive(true);
                weaponButtonTwo.gameObject.SetActive(true);
                weaponButtonThree.gameObject.SetActive(true);
                weaponButtonFour.gameObject.SetActive(true);
                weaponButtonFive.gameObject.SetActive(true);
                weaponButtonSix.gameObject.SetActive(true);
                weaponButtonSeven.gameObject.SetActive(true);
                weaponButtonEight.gameObject.SetActive(true);
                weaponButtonNine.gameObject.SetActive(true);
                CloseShopButton.gameObject.SetActive(true);


                BoughtFromShopMoneyAnim[0].SetBool("HasBought", false);
                BoughtFromShopMoneyAnim[0].CrossFade("New State", 0.05f);

                BoughtFromShopMoneyAnim[1].SetBool("HasBought", false);
                BoughtFromShopMoneyAnim[1].CrossFade("New State", 0.05f);



                currentPlayer.hasWeapon = true;
                currentPlayer.hadWeapon = true;

                // Update any relevant UI elements here
            }
            else
            {
                Debug.Log("Not enough money to buy " + selectedWeapon.name);
                BoughtWeaponText.text = ("Not enough money to buy " + selectedWeapon.name);
                yield return new WaitForSeconds(2f);
                BoughtWeaponText.text = "";

                weaponButtonOne.gameObject.SetActive(true);
                weaponButtonTwo.gameObject.SetActive(true);
                weaponButtonThree.gameObject.SetActive(true);
                weaponButtonFour.gameObject.SetActive(true);
                weaponButtonFive.gameObject.SetActive(true);
                weaponButtonSix.gameObject.SetActive(true);
                weaponButtonSeven.gameObject.SetActive(true);
                weaponButtonEight.gameObject.SetActive(true);
                weaponButtonNine.gameObject.SetActive(true);
                CloseShopButton.gameObject.SetActive(true);
            }
        }


    }


    bool MoveToNextNode(GameObject playerObject, Vector3 goal)
    {

      


        playerObject.transform.position = Vector3.MoveTowards(
            playerObject.transform.position, goal, 1.45f * Time.deltaTime);

        // check if player has reached a certain square and rotate the character object accordingly
        if (playerList[activePlayer % playerList.Count].position == 20)
        {
            Quaternion startRotation = playerList[activePlayer % playerList.Count].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, -90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);
                
            }
            playerList[activePlayer % playerList.Count].hasPassedSalarySquare++;
        }
        else if(playerList[activePlayer % playerList.Count].position == 30) 
        {

            Quaternion startRotation = playerList[activePlayer % playerList.Count].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, -180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

            if (playerList[activePlayer % playerList.Count].hasPassedSalarySquare >= 1)
            {
                bool hasGoneRoundBoard = playerList[activePlayer % playerList.Count].goneRoundBoard = true;

                if (playerList[activePlayer % playerList.Count].hasRobbedBank == false && playerList[activePlayer % playerList.Count].hasWeapon == false)
                {

                    StartCoroutine(fireWorks());
                    StartCoroutine(SalaryUIEnum());


                    moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                    moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);







                    playerList[activePlayer % playerList.Count].money = playerList[activePlayer % playerList.Count].money + 250;

                    Debug.Log(playerList[activePlayer % playerList.Count].playerName + " received 15000 money for passing square 0.");

                    if (activePlayer % playerList.Count == 0)
                    {
                        checkWeaponsPanelTexts[2].text = "" + playerList[0 % playerList.Count].money.ToString();
                    }


                }
                else if (playerList[activePlayer % playerList.Count].hasRobbedBank == true && playerList[activePlayer % playerList.Count].hasWeapon == false)
                {
                    playerList[activePlayer % playerList.Count].money = playerList[activePlayer % playerList.Count].money + 50;
                    StartCoroutine(fireWorks());
                    StartCoroutine(SalaryUIEnum());

                    moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                    moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);



                    if (activePlayer % playerList.Count == 0)
                    {
                        checkWeaponsPanelTexts[2].text = "" + playerList[0 % playerList.Count].money.ToString();
                    }


                }
                else
                {
                    StartCoroutine(SalaryUIEnumOne());
                }
            }



        }
        else if(playerList[activePlayer % playerList.Count].position == 49)
        {
            Quaternion startRotation = playerList[activePlayer % playerList.Count].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, -270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if(playerList[activePlayer % playerList.Count].position == 0)
        {
            Quaternion startRotation = playerList[activePlayer % playerList.Count].playerObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer % playerList.Count].playerObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }

           

            if (playerList[activePlayer % playerList.Count].hasPassedSalarySquare >= 1)
            {
                bool hasGoneRoundBoard = playerList[activePlayer % playerList.Count].goneRoundBoard = true;

                if (playerList[activePlayer % playerList.Count].hasRobbedBank == false && playerList[activePlayer % playerList.Count].hasWeapon == false)
                {

                    StartCoroutine(fireWorks());
                    StartCoroutine(SalaryUIEnum());


                    moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                    moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);

                  





                    playerList[activePlayer % playerList.Count].money = playerList[activePlayer % playerList.Count].money + 250;

                    Debug.Log(playerList[activePlayer % playerList.Count].playerName + " received 15000 money for passing square 0.");

                    if (activePlayer % playerList.Count == 0)
                    {
                        checkWeaponsPanelTexts[2].text = "" + playerList[0 % playerList.Count].money.ToString();
                    }

                 
                }
                else if (playerList[activePlayer % playerList.Count].hasRobbedBank == true && playerList[activePlayer % playerList.Count].hasWeapon == false)
                {
                    playerList[activePlayer % playerList.Count].money = playerList[activePlayer % playerList.Count].money + 50;
                    StartCoroutine(fireWorks());
                    StartCoroutine(SalaryUIEnum());

                    moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                    moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);



                    if (activePlayer % playerList.Count == 0)
                    {
                        checkWeaponsPanelTexts[2].text = "" + playerList[0 % playerList.Count].money.ToString();
                    }

                  
                }
                else
                {
                    StartCoroutine(SalaryUIEnumOne());
                }
            }

           
        }
        return playerObject.transform.position != goal;

    }

    public IEnumerator MysteryCardsFunction(Entity currentPlayer)
    {
        int randomizeMysteryCards = Random.Range(1, 6);
        

        if (playerList[activePlayer % playerList.Count].position == 2 || playerList[activePlayer % playerList.Count].position == 23 || playerList[activePlayer % playerList.Count].position == 27 || playerList[activePlayer % playerList.Count].position == 36 || playerList[activePlayer % playerList.Count].position == 39 || playerList[activePlayer % playerList.Count].position == 50 || playerList[activePlayer % playerList.Count].position == 53)
        {
            if (randomizeMysteryCards == 1)
            {

                yield return new WaitForSeconds(1f);


                cameraController.distance = -1;
                cameraController.offset = -1;
                if(playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = false;
                    cameraController.target = mysteryMen[0].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[0].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[0].CrossFade("GiveItem", 0.05f);
                }
                else if(playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = false;
                    cameraController.target = mysteryMen[1].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[1].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[1].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = false;
                    cameraController.target = mysteryMen[2].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[2].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = false;
                    cameraController.target = mysteryMen[3].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[3].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[3].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = false;
                    cameraController.target = mysteryMen[4].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[4].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[4].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = false;
                    cameraController.target = mysteryMen[5].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[5].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[5].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = false;
                    cameraController.target = mysteryMen[6].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[6].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[6].CrossFade("GiveItem", 0.05f);
                }


              

                yield return new WaitForSeconds(1.5f);
                //  StartCoroutine(attackingCameraMovement());

                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);

                MysteryCards[0].SetBool("HasLandedOnCard", true);
                MysteryCards[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[0].SetBool("HasEndedLandingOnCard", true);
                MysteryCards[0].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                MysteryCards[0].SetBool("HasLandedOnCard", false);
                MysteryCards[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = MysteryCardJail.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    MysteryCardJail.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(1f);

                //cameraController.target = JailBuilding.transform;
                StartCoroutine(CameraSwitchToJailFromPlayer());

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[1].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = true;

                    yield return new WaitForSeconds(1f);
                    MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                }

             

                JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
                JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
                JailCellClosingAudio.Play();

                (playerList[activePlayer % playerList.Count].money) /= 2;

                playerList[activePlayer % playerList.Count].hasWeapon = false;

                yield return new WaitForSeconds(1.5f);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);
                RemoveCharacterUI();

                yield return new WaitForSeconds(0.5f);

               
                    playerList[activePlayer % playerList.Count].WeaponInfo.Clear();
                    GunsTakenInJailAnim[0].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", true);



                    GunsTakenInJailAnim[0].CrossFade("WeaponsTakenInJail", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("WeaponsTakenInJailOne", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("WeaponsTakenInJail2", 0.05f);
                

                yield return new WaitForSeconds(3f);

                // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                StartCoroutine(CameraSwitchFromJailToPlayer());

                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;


                GunsTakenInJailAnim[0].SetBool("IsInJail", false);
                GunsTakenInJailAnim[1].SetBool("IsInJail", false);
                GunsTakenInJailAnim[2].SetBool("IsInJail", false);

                GunsTakenInJailAnim[0].CrossFade("New State", 0.05f);
                GunsTakenInJailAnim[1].CrossFade("New State", 0.05f);
                GunsTakenInJailAnim[2].CrossFade("New State", 0.05f);








                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);
            }
            else if (randomizeMysteryCards == 2)
            {
                yield return new WaitForSeconds(1f);



                cameraController.distance = -1;
                cameraController.offset = -1;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = false;
                    cameraController.target = mysteryMen[0].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[0].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[0].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = false;
                    cameraController.target = mysteryMen[1].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[1].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[1].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = false;
                    cameraController.target = mysteryMen[2].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[2].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[2].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = false;
                    cameraController.target = mysteryMen[3].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[3].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[3].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = false;
                    cameraController.target = mysteryMen[4].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[4].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[4].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = false;
                    cameraController.target = mysteryMen[5].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[5].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[5].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = false;
                    cameraController.target = mysteryMen[6].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[6].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[6].CrossFade("GiveItem", 0.05f);
                }
                
                //  StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1.5f);

                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[1].SetBool("HasLandedOnCard", true);
                MysteryCards[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[1].SetBool("HasEndedLandingOnCard", true);
                MysteryCards[1].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                MysteryCards[1].SetBool("HasLandedOnCard", false);
                MysteryCards[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = MysteryCardMoney.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    MysteryCardMoney.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);
                playerList[activePlayer % playerList.Count].money += 3500;
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimationEnding", 0.05f);
                RemoveCharacterUI();


                yield return new WaitForSeconds(1f);




                cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                cameraController.distance = 2.8f;
                cameraController.offset = -2.9f;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = true;

                    MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = true;

                    MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = true;

                    MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = true;

                    MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = true;

                    MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = true;

                    MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = true;

                    MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                }


                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsGettingMoney", false);

            }
            else if (randomizeMysteryCards == 3)
            {
                yield return new WaitForSeconds(1f);

                cameraController.distance = -1;
                cameraController.offset = -1;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = false;
                    cameraController.target = mysteryMen[0].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[0].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[0].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = false;
                    cameraController.target = mysteryMen[1].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[1].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[1].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = false;
                    cameraController.target = mysteryMen[2].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[2].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[2].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = false;
                    cameraController.target = mysteryMen[3].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[3].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[3].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = false;
                    cameraController.target = mysteryMen[4].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[4].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[4].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = false;
                    cameraController.target = mysteryMen[5].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[5].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[5].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = false;
                    cameraController.target = mysteryMen[6].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[6].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[6].CrossFade("GiveItem", 0.05f);
                }
               
                //  StartCoroutine(attackingCameraMovement());
                yield return new WaitForSeconds(1.5f);
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[2].SetBool("HasLandedOnCard", true);
                MysteryCards[2].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[2].SetBool("HasEndedLandingOnCard", true);
                MysteryCards[2].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                MysteryCards[2].SetBool("HasLandedOnCard", false);
                MysteryCards[2].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = MysteryCardWeaponM15.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    MysteryCardWeaponM15.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                Weapon selectedWeapon = weaponShop[2];

                Entity.WeaponInformation weaponInfo = new Entity.WeaponInformation
                {
                    name = selectedWeapon.name,
                    range = selectedWeapon.range,
                    damage = selectedWeapon.damage,
                    bullets = selectedWeapon.bullets
                };

                currentPlayer.WeaponInfo.Add(weaponInfo); //
                RemoveCharacterUI();

                playerList[activePlayer % playerList.Count].hasWeapon = true;

                yield return new WaitForSeconds(1f);




                cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                cameraController.distance = 2.8f;
                cameraController.offset = -2.9f;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = true;
                    MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = true;
                    MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = true;
                    MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = true;
                    MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = true;
                    MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = true;
                    MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = true;
                    MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                }


                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
            }
            else if (randomizeMysteryCards == 4)
            {
                yield return new WaitForSeconds(1f);


                cameraController.distance = -1;
                cameraController.offset = -1;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = false;
                    cameraController.target = mysteryMen[0].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[0].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[0].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = false;
                    cameraController.target = mysteryMen[1].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[1].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[1].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = false;
                    cameraController.target = mysteryMen[2].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[2].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[2].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = false;
                    cameraController.target = mysteryMen[3].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[3].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[3].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = false;
                    cameraController.target = mysteryMen[4].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[4].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[4].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = false;
                    cameraController.target = mysteryMen[5].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[5].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[5].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = false;
                    cameraController.target = mysteryMen[6].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[6].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[6].CrossFade("GiveItem", 0.05f);
                }
              
                //  StartCoroutine(attackingCameraMovement());
                yield return new WaitForSeconds(1.5f);
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[3].SetBool("HasLandedOnCard", true);
                MysteryCards[3].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[3].SetBool("HasEndedLandingOnCard", true);
                MysteryCards[3].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                MysteryCards[3].SetBool("HasLandedOnCard", false);
                MysteryCards[3].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = MysteryCardGainLife.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    MysteryCardGainLife.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                if (playerList[activePlayer % playerList.Count].lives < 6)
                {
                    playerList[activePlayer % playerList.Count].lives += 1;

                    livesUIAnimation[activePlayer % playerList.Count].SetBool("IsGainingLives", true);
                    livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimationEnding", 0.05f);

                }
                RemoveCharacterUI();

                yield return new WaitForSeconds(1f);




                cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                cameraController.distance = 2.8f;
                cameraController.offset = -2.9f;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = true;
                    MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = true;
                    MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = true;
                    MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = true;
                    MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = true;
                    MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = true;
                    MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = true;
                    MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                    MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                }
              
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsGainingLives", false);

                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
            }
            else if (randomizeMysteryCards == 5)
            {
                yield return new WaitForSeconds(1f);


                cameraController.distance = -1;
                cameraController.offset = -1;

                if (playerList[activePlayer % playerList.Count].position == 2)
                {
                    MysteryMenAnimations[0].applyRootMotion = false;
                    cameraController.target = mysteryMen[0].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[0].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[0].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 23)
                {
                    MysteryMenAnimations[1].applyRootMotion = false;
                    cameraController.target = mysteryMen[1].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[1].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[1].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 27)
                {
                    MysteryMenAnimations[2].applyRootMotion = false;
                    cameraController.target = mysteryMen[2].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[2].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[2].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 36)
                {
                    MysteryMenAnimations[3].applyRootMotion = false;
                    cameraController.target = mysteryMen[3].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[3].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[3].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 39)
                {
                    MysteryMenAnimations[4].applyRootMotion = false;
                    cameraController.target = mysteryMen[4].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[4].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[4].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 50)
                {
                    MysteryMenAnimations[5].applyRootMotion = false;
                    cameraController.target = mysteryMen[5].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[5].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[5].CrossFade("GiveItem", 0.05f);
                }
                else if (playerList[activePlayer % playerList.Count].position == 53)
                {
                    MysteryMenAnimations[6].applyRootMotion = false;
                    cameraController.target = mysteryMen[6].gameObject.transform;
                    yield return new WaitForSeconds(1f);

                    MysteryMenAnimations[6].SetBool("IsGettingItem", true);
                    MysteryMenAnimations[6].CrossFade("GiveItem", 0.05f);
                }
              
                //  StartCoroutine(attackingCameraMovement());
                yield return new WaitForSeconds(1.5f);
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[4].SetBool("HasLandedOnCard", true);
                MysteryCards[4].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                MysteryCards[4].SetBool("HasEndedLandingOnCard", true);
                MysteryCards[4].CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                MysteryCards[4].SetBool("HasLandedOnCard", false);
                MysteryCards[4].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = MysteryCardLoseLife.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    MysteryCardLoseLife.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);


                playerList[activePlayer % playerList.Count].lives -= 1;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimationEnding", 0.05f);
                RemoveCharacterUI();


                yield return new WaitForSeconds(1f);

                if (playerList[activePlayer % playerList.Count].lives <= 0)
                {
                    DepthOfFieldClear();
                    StartCoroutine(attackingCameraMovement());

                    playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;

                    playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsExplosionDead", true);
                    playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionDeath", 0.05f);


                    yield return new WaitForSeconds(2f);

                    rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " gave up the Ghost";
                    yield return new WaitForSeconds(2f);
                    rollDiceText.text = "";

                    yield return new WaitForSeconds(2f);
                    ResetCameraZoom();
                    DepthOfFieldBlury();

                    yield return new WaitForSeconds(2f);

                    //  int  activePlayerToBeRemoved = (activePlayer - 1) % playerList.Count;

                    livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                    StartCoroutine(SwitchPlayerCameraMove());

                    Entity playerToBeRemoved = playerList[(activePlayer - 1) % playerList.Count];
                    playerList.Remove(playerToBeRemoved);

                    yield return new WaitForSeconds(2f);

                    if (playerList.Count == 1)
                    {
                        StartCoroutine(playerWonFunction(playerList[activePlayer % playerList.Count]));
                    }
                    else
                    {
                        if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.CPU)
                        {
                            state = States.ROLL_DICE;
                        }
                        else if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                        {
                            state = States.ROLL_DICE;
                            yield return new WaitForSeconds(1f);

                            rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " 's Turn";
                            yield return new WaitForSeconds(1f);
                            rollDiceText.text = "";

                            yield return new WaitForSeconds(1f);

                            CharacterUIPanel.gameObject.SetActive(true);
                            rollDiceButton.gameObject.SetActive(true);
                            attackButton.gameObject.SetActive(true);


                        }
                    }
                    if (playerList[activePlayer % playerList.Count].position == 2)
                    {
                        MysteryMenAnimations[0].applyRootMotion = true;
                        MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 23)
                    {
                        MysteryMenAnimations[1].applyRootMotion = true;
                        MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 27)
                    {
                        MysteryMenAnimations[2].applyRootMotion = true;
                        MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 36)
                    {
                        MysteryMenAnimations[3].applyRootMotion = true;
                        MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 39)
                    {
                        MysteryMenAnimations[4].applyRootMotion = true;
                        MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 50)
                    {
                        MysteryMenAnimations[5].applyRootMotion = true;
                        MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 53)
                    {
                        MysteryMenAnimations[6].applyRootMotion = true;
                        MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                    }

                   
                }
                else
                {

                    cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                    cameraController.distance = 2.5f;
                    cameraController.offset = -2.9f;

                    if (playerList[activePlayer % playerList.Count].position == 2)
                    {
                        MysteryMenAnimations[0].applyRootMotion = true;
                        MysteryMenAnimations[0].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[0].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 23)
                    {
                        MysteryMenAnimations[1].applyRootMotion = true;
                        MysteryMenAnimations[1].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[1].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 27)
                    {
                        MysteryMenAnimations[2].applyRootMotion = true;
                        MysteryMenAnimations[2].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[2].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 36)
                    {
                        MysteryMenAnimations[3].applyRootMotion = true;
                        MysteryMenAnimations[3].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[3].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 39)
                    {
                        MysteryMenAnimations[4].applyRootMotion = true;
                        MysteryMenAnimations[4].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[4].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 50)
                    {
                        MysteryMenAnimations[5].applyRootMotion = true;
                        MysteryMenAnimations[5].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[5].CrossFade("BriefcaseIdle", 0.05f);
                    }
                    else if (playerList[activePlayer % playerList.Count].position == 53)
                    {
                        MysteryMenAnimations[6].applyRootMotion = true;
                        MysteryMenAnimations[6].SetBool("IsGettingItem", false);
                        MysteryMenAnimations[6].CrossFade("BriefcaseIdle", 0.05f);
                    }
                  
                    livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                    if (currentPlayer.playerType == PlayerTypes.HUMAN)
                    {
                        CharacterUIPanel.gameObject.SetActive(true);
                    }
                    isMoving = false;
                }
              

            }
        }

        isMoving = false;
       
    }


    public IEnumerator PoliceStopFunction(Entity currentPlayer, float currentIntensity)
    {
        if (playerList[activePlayer % playerList.Count].position == 13)
        {
            if (playerList[activePlayer % playerList.Count].hasWeapon == true)
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[1].SetBool("HasLandedOnCard", true);
                PoliceStop[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                Soldiers[0].gameObject.SetActive(true);
                Soldiers[1].gameObject.SetActive(true);

                PoliceStop[1].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[1].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[1].SetBool("HasLandedOnCard", false);
                PoliceStop[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopGotoJail.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopGotoJail.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);





                SoldiersAnimations[0].SetBool("CaughtPlayer", true);
                SoldiersAnimations[1].SetBool("CaughtPlayer", true);
                SoldiersAnimations[0].CrossFade("RifleDownToAim", 0.05f);
                SoldiersAnimations[1].CrossFade("RifleDownToAim", 0.05f);
                ReloadGunsAudio.Play();
                yield return new WaitForSeconds(1f);
                SoldiersAnimations[0].SetBool("CaughtPlayer", false);
                SoldiersAnimations[0].SetBool("AimAtPlayer", true);



                SoldiersAnimations[1].SetBool("CaughtPlayer", false);
                SoldiersAnimations[1].SetBool("AimAtPlayer", true);

                SoldiersAnimations[0].CrossFade("RifleAimingIdle", 0.05f);
                SoldiersAnimations[1].CrossFade("RifleAimingIdle", 0.05f);

                // yield return new WaitForSeconds(2f);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("WavingFr", 0.05f);


                Material changeNodeMaterial = NodeColorObjectList[13].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[13].gameObject.GetComponent<MeshRenderer>().materials[0];



                float duration = 0.17f;

                float startValueIntensity = 3.5f;
                float endValueIntensity = 3.5f;


                PoliceStopSquareAudio.Play();
                float t = 0;
                while (t < 5)
                {
                    t += Time.deltaTime;


                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColorRed = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorRed);

                    yield return new WaitForSeconds(0.5f);



                    Color finalColorBlue = Color.blue * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorBlue);




                    yield return new WaitForSeconds(0.5f);

                    t++;



                    yield return null;
                }

                yield return new WaitForSeconds(0.5f);
                PoliceStopSquareAudio.Stop();

                // cameraController.target = JailBuilding.transform;
                StartCoroutine(CameraSwitchToJailFromPlayer());

                Color finalColor = Color.blue * 0;
                changeNodeTexture.SetColor("_EmissionColor", finalColor);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.01f);
                //
                SoldiersAnimations[0].SetBool("CaughtPlayer", false);
                SoldiersAnimations[0].SetBool("AimAtPlayer", false);

                SoldiersAnimations[1].SetBool("CaughtPlayer", false);
                SoldiersAnimations[1].SetBool("AimAtPlayer", false);

                Soldiers[0].gameObject.SetActive(false);
                Soldiers[1].gameObject.SetActive(false);




                yield return new WaitForSeconds(1f);

                JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
                JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
                JailCellClosingAudio.Play();

                (playerList[activePlayer % playerList.Count].money) /= 2;
                playerList[activePlayer % playerList.Count].WeaponInfo.Clear();
                playerList[activePlayer % playerList.Count].hasWeapon = false;

                yield return new WaitForSeconds(1.5f);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);
                RemoveCharacterUI();

                

                    GunsTakenInJailAnim[0].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", true);



                    GunsTakenInJailAnim[0].CrossFade("WeaponsTakenInJail", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("WeaponsTakenInJailOne", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("WeaponsTakenInJail2", 0.05f);
                


                yield return new WaitForSeconds(4f);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);


                // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                StartCoroutine(CameraSwitchFromJailToPlayer());

                yield return new WaitForSeconds(1f);
                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;


                
                    GunsTakenInJailAnim[0].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", false);



                    GunsTakenInJailAnim[0].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("New State", 0.05f);

                









            }
            else
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasLandedOnCard", true);
                PoliceStop[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[0].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[0].SetBool("HasLandedOnCard", false);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopKeepGoing.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopKeepGoing.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(1f);

                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 20)
        {
            if (playerList[activePlayer % playerList.Count].hasWeapon == true)
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[1].SetBool("HasLandedOnCard", true);
                PoliceStop[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                Soldiers[2].gameObject.SetActive(true);
                Soldiers[3].gameObject.SetActive(true);

                PoliceStop[1].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[1].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[1].SetBool("HasLandedOnCard", false);
                PoliceStop[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopGotoJail.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopGotoJail.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);





                SoldiersAnimations[2].SetBool("CaughtPlayer", true);
                SoldiersAnimations[3].SetBool("CaughtPlayer", true);
                SoldiersAnimations[2].CrossFade("RifleDownToAim", 0.05f);
                SoldiersAnimations[3].CrossFade("RifleDownToAim", 0.05f);
                ReloadGunsAudio.Play();
                yield return new WaitForSeconds(1f);
                SoldiersAnimations[2].SetBool("CaughtPlayer", false);
                SoldiersAnimations[2].SetBool("AimAtPlayer", true);



                SoldiersAnimations[3].SetBool("CaughtPlayer", false);
                SoldiersAnimations[3].SetBool("AimAtPlayer", true);

                SoldiersAnimations[2].CrossFade("RifleAimingIdle", 0.05f);
                SoldiersAnimations[3].CrossFade("RifleAimingIdle", 0.05f);

                // yield return new WaitForSeconds(2f);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("WavingFr", 0.05f);


                Material changeNodeMaterial = NodeColorObjectList[20].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[20].gameObject.GetComponent<MeshRenderer>().materials[0];



                float duration = 0.17f;

                float startValueIntensity = 3.5f;
                float endValueIntensity = 3.5f;


                PoliceStopSquareAudio.Play();
                float t = 0;
                while (t < 5)
                {
                    t += Time.deltaTime;


                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColorRed = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorRed);

                    yield return new WaitForSeconds(0.5f);



                    Color finalColorBlue = Color.blue * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorBlue);




                    yield return new WaitForSeconds(0.5f);

                    t++;



                    yield return null;
                }

                yield return new WaitForSeconds(0.5f);
                PoliceStopSquareAudio.Stop();

                // cameraController.target = JailBuilding.transform;
                StartCoroutine(CameraSwitchToJailFromPlayer());

                Color finalColor = Color.blue * 0;
                changeNodeTexture.SetColor("_EmissionColor", finalColor);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.01f);
                //
                SoldiersAnimations[2].SetBool("CaughtPlayer", false);
                SoldiersAnimations[2].SetBool("AimAtPlayer", false);

                SoldiersAnimations[3].SetBool("CaughtPlayer", false);
                SoldiersAnimations[3].SetBool("AimAtPlayer", false);

                Soldiers[2].gameObject.SetActive(false);
                Soldiers[3].gameObject.SetActive(false);




                yield return new WaitForSeconds(1f);

                JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
                JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
                JailCellClosingAudio.Play();

                (playerList[activePlayer % playerList.Count].money) /= 2;
                playerList[activePlayer % playerList.Count].WeaponInfo.Clear();
                playerList[activePlayer % playerList.Count].hasWeapon = false;

                yield return new WaitForSeconds(1.5f);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);
                RemoveCharacterUI();

                

                    GunsTakenInJailAnim[0].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", true);



                    GunsTakenInJailAnim[0].CrossFade("WeaponsTakenInJail", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("WeaponsTakenInJailOne", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("WeaponsTakenInJail2", 0.05f);
                


                yield return new WaitForSeconds(4f);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);


                // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                StartCoroutine(CameraSwitchFromJailToPlayer());

                yield return new WaitForSeconds(1f);
                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;


               
                    GunsTakenInJailAnim[0].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", false);



                    GunsTakenInJailAnim[0].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("New State", 0.05f);

                









            }
            else
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasLandedOnCard", true);
                PoliceStop[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[0].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[0].SetBool("HasLandedOnCard", false);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopKeepGoing.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopKeepGoing.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(1f);

                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 29)
        {
            if (playerList[activePlayer % playerList.Count].hasWeapon == true)
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[1].SetBool("HasLandedOnCard", true);
                PoliceStop[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                Soldiers[4].gameObject.SetActive(true);
                Soldiers[5].gameObject.SetActive(true);

                PoliceStop[1].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[1].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[1].SetBool("HasLandedOnCard", false);
                PoliceStop[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopGotoJail.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopGotoJail.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);





                SoldiersAnimations[4].SetBool("CaughtPlayer", true);
                SoldiersAnimations[5].SetBool("CaughtPlayer", true);
                SoldiersAnimations[4].CrossFade("RifleDownToAim", 0.05f);
                SoldiersAnimations[5].CrossFade("RifleDownToAim", 0.05f);
                ReloadGunsAudio.Play();
                yield return new WaitForSeconds(1f);
                SoldiersAnimations[4].SetBool("CaughtPlayer", false);
                SoldiersAnimations[4].SetBool("AimAtPlayer", true);



                SoldiersAnimations[5].SetBool("CaughtPlayer", false);
                SoldiersAnimations[5].SetBool("AimAtPlayer", true);

                SoldiersAnimations[4].CrossFade("RifleAimingIdle", 0.05f);
                SoldiersAnimations[5].CrossFade("RifleAimingIdle", 0.05f);

                // yield return new WaitForSeconds(2f);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("WavingFr", 0.05f);


                Material changeNodeMaterial = NodeColorObjectList[29].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[29].gameObject.GetComponent<MeshRenderer>().materials[0];



                float duration = 0.17f;

                float startValueIntensity = 3.5f;
                float endValueIntensity = 3.5f;


                PoliceStopSquareAudio.Play();
                float t = 0;
                while (t < 5)
                {
                    t += Time.deltaTime;


                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColorRed = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorRed);

                    yield return new WaitForSeconds(0.5f);



                    Color finalColorBlue = Color.blue * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorBlue);




                    yield return new WaitForSeconds(0.5f);

                    t++;



                    yield return null;
                }

                yield return new WaitForSeconds(0.5f);
                PoliceStopSquareAudio.Stop();

                // cameraController.target = JailBuilding.transform;
                StartCoroutine(CameraSwitchToJailFromPlayer());

                Color finalColor = Color.blue * 0;
                changeNodeTexture.SetColor("_EmissionColor", finalColor);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.01f);
                //
                SoldiersAnimations[4].SetBool("CaughtPlayer", false);
                SoldiersAnimations[4].SetBool("AimAtPlayer", false);

                SoldiersAnimations[5].SetBool("CaughtPlayer", false);
                SoldiersAnimations[5].SetBool("AimAtPlayer", false);

                Soldiers[4].gameObject.SetActive(false);
                Soldiers[5].gameObject.SetActive(false);




                yield return new WaitForSeconds(1f);

                JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
                JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
                JailCellClosingAudio.Play();

                (playerList[activePlayer % playerList.Count].money) /= 2;
                playerList[activePlayer % playerList.Count].WeaponInfo.Clear();
                playerList[activePlayer % playerList.Count].hasWeapon = false;

                yield return new WaitForSeconds(1.5f);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);
                RemoveCharacterUI();

               

                    GunsTakenInJailAnim[0].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", true);



                    GunsTakenInJailAnim[0].CrossFade("WeaponsTakenInJail", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("WeaponsTakenInJailOne", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("WeaponsTakenInJail2", 0.05f);
                


                yield return new WaitForSeconds(4f);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);


                // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                StartCoroutine(CameraSwitchFromJailToPlayer());

                yield return new WaitForSeconds(1f);
                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;


               
                    GunsTakenInJailAnim[0].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", false);



                    GunsTakenInJailAnim[0].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("New State", 0.05f);

                









            }
            else
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasLandedOnCard", true);
                PoliceStop[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[0].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[0].SetBool("HasLandedOnCard", false);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopKeepGoing.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopKeepGoing.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(1f);

                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;
            }
        }
        else if (playerList[activePlayer % playerList.Count].position == 49)
        {
            if (playerList[activePlayer % playerList.Count].hasWeapon == true)
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[1].SetBool("HasLandedOnCard", true);
                PoliceStop[1].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                Soldiers[6].gameObject.SetActive(true);
                Soldiers[7].gameObject.SetActive(true);

                PoliceStop[1].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[1].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[1].SetBool("HasLandedOnCard", false);
                PoliceStop[1].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopGotoJail.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopGotoJail.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);





                SoldiersAnimations[6].SetBool("CaughtPlayer", true);
                SoldiersAnimations[7].SetBool("CaughtPlayer", true);
                SoldiersAnimations[6].CrossFade("RifleDownToAim", 0.05f);
                SoldiersAnimations[7].CrossFade("RifleDownToAim", 0.05f);
                ReloadGunsAudio.Play();
                yield return new WaitForSeconds(1f);
                SoldiersAnimations[6].SetBool("CaughtPlayer", false);
                SoldiersAnimations[6].SetBool("AimAtPlayer", true);



                SoldiersAnimations[7].SetBool("CaughtPlayer", false);
                SoldiersAnimations[7].SetBool("AimAtPlayer", true);

                SoldiersAnimations[6].CrossFade("RifleAimingIdle", 0.05f);
                SoldiersAnimations[7].CrossFade("RifleAimingIdle", 0.05f);

                // yield return new WaitForSeconds(2f);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("WavingFr", 0.05f);


                Material changeNodeMaterial = NodeColorObjectList[49].gameObject.GetComponent<MeshRenderer>().materials[1];
                Material changeNodeTexture = NodeColorObjectList[49].gameObject.GetComponent<MeshRenderer>().materials[0];



                float duration = 0.17f;

                float startValueIntensity = 3.5f;
                float endValueIntensity = 3.5f;


                PoliceStopSquareAudio.Play();
                float t = 0;
                while (t < 5)
                {
                    t += Time.deltaTime;


                    currentIntensity = Mathf.Lerp(startValueIntensity, endValueIntensity, t / duration);
                    Color finalColorRed = Color.red * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorRed);

                    yield return new WaitForSeconds(0.5f);



                    Color finalColorBlue = Color.blue * currentIntensity;
                    changeNodeTexture.SetColor("_EmissionColor", finalColorBlue);




                    yield return new WaitForSeconds(0.5f);

                    t++;



                    yield return null;
                }

                yield return new WaitForSeconds(0.5f);
                PoliceStopSquareAudio.Stop();

                // cameraController.target = JailBuilding.transform;
                StartCoroutine(CameraSwitchToJailFromPlayer());

                Color finalColor = Color.blue * 0;
                changeNodeTexture.SetColor("_EmissionColor", finalColor);

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsPlayerCaught", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.01f);
                //
                SoldiersAnimations[6].SetBool("CaughtPlayer", false);
                SoldiersAnimations[6].SetBool("AimAtPlayer", false);

                SoldiersAnimations[7].SetBool("CaughtPlayer", false);
                SoldiersAnimations[7].SetBool("AimAtPlayer", false);

                Soldiers[6].gameObject.SetActive(false);
                Soldiers[7].gameObject.SetActive(false);




                yield return new WaitForSeconds(1f);

                JailBuildingCellDoorAnimator.SetBool("IsInJail", true);
                JailBuildingCellDoorAnimator.CrossFade("JailDoorAnimation", 0.02f);
                JailCellClosingAudio.Play();

                (playerList[activePlayer % playerList.Count].money) /= 2;
                playerList[activePlayer % playerList.Count].WeaponInfo.Clear();
                playerList[activePlayer % playerList.Count].hasWeapon = false;

                yield return new WaitForSeconds(1.5f);

                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", true);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("moneyImgAnimation", 0.05f);
                RemoveCharacterUI();

               

                    GunsTakenInJailAnim[0].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", true);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", true);



                    GunsTakenInJailAnim[0].CrossFade("WeaponsTakenInJail", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("WeaponsTakenInJailOne", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("WeaponsTakenInJail2", 0.05f);
                


                yield return new WaitForSeconds(4f);
                moneyUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingMoney", false);
                moneyUIAnimation[activePlayer % playerList.Count].CrossFade("New State", 0.05f);


                // cameraController.target = playerList[activePlayer % playerList.Count].playerObject.transform;
                StartCoroutine(CameraSwitchFromJailToPlayer());

                yield return new WaitForSeconds(1f);
                if (currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                isMoving = false;


               
                    GunsTakenInJailAnim[0].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[1].SetBool("IsInJail", false);
                    GunsTakenInJailAnim[2].SetBool("IsInJail", false);



                    GunsTakenInJailAnim[0].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[1].CrossFade("New State", 0.05f);
                    GunsTakenInJailAnim[2].CrossFade("New State", 0.05f);

                









            }
            else
            {
                DepthofFieldforDice();
                AllCharacterPanelsHolder.gameObject.SetActive(false);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasLandedOnCard", true);
                PoliceStop[0].CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", true);
                PoliceStop[0].CrossFade("CardPanelEnding", 0.08f);



                yield return new WaitForSeconds(1f);

                PoliceStop[0].SetBool("HasLandedOnCard", false);
                PoliceStop[0].SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = PoliceStopKeepGoing.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    PoliceStopKeepGoing.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }


                StartCoroutine(BlurEffects());
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                yield return new WaitForSeconds(1f);
                if(currentPlayer.playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
            
                isMoving = false;
            }
        }
    }

    public IEnumerator TrapCardsFunction()
    {
        if (playerList[activePlayer % playerList.Count].position == 16) //Trap Cards
        {

            Vector3 startPositionForActivePlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
            Vector3 startPositionForGrenade = GrenadeTrap.transform.localPosition;

            GrenadeMeshRenderer[0].enabled = true;

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            playerList[activePlayer % playerList.Count].lives--;

            if (playerList[activePlayer % playerList.Count].lives >= 1)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[0].SetBool("IsOnTrap", true);
                GrenadeObjectAnimator[0].CrossFade("GrenadeTrap", 0.08f);


                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosion.gameObject.SetActive(true);
                GrenadeTrapExplosion.Play();
                grenadeExplosionAudio.Play();
                GrenadeMeshRenderer[0].enabled = false;

                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();



                Quaternion startRotation = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosion != null)
                {
                    GrenadeTrapExplosion.Stop();
                    GrenadeTrapExplosion.gameObject.SetActive(false);
                    GrenadeObjectAnimator[0].SetBool("IsOnTrap", false);
                    grenadeExplosionAudio.Stop();


                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrap.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade);
                    }


                }







                yield return new WaitForSeconds(3f);
                yield return new WaitForSeconds(0.5f);

                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", false);
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = false;
                Vector3 endPositionForActivePlayerOne = startPositionForActivePlayer;
                float tPositionActivePlayerOne = 0;
                float moveSpeedActivePlayerOne = 5.0f;

                while (tPositionActivePlayerOne < 1)
                {
                    tPositionActivePlayerOne += Time.deltaTime * moveSpeedActivePlayerOne;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayerOne, tPositionActivePlayerOne);
                }

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }




                ResetCameraZoom();
                StartCoroutine(BlurEffects());

                isMoving = false;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);
                if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                else
                {
                    isMoving = false;
                }
              
                GrenadeMeshRenderer[0].enabled = false;
            }
            else if (playerList[activePlayer % playerList.Count].lives <= 0)
            {


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[0].SetBool("IsOnTrap", true);
                GrenadeObjectAnimator[0].CrossFade("GrenadeTrap", 0.08f);
                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosion.gameObject.SetActive(true);
                GrenadeTrapExplosion.Play();
                grenadeExplosionAudio.Play();
                GrenadeTrap.gameObject.SetActive(false);
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsExplosionDead", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionDeath", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosion != null)
                {
                    GrenadeTrapExplosion.Stop();
                    GrenadeTrapExplosion.gameObject.SetActive(false);
                    GrenadeObjectAnimator[0].SetBool("IsOnTrap", false);

                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrap.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade);
                    }





                }


                yield return new WaitForSeconds(2f);

                rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                yield return new WaitForSeconds(2f);
                ResetCameraZoom();

                yield return new WaitForSeconds(2f);

                ///  int  activePlayerToBeRemoved = (activePlayer - 1) % playerList.Count;


                

                StartCoroutine(switchPlayerAfterTrap());
                Debug.Log("Active Player is " + activePlayer);

                yield return new WaitForSeconds(2f);
                Entity playerToBeRemoved = playerList[((activePlayer)) % playerList.Count];

                playerList.Remove(playerToBeRemoved);       
                RemoveCharacterUI();
                Debug.Log("Active Player is " + activePlayer);

                yield return new WaitForSeconds(2f);

                if (playerList.Count == 1)
                {
                    StartCoroutine(playerWonFunction(playerList[activePlayer % playerList.Count]));

                }
                else
                {
                    if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.CPU)
                    {
                        isMoving = false;
                        state = States.ROLL_DICE;
                    }
                    else if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                    {
                        state = States.ROLL_DICE;
                        yield return new WaitForSeconds(1f);

                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " 's Turn";
                        Debug.Log("Active Player is " + activePlayer);
                        yield return new WaitForSeconds(1f);
                        rollDiceText.text = "";
                       

                        yield return new WaitForSeconds(1f);

                        CharacterUIPanel.gameObject.SetActive(true);
                        rollDiceButton.gameObject.SetActive(true);
                        attackButton.gameObject.SetActive(true);

                       


                    }
                }









            }





        }
        else if (playerList[activePlayer % playerList.Count].position == 25) //Trap Cards
        {

            Vector3 startPositionForActivePlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
            Vector3 startPositionForGrenade = GrenadeTrapOne.transform.localPosition; //

            GrenadeMeshRenderer[1].enabled = true; //

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            playerList[activePlayer % playerList.Count].lives--;

            if (playerList[activePlayer % playerList.Count].lives >= 1)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[1].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[1].CrossFade("GrenadeTrapThree", 0.08f); //


                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionOne.gameObject.SetActive(true); //
                GrenadeTrapExplosionOne.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeMeshRenderer[1].enabled = false; //

                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();



                Quaternion startRotation = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionOne != null) //
                {
                    GrenadeTrapExplosionOne.Stop(); //
                    GrenadeTrapExplosionOne.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[1].SetBool("IsOnTrap", false); //
                    grenadeExplosionAudio.Stop();


                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapOne.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }


                }







                yield return new WaitForSeconds(3f);
                yield return new WaitForSeconds(0.5f);

                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", false);
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = false;
                Vector3 endPositionForActivePlayerOne = startPositionForActivePlayer;
                float tPositionActivePlayerOne = 0;
                float moveSpeedActivePlayerOne = 5.0f;

                while (tPositionActivePlayerOne < 1)
                {
                    tPositionActivePlayerOne += Time.deltaTime * moveSpeedActivePlayerOne;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayerOne, tPositionActivePlayerOne);
                }

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }




                ResetCameraZoom();
                StartCoroutine(BlurEffects());

                isMoving = false;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);
                if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                else
                {
                    isMoving = false;
                }
                GrenadeMeshRenderer[1].enabled = false; //
            }
            else if (playerList[activePlayer % playerList.Count].lives <= 0)
            {


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[1].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[1].CrossFade("GrenadeTrapOne", 0.08f); //
                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionOne.gameObject.SetActive(true); //
                GrenadeTrapExplosionOne.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeTrapOne.gameObject.SetActive(false); //
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsExplosionDead", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionDeath", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionOne != null) //
                {
                    GrenadeTrapExplosionOne.Stop(); //
                    GrenadeTrapExplosionOne.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[1].SetBool("IsOnTrap", false); //

                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapOne.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }





                }


                yield return new WaitForSeconds(2f);

                rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                yield return new WaitForSeconds(2f);
                ResetCameraZoom();

                yield return new WaitForSeconds(2f);

                //  int  activePlayerToBeRemoved = (activePlayer - 1) % playerList.Count;

                StartCoroutine(switchPlayerAfterTrap());

                yield return new WaitForSeconds(2f);


                Entity playerToBeRemoved = playerList[activePlayer % playerList.Count];


                playerList.Remove(playerToBeRemoved);
                RemoveCharacterUI();

                yield return new WaitForSeconds(2f);

                if (playerList.Count == 1)
                {
                    StartCoroutine(playerWonFunction(playerList[activePlayer % playerList.Count]));

                }
                else
                {
                    if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.CPU)
                    {
                        isMoving = false;
                        state = States.ROLL_DICE;
                    }
                    else if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                    {
                        state = States.ROLL_DICE;
                        yield return new WaitForSeconds(1f);

                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " 's Turn";
                        yield return new WaitForSeconds(1f);
                        rollDiceText.text = "";

                        yield return new WaitForSeconds(1f);

                        CharacterUIPanel.gameObject.SetActive(true);
                        rollDiceButton.gameObject.SetActive(true);
                        attackButton.gameObject.SetActive(true);


                    }
                }









            }





        }
        else if (playerList[activePlayer % playerList.Count].position == 33) //Trap Cards
        {

            Vector3 startPositionForActivePlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
            Vector3 startPositionForGrenade = GrenadeTrapTwo.transform.localPosition; //

            GrenadeMeshRenderer[2].enabled = true; //

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            playerList[activePlayer % playerList.Count].lives--;

            if (playerList[activePlayer % playerList.Count].lives >= 1)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[2].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[2].CrossFade("GrenadeTrapOne", 0.08f); //


                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionTwo.gameObject.SetActive(true); //
                GrenadeTrapExplosionTwo.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeMeshRenderer[2].enabled = false; //

                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();



                Quaternion startRotation = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionTwo != null) //
                {
                    GrenadeTrapExplosionTwo.Stop(); //
                    GrenadeTrapExplosionTwo.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[2].SetBool("IsOnTrap", false); //
                    grenadeExplosionAudio.Stop();


                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapTwo.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }


                }







                yield return new WaitForSeconds(3f);
                yield return new WaitForSeconds(0.5f);

                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", false);
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = false;
                Vector3 endPositionForActivePlayerOne = startPositionForActivePlayer;
                float tPositionActivePlayerOne = 0;
                float moveSpeedActivePlayerOne = 5.0f;

                while (tPositionActivePlayerOne < 1)
                {
                    tPositionActivePlayerOne += Time.deltaTime * moveSpeedActivePlayerOne;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayerOne, tPositionActivePlayerOne);
                }

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }




                ResetCameraZoom();
                StartCoroutine(BlurEffects());

                isMoving = false;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);
                if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                else
                {
                    isMoving = false;
                }
                GrenadeMeshRenderer[2].enabled = false; //
            }
            else if (playerList[activePlayer % playerList.Count].lives <= 0)
            {


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[2].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[2].CrossFade("GrenadeTrapOne", 0.08f); //
                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionTwo.gameObject.SetActive(true); //
                GrenadeTrapExplosionTwo.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeTrapTwo.gameObject.SetActive(false); //
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsExplosionDead", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionDeath", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionTwo != null) //
                {
                    GrenadeTrapExplosionTwo.Stop(); //
                    GrenadeTrapExplosionTwo.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[2].SetBool("IsOnTrap", false); //

                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapTwo.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }





                }


                yield return new WaitForSeconds(2f);

                rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                yield return new WaitForSeconds(2f);
                ResetCameraZoom();

                yield return new WaitForSeconds(2f);

                //  int  activePlayerToBeRemoved = (activePlayer - 1) % playerList.Count;
                StartCoroutine(switchPlayerAfterTrap());

                yield return new WaitForSeconds(2f);


                Entity playerToBeRemoved = playerList[(activePlayer) % playerList.Count];


                playerList.Remove(playerToBeRemoved);
                RemoveCharacterUI();

                yield return new WaitForSeconds(2f);

                if (playerList.Count == 1)
                {
                    StartCoroutine(playerWonFunction(playerList[activePlayer % playerList.Count]));

                }
                else
                {
                    if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.CPU)
                    {
                        isMoving = false;
                        state = States.ROLL_DICE;
                    }
                    else if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                    {
                        state = States.ROLL_DICE;
                        yield return new WaitForSeconds(1f);

                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " 's Turn";
                        yield return new WaitForSeconds(1f);
                        rollDiceText.text = "";

                        yield return new WaitForSeconds(1f);

                        CharacterUIPanel.gameObject.SetActive(true);
                        rollDiceButton.gameObject.SetActive(true);
                        attackButton.gameObject.SetActive(true);


                    }
                }









            }





        }
        else if (playerList[activePlayer % playerList.Count].position == 42) //Trap Cards
        {

            Vector3 startPositionForActivePlayer = playerList[activePlayer % playerList.Count].characterObject.transform.localPosition;
            Vector3 startPositionForGrenade = GrenadeTrapThree.transform.localPosition; //

            GrenadeMeshRenderer[3].enabled = true; //

            DepthofFieldforDice();
            AllCharacterPanelsHolder.gameObject.SetActive(false);

            playerList[activePlayer % playerList.Count].lives--;

            if (playerList[activePlayer % playerList.Count].lives >= 1)
            {
                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[3].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[3].CrossFade("GrenadeTrapTwo", 0.08f); //


                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionThree.gameObject.SetActive(true); //
                GrenadeTrapExplosionThree.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeMeshRenderer[3].enabled = false; //

                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();



                Quaternion startRotation = playerList[activePlayer % playerList.Count].characterObject.transform.rotation;
                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionHurt", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionThree != null) //
                {
                    GrenadeTrapExplosionThree.Stop(); //
                    GrenadeTrapExplosionThree.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[3].SetBool("IsOnTrap", false); //
                    grenadeExplosionAudio.Stop();


                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapThree.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }


                }







                yield return new WaitForSeconds(3f);
                yield return new WaitForSeconds(0.5f);

                Vector3 endPositionForActivePlayer = startPositionForActivePlayer;
                float tPositionActivePlayer = 0;
                float moveSpeedActivePlayer = 5.0f;

                while (tPositionActivePlayer < 1)
                {
                    tPositionActivePlayer += Time.deltaTime * moveSpeedActivePlayer;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayer, tPositionActivePlayer);
                }
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsHitExplosion", false);
                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("GettingUp", 0.05f);


                yield return new WaitForSeconds(2f);


                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = false;
                Vector3 endPositionForActivePlayerOne = startPositionForActivePlayer;
                float tPositionActivePlayerOne = 0;
                float moveSpeedActivePlayerOne = 5.0f;

                while (tPositionActivePlayerOne < 1)
                {
                    tPositionActivePlayerOne += Time.deltaTime * moveSpeedActivePlayerOne;
                    playerList[activePlayer % playerList.Count].characterObject.transform.localPosition = Vector3.Lerp(startPositionForActivePlayer, endPositionForActivePlayerOne, tPositionActivePlayerOne);
                }

                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsGettingUp", false);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("Idle", 0.05f);
                Quaternion endRotation = startRotation;
                float t = 0;
                while (t < 1)
                {
                    t += Time.deltaTime * turnSpeed;
                    playerList[activePlayer % playerList.Count].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

                }




                ResetCameraZoom();
                StartCoroutine(BlurEffects());

                isMoving = false;
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);
                if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                {
                    CharacterUIPanel.gameObject.SetActive(true);
                }
                else
                {
                    isMoving = false;
                }
                GrenadeMeshRenderer[3].enabled = false; //
            }
            else if (playerList[activePlayer % playerList.Count].lives <= 0)
            {


                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasLandedOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelOpening", 0.1f);

                yield return new WaitForSeconds(5.5f);

                CardsPickedAudio.Play();
                yield return new WaitForSeconds(0.2f);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", true);
                TrapCardAnimators.CrossFade("CardPanelEnding", 0.08f);

                yield return new WaitForSeconds(1f);

                TrapCardAnimators.SetBool("HasLandedOnCard", false);
                TrapCardAnimators.SetBool("HasEndedLandingOnCard", false);

                Vector3 startPositionForCardPanel = TrapCardLives.transform.localPosition;
                Vector3 endPositionForCardPanel = new Vector3(629f, -48f, 0);
                float tPosition = 0;
                float moveSpeed = 5.0f;

                while (tPosition < 1)
                {
                    tPosition += Time.deltaTime * moveSpeed;
                    TrapCardLives.transform.localPosition = Vector3.Lerp(startPositionForCardPanel, endPositionForCardPanel, tPosition);
                }



                //  StartCoroutine(BlurEffects());
                DepthOfFieldClear();
                AllCharacterPanelsHolder.gameObject.SetActive(true);

                StartCoroutine(attackingCameraMovement());

                yield return new WaitForSeconds(1f);

                GrenadeObjectAnimator[3].SetBool("IsOnTrap", true); //
                GrenadeObjectAnimator[3].CrossFade("GrenadeTrapTwo", 0.08f); //
                yield return new WaitForSeconds(2f);

                GrenadeTrapExplosionThree.gameObject.SetActive(true); //
                GrenadeTrapExplosionThree.Play(); //
                grenadeExplosionAudio.Play();
                GrenadeTrapThree.gameObject.SetActive(false); //
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", true);
                livesUIAnimation[activePlayer % playerList.Count].CrossFade("LivesUIAnimation", 0.05f);
                RemoveCharacterUI();


                // yield return new WaitForSeconds(0.3f);

                playerList[activePlayer % playerList.Count].playerAnimator.applyRootMotion = true;


                playerList[activePlayer % playerList.Count].playerAnimator.SetBool("IsExplosionDead", true);
                playerList[activePlayer % playerList.Count].playerAnimator.CrossFade("ExplosionDeath", 0.05f);

                yield return new WaitForSeconds(2f);

                if (GrenadeTrapExplosionThree != null) //
                {
                    GrenadeTrapExplosionThree.Stop(); //
                    GrenadeTrapExplosionThree.gameObject.SetActive(false); //
                    GrenadeObjectAnimator[3].SetBool("IsOnTrap", false); //

                    Vector3 endPositionForGrenade = startPositionForGrenade;
                    float tPositionForGrenade = 0;
                    float moveSpeedForGrenade = 5.0f;

                    while (tPositionForGrenade < 1)
                    {
                        tPositionForGrenade += Time.deltaTime * moveSpeedForGrenade;
                        GrenadeTrapThree.transform.localPosition = Vector3.Lerp(startPositionForGrenade, endPositionForGrenade, tPositionForGrenade); //
                    }





                }


                yield return new WaitForSeconds(2f);

                rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " gave up the Ghost";
                yield return new WaitForSeconds(2f);
                rollDiceText.text = "";
                livesUIAnimation[activePlayer % playerList.Count].SetBool("IsLosingLives", false);

                yield return new WaitForSeconds(2f);
                ResetCameraZoom();

                yield return new WaitForSeconds(2f);

                //  int  activePlayerToBeRemoved = (activePlayer - 1) % playerList.Count;

                StartCoroutine(switchPlayerAfterTrap());

                yield return new WaitForSeconds(2f);


                Entity playerToBeRemoved = playerList[(activePlayer) % playerList.Count];


                playerList.Remove(playerToBeRemoved);
                Debug.Log( "Removed" + playerToBeRemoved.playerName);
                RemoveCharacterUI();

                yield return new WaitForSeconds(2f);

                if (playerList.Count == 1)
                {
                    StartCoroutine(playerWonFunction(playerList[activePlayer % playerList.Count]));

                }
                else
                {
                    if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.CPU)
                    {
                        isMoving = false;
                        state = States.ROLL_DICE;
                    }
                    else if (playerList[activePlayer % playerList.Count].playerType == PlayerTypes.HUMAN)
                    {
                        state = States.ROLL_DICE;
                        yield return new WaitForSeconds(1f);

                        rollDiceText.text = playerList[activePlayer % playerList.Count].playerName + " 's Turn";
                        Debug.Log(playerList[activePlayer % playerList.Count].playerName + " 's turn");
                        yield return new WaitForSeconds(1f);
                        rollDiceText.text = "";

                        yield return new WaitForSeconds(1f);

                        CharacterUIPanel.gameObject.SetActive(true);
                        rollDiceButton.gameObject.SetActive(true);
                        attackButton.gameObject.SetActive(true);


                    }
                }









            }




        }
    }
    public IEnumerator fireWorks()
    {
        FireWorksFlash.gameObject.SetActive(true);
        FireWorksFlash.Play();

      

        yield return new WaitForSeconds(4f);

        FireWorksFlash.gameObject.SetActive(false);
        FireWorksFlash.Stop();
    }

    public IEnumerator SalaryUIEnum()
    {
       
      
        SalaryUIAnim.SetBool("GotSalary", true);
        SalaryUIAnim.CrossFade("PaycheckOpening", 0.05f);

        yield return new WaitForSeconds(3f);

        SalaryUIAnim.SetBool("GotSalary", false);
        SalaryUIAnim.SetBool("GotSalaryDone", true);
        SalaryUIAnim.CrossFade("PayCheckEnding", 0.05f);

        SalaryUIAnim.SetBool("GotSalary", false);
        SalaryUIAnim.SetBool("GotSalaryDone", false);

    }

    public IEnumerator SalaryUIEnumOne()
    {
        SalaryUIAnimOne.SetBool("GotSalary", true);
        SalaryUIAnimOne.CrossFade("PaycheckOpening", 0.05f);

        yield return new WaitForSeconds(3f);

        SalaryUIAnimOne.SetBool("GotSalary", false);
        SalaryUIAnimOne.SetBool("GotSalaryDone", true);
        SalaryUIAnimOne.CrossFade("PayCheckEnding", 0.05f);

        SalaryUIAnimOne.SetBool("GotSalary", false);
        SalaryUIAnimOne.SetBool("GotSalaryDone", false);
    }

    public void RollDice()
    {
        if (playerList[activePlayer % playerList.Count].position == 0 || playerList[activePlayer % playerList.Count].position <= 20)
        {
            dice.RollDice();
        }
        else if (playerList[activePlayer % playerList.Count].position >= 21 && playerList[activePlayer % playerList.Count].position <= 30)
        {
            dice.RollDiceSecondLine();
        }
        else if (playerList[activePlayer % playerList.Count].position >= 31 && playerList[activePlayer % playerList.Count].position <= 49)
        {
            dice.RollDiceThirdLine();
        }
        else if (playerList[activePlayer % playerList.Count].position >= 50 && playerList[activePlayer % playerList.Count].position <= 58)
        {
            dice.RollDiceFourthLine();
        }
    }

    public void resetCharacterToBeStraight()
    {
        if (playerList[activePlayer % playerList.Count].position == 0 || playerList[activePlayer % playerList.Count].position <= 20)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 90, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 21 && playerList[activePlayer % playerList.Count].position <= 30)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 0, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 31 && playerList[activePlayer % playerList.Count].position <= 49)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 270, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
        else if (playerList[activePlayer % playerList.Count].position >= 50 && playerList[activePlayer % playerList.Count].position <= 58)
        {
            Quaternion startRotation = playerList[activePlayer].characterObject.transform.rotation;
            Quaternion endRotation = Quaternion.Euler(0, 180, 0);
            float t = 0;
            while (t < 1)
            {
                t += Time.deltaTime * turnSpeed;
                playerList[activePlayer].characterObject.transform.rotation = Quaternion.Slerp(startRotation, endRotation, t);

            }
        }
    }

}




